{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Islandora CLAW Summary Islandora is an open-source repository framework, that combines a Drupal front-end with a Fedora repository. It is a solution for institutions who want an extremely flexible and configurable preservation repository without creating a lot of custom code. Islandora CLAW integrates Drupal (currently, Drupal 8) and Duraspace's Fedora Repository project (currently, Fedora 5). Islandora CLAW is currently in beta. (todo: release section?) Islandora CLAW allows you to create nodes, media, files, and taxonomy terms in Drupal, which are converted to RDF and pushed into a Fedora repository. It allows you to configure derivatives, automatic processes that transform files to other types for display or preservation, or extract additional metadata. Installation Islandora CLAW is installed through an Ansible Playbook called claw-playbook . With Git, Vagrant, and Ansible installed, you can spin up a local development environment with git clone https://github.com/Islandora-Devops/claw-playbook cd claw-playbook vagrant up See the Installation section for more information.","title":"Summary"},{"location":"#islandora-claw","text":"","title":"Islandora CLAW"},{"location":"#summary","text":"Islandora is an open-source repository framework, that combines a Drupal front-end with a Fedora repository. It is a solution for institutions who want an extremely flexible and configurable preservation repository without creating a lot of custom code. Islandora CLAW integrates Drupal (currently, Drupal 8) and Duraspace's Fedora Repository project (currently, Fedora 5). Islandora CLAW is currently in beta. (todo: release section?) Islandora CLAW allows you to create nodes, media, files, and taxonomy terms in Drupal, which are converted to RDF and pushed into a Fedora repository. It allows you to configure derivatives, automatic processes that transform files to other types for display or preservation, or extract additional metadata.","title":"Summary"},{"location":"#installation","text":"Islandora CLAW is installed through an Ansible Playbook called claw-playbook . With Git, Vagrant, and Ansible installed, you can spin up a local development environment with git clone https://github.com/Islandora-Devops/claw-playbook cd claw-playbook vagrant up See the Installation section for more information.","title":"Installation"},{"location":"alpaca/","text":"Alpaca Description Event-driven middleware based on Apache Camel that synchronizes a Fedora 4 repository with a Drupal instance. Building This project requires Java 8 and can be built with Gradle . To build and test locally, use ./gradlew build . Sponsors Discoverygarden LYRASIS York University McMaster University University of Prince Edward Island University of Manitoba University of Limerick Simon Fraser University PALS Maintainers Nick Ruest Daniel Lamb Development If you would like to contribute, please get involved by attending our weekly Tech Call . We love to hear from you! If you would like to contribute code to the project, you need to be covered by an Islandora Foundation Contributor License Agreement or Corporate Contributor Licencse Agreement . Please see the Contributors pages on Islandora.ca for more information. Licensing MIT","title":"Alpaca"},{"location":"alpaca/#alpaca","text":"","title":"Alpaca"},{"location":"alpaca/#description","text":"Event-driven middleware based on Apache Camel that synchronizes a Fedora 4 repository with a Drupal instance.","title":"Description"},{"location":"alpaca/#building","text":"This project requires Java 8 and can be built with Gradle . To build and test locally, use ./gradlew build .","title":"Building"},{"location":"alpaca/#sponsors","text":"Discoverygarden LYRASIS York University McMaster University University of Prince Edward Island University of Manitoba University of Limerick Simon Fraser University PALS","title":"Sponsors"},{"location":"alpaca/#maintainers","text":"Nick Ruest Daniel Lamb","title":"Maintainers"},{"location":"alpaca/#development","text":"If you would like to contribute, please get involved by attending our weekly Tech Call . We love to hear from you! If you would like to contribute code to the project, you need to be covered by an Islandora Foundation Contributor License Agreement or Corporate Contributor Licencse Agreement . Please see the Contributors pages on Islandora.ca for more information.","title":"Development"},{"location":"alpaca/#licensing","text":"MIT","title":"Licensing"},{"location":"alpaca/alpaca-technical-stack/","text":"Alpaca Technical Stack Alpaca contains several OSGI modules or bundles. They are grouped together as features and deployed to Karaf container. OSGi OSGi is a specification to develop and deploy modular Java applications. It allows for dynamic deployment (hot deployment) and dependency management. The base unit of resources is called a bundle. Bundle is similar to a jar file, with additional information to be processed as an OSGi component. Several bundles can be grouped together into a Feature and installed together. OSGi bundles can be run on containers implementing the OSGi specification. Apache Karaf is one such container Karaf Apache Karaf is a container that can be used to deploy an array of applications such servlets, Apache Camel components, jars etc. Karaf - Bundle - Hello World Download a bundle to the CLAW vagrant (ex to /home/ubuntu directory). An example hello world bundle is here . In Islandora CLAW vagrant, you can login to Karaf using ssh. The password is karaf. You can also use the client here: /opt/karaf/bin/client . Karaf client allows the use of linux commands such as grep in addition to Karaf commands. ssh -p 8101 karaf@localhost Install the bundle: karaf@root()> bundle karaf@root(bundle)> install file:///home/ubuntu/helloworld-1.0.0.jar Bundle ID: 242 The installation will return a bundle id. You can issue the list command to verify that bundle is on the list. Initially it will have Installed status. As per OSGi specification, before a bundle can be started, it has to be Resolved. To resolve, issue the following command. karaf@root(bundle)> resolve 242 You can start and stop the bundle as below. karaf@root(bundle)> start 242 Hello World! karaf@root(bundle)> stop 242 Goodbye World! karaf@root(bundle)> Karaf - Features - Hello World Karaf Features allows for bundles to be grouped, managed and deployed together. Features can be nested as well. Feature files of frameworks such as Apache Camel or Apache ActiveMQ can be used to deploy those services. A simple Features file is as below. <features> <feature name='greeter_server' version='1.0'> <bundle>file:///home/ubuntu/helloworld-1.0.0.jar</bundle> <bundle>file:///home/ubuntu/helloworld2-1.0.0.jar</bundle> </feature> </features> You can add the features to Karaf as below: karaf@root()> feature:repo-add file:///home/ubuntu/features.xml You can install the feature's bundles as below. karaf@root(feature)> install greeter_server Hello World 2 ! Hello World! Uninstalling the feature. karaf@root(feature)> uninstall greeter_server Goodbye World 2 ! Goodbye World! Gradle Gradle is used by Alpaca as a build and package management tool. It is similar to Maven . Apache Camel Apache Camel is an integration framework that aids in implementing integration patterns. Alpaca - Apache Camel HelloWorld Maven has camel-archetype-blueprint which can be used to create apache-camel OSGi bundle project structure. Creating a project/bundle under Alpaca mvn archetype:generate -DarchetypeGroupId=org.apache.camel.archetypes -DarchetypeArtifactId=camel-archetype-blueprint -DarchetypeVersion=2.9.0 -DarchetypeRepository=https://repository.apache.org/content/groups/snapshots-g However, it is easier to copy the structure of an existing project such as islandora-connector-broadcast . cp -R islandora-connector-broadcast/ islandora-connector-helloworld Open the project in your IDE. In Eclipse, you can go to File | Open Projects from File System and navigate the new folder. We need to rename the configuration, java and build files to reflect the helloworld project. src/main/cfg/ca.islandora.alpaca.connector.helloworld.cfg src/main/java/ca/islandora/alpaca/connector/helloworld src/main/java/ca/islandora/alpaca/connector/helloworld/HelloworldRouter.java Also change the content of the above file to log Hello World package ca.islandora.alpaca.connector.helloworld; import static org.apache.camel.LoggingLevel.INFO; import org.apache.camel.builder.RouteBuilder; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class HelloworldRouter extends RouteBuilder { private static final Logger LOGGER = LoggerFactory.getLogger(HelloworldRouter.class); /** * Configure the message route workflow. */ public void configure() throws Exception { // Hello World. from(\"timer:foo?period=5000\").log(INFO, LOGGER, \"Hello World\"); } } src/main/resource/OSGI-INF/blueprint/blueprint.xml - Change the content of this file to reflect Helloworld package. src/build.gradle apply plugin: 'osgi' description = 'Islandora CLAW HelloWorld' dependencies { compile group: 'org.apache.camel', name: 'camel-core', version: camelVersion compile group: 'org.apache.camel', name: 'camel-blueprint', version: camelVersion compile group: 'org.apache.activemq', name: 'activemq-camel', version: activemqVersion compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion testCompile group: 'org.apache.camel', name: 'camel-test-blueprint', version: camelVersion } jar { manifest { description project.description docURL project.docURL vendor project.vendor license project.license instruction 'Import-Package', 'org.apache.activemq.camel.component,' + \"org.apache.camel;version=\\\"${camelVersionRange}\\\",\" + defaultOsgiImports instruction 'Export-Package', 'ca.islandora.alpaca.connector.helloworld' } } artifacts { archives (file('build/cfg/main/ca.islandora.alpaca.connector.helloworld.cfg')) { classifier 'configuration' type 'cfg' } } Building the bundle To build this project, we have to update the Alpaca build settings. Include and add the project in Alpaca/settings.gradle . include ':islandora-connector-helloworld' project(':islandora-connector-helloworld').projectDir = \"$rootDir/islandora-connector-helloworld\" as File Normally, we would also have to update the karaf/src/main/resources/features.xml file to include this bundle. However, we will be deploying the bundle directly into Karaf's Hot deployment directory. Thus, not needed at this time. To build it from command line in Linux. ubuntu:~/workspace/Alpaca$ sudo gradle w build Deploying the bundle Upload the bundle to the Apache Karaf deploy directory: /opt/apache-karaf-4.0.5/deploy Login to Karaf. You can also use the Karaf client here: /opt/karaf/bin/client . ssh -p 8101 karaf@localhost Verify that bundle is deployed bundle:list See the log to confirm that the bundle is working. log:tail You should see a message like below: 2017-02-24 21:30:17,973 | INFO | 12 - timer://foo | HelloworldRouter | 186 - ca.islandora.alpaca.islandora-connector-helloworld - 0.2.1.SNAPSHOT | Hello World Apache ActiveMQ Apache ActiveMQ is a JMS compliant Messaging Queue. Messaging client can make use of JMS to send messages. Installing ActiveMQ Installing ActiveMQ is relatively easy. Download the latest stable release here . Go to the activemq_install_dir/bin . Start the ActiveMQ by using the activemq script or batch file and start command. $ cd activemq_install_dir/bin $ ./activemq start When ActiveMQ gets started, go to http://localhost:8161/admin/. You can login using admin:admin. Note that ActiveMQ in CLAW vagrant does not have a UI. References OSGI for Beginners Playing with Apache Karaf Console Karaf Quick Start ActiveMQ Introduction","title":"Alpaca Technical Stack"},{"location":"alpaca/alpaca-technical-stack/#alpaca-technical-stack","text":"Alpaca contains several OSGI modules or bundles. They are grouped together as features and deployed to Karaf container.","title":"Alpaca Technical Stack"},{"location":"alpaca/alpaca-technical-stack/#osgi","text":"OSGi is a specification to develop and deploy modular Java applications. It allows for dynamic deployment (hot deployment) and dependency management. The base unit of resources is called a bundle. Bundle is similar to a jar file, with additional information to be processed as an OSGi component. Several bundles can be grouped together into a Feature and installed together. OSGi bundles can be run on containers implementing the OSGi specification. Apache Karaf is one such container","title":"OSGi"},{"location":"alpaca/alpaca-technical-stack/#karaf","text":"Apache Karaf is a container that can be used to deploy an array of applications such servlets, Apache Camel components, jars etc.","title":"Karaf"},{"location":"alpaca/alpaca-technical-stack/#karaf-bundle-hello-world","text":"Download a bundle to the CLAW vagrant (ex to /home/ubuntu directory). An example hello world bundle is here . In Islandora CLAW vagrant, you can login to Karaf using ssh. The password is karaf. You can also use the client here: /opt/karaf/bin/client . Karaf client allows the use of linux commands such as grep in addition to Karaf commands. ssh -p 8101 karaf@localhost Install the bundle: karaf@root()> bundle karaf@root(bundle)> install file:///home/ubuntu/helloworld-1.0.0.jar Bundle ID: 242 The installation will return a bundle id. You can issue the list command to verify that bundle is on the list. Initially it will have Installed status. As per OSGi specification, before a bundle can be started, it has to be Resolved. To resolve, issue the following command. karaf@root(bundle)> resolve 242 You can start and stop the bundle as below. karaf@root(bundle)> start 242 Hello World! karaf@root(bundle)> stop 242 Goodbye World! karaf@root(bundle)>","title":"Karaf - Bundle - Hello World"},{"location":"alpaca/alpaca-technical-stack/#karaf-features-hello-world","text":"Karaf Features allows for bundles to be grouped, managed and deployed together. Features can be nested as well. Feature files of frameworks such as Apache Camel or Apache ActiveMQ can be used to deploy those services. A simple Features file is as below. <features> <feature name='greeter_server' version='1.0'> <bundle>file:///home/ubuntu/helloworld-1.0.0.jar</bundle> <bundle>file:///home/ubuntu/helloworld2-1.0.0.jar</bundle> </feature> </features> You can add the features to Karaf as below: karaf@root()> feature:repo-add file:///home/ubuntu/features.xml You can install the feature's bundles as below. karaf@root(feature)> install greeter_server Hello World 2 ! Hello World! Uninstalling the feature. karaf@root(feature)> uninstall greeter_server Goodbye World 2 ! Goodbye World!","title":"Karaf - Features - Hello World"},{"location":"alpaca/alpaca-technical-stack/#gradle","text":"Gradle is used by Alpaca as a build and package management tool. It is similar to Maven .","title":"Gradle"},{"location":"alpaca/alpaca-technical-stack/#apache-camel","text":"Apache Camel is an integration framework that aids in implementing integration patterns.","title":"Apache Camel"},{"location":"alpaca/alpaca-technical-stack/#alpaca-apache-camel-helloworld","text":"Maven has camel-archetype-blueprint which can be used to create apache-camel OSGi bundle project structure.","title":"Alpaca - Apache Camel HelloWorld"},{"location":"alpaca/alpaca-technical-stack/#creating-a-projectbundle-under-alpaca","text":"mvn archetype:generate -DarchetypeGroupId=org.apache.camel.archetypes -DarchetypeArtifactId=camel-archetype-blueprint -DarchetypeVersion=2.9.0 -DarchetypeRepository=https://repository.apache.org/content/groups/snapshots-g However, it is easier to copy the structure of an existing project such as islandora-connector-broadcast . cp -R islandora-connector-broadcast/ islandora-connector-helloworld Open the project in your IDE. In Eclipse, you can go to File | Open Projects from File System and navigate the new folder. We need to rename the configuration, java and build files to reflect the helloworld project. src/main/cfg/ca.islandora.alpaca.connector.helloworld.cfg src/main/java/ca/islandora/alpaca/connector/helloworld src/main/java/ca/islandora/alpaca/connector/helloworld/HelloworldRouter.java Also change the content of the above file to log Hello World package ca.islandora.alpaca.connector.helloworld; import static org.apache.camel.LoggingLevel.INFO; import org.apache.camel.builder.RouteBuilder; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class HelloworldRouter extends RouteBuilder { private static final Logger LOGGER = LoggerFactory.getLogger(HelloworldRouter.class); /** * Configure the message route workflow. */ public void configure() throws Exception { // Hello World. from(\"timer:foo?period=5000\").log(INFO, LOGGER, \"Hello World\"); } } src/main/resource/OSGI-INF/blueprint/blueprint.xml - Change the content of this file to reflect Helloworld package. src/build.gradle apply plugin: 'osgi' description = 'Islandora CLAW HelloWorld' dependencies { compile group: 'org.apache.camel', name: 'camel-core', version: camelVersion compile group: 'org.apache.camel', name: 'camel-blueprint', version: camelVersion compile group: 'org.apache.activemq', name: 'activemq-camel', version: activemqVersion compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion testCompile group: 'org.apache.camel', name: 'camel-test-blueprint', version: camelVersion } jar { manifest { description project.description docURL project.docURL vendor project.vendor license project.license instruction 'Import-Package', 'org.apache.activemq.camel.component,' + \"org.apache.camel;version=\\\"${camelVersionRange}\\\",\" + defaultOsgiImports instruction 'Export-Package', 'ca.islandora.alpaca.connector.helloworld' } } artifacts { archives (file('build/cfg/main/ca.islandora.alpaca.connector.helloworld.cfg')) { classifier 'configuration' type 'cfg' } }","title":"Creating a project/bundle under Alpaca"},{"location":"alpaca/alpaca-technical-stack/#building-the-bundle","text":"To build this project, we have to update the Alpaca build settings. Include and add the project in Alpaca/settings.gradle . include ':islandora-connector-helloworld' project(':islandora-connector-helloworld').projectDir = \"$rootDir/islandora-connector-helloworld\" as File Normally, we would also have to update the karaf/src/main/resources/features.xml file to include this bundle. However, we will be deploying the bundle directly into Karaf's Hot deployment directory. Thus, not needed at this time. To build it from command line in Linux. ubuntu:~/workspace/Alpaca$ sudo gradle w build","title":"Building the bundle"},{"location":"alpaca/alpaca-technical-stack/#deploying-the-bundle","text":"Upload the bundle to the Apache Karaf deploy directory: /opt/apache-karaf-4.0.5/deploy Login to Karaf. You can also use the Karaf client here: /opt/karaf/bin/client . ssh -p 8101 karaf@localhost Verify that bundle is deployed bundle:list See the log to confirm that the bundle is working. log:tail You should see a message like below: 2017-02-24 21:30:17,973 | INFO | 12 - timer://foo | HelloworldRouter | 186 - ca.islandora.alpaca.islandora-connector-helloworld - 0.2.1.SNAPSHOT | Hello World","title":"Deploying the bundle"},{"location":"alpaca/alpaca-technical-stack/#apache-activemq","text":"Apache ActiveMQ is a JMS compliant Messaging Queue. Messaging client can make use of JMS to send messages.","title":"Apache ActiveMQ"},{"location":"alpaca/alpaca-technical-stack/#installing-activemq","text":"Installing ActiveMQ is relatively easy. Download the latest stable release here . Go to the activemq_install_dir/bin . Start the ActiveMQ by using the activemq script or batch file and start command. $ cd activemq_install_dir/bin $ ./activemq start When ActiveMQ gets started, go to http://localhost:8161/admin/. You can login using admin:admin. Note that ActiveMQ in CLAW vagrant does not have a UI.","title":"Installing ActiveMQ"},{"location":"alpaca/alpaca-technical-stack/#references","text":"OSGI for Beginners Playing with Apache Karaf Console Karaf Quick Start ActiveMQ Introduction","title":"References"},{"location":"chullo/","text":"Chullo Chullo is a PHP client for Fedora built using Guzzle and EasyRdf . Requirements PHP 5.6+ Composer Installation git clone git@github.com:Islandora-CLAW/chullo.git cd chullo php composer.phar install You can also install with composer by pointing to your local clone. Just add these relevant bits to your composer.json : { \"repositories\": [ { \"type\": \"vcs\", \"url\": \"/path/to/chullo\" } ], \"require\": { \"islandora/chullo\": \"dev-master\" } } Then just php composer.phar install as usual. Usage use Islandora\\Chullo\\Chullo; // Instantiated with static factory $chullo = FedoraApi::create('http://localhost:8080/fcrepo/rest'); // Create a new resource $uri = $chullo->createResource(); // http://localhost:8080/fcrepo/rest/0b/0b/6c/68/0b0b6c68-30d8-410c-8a0e-154d0fd4ca20 // Parse resource as an EasyRdf Graph $graph = $chullo->getGraph($uri); // Set the resource's title $graph->set($uri, 'dc:title', 'My Sweet Title'); // Save the graph to Fedora $chullo->saveGraph($uri, $graph); Maintainers/Sponsors Current maintainers: Daniel Lamb Nick Ruest Development If you would like to contribute to this module, please check out CONTRIBUTING.md .","title":"Chullo"},{"location":"chullo/#chullo","text":"Chullo is a PHP client for Fedora built using Guzzle and EasyRdf .","title":"Chullo"},{"location":"chullo/#requirements","text":"PHP 5.6+ Composer","title":"Requirements"},{"location":"chullo/#installation","text":"git clone git@github.com:Islandora-CLAW/chullo.git cd chullo php composer.phar install You can also install with composer by pointing to your local clone. Just add these relevant bits to your composer.json : { \"repositories\": [ { \"type\": \"vcs\", \"url\": \"/path/to/chullo\" } ], \"require\": { \"islandora/chullo\": \"dev-master\" } } Then just php composer.phar install as usual.","title":"Installation"},{"location":"chullo/#usage","text":"use Islandora\\Chullo\\Chullo; // Instantiated with static factory $chullo = FedoraApi::create('http://localhost:8080/fcrepo/rest'); // Create a new resource $uri = $chullo->createResource(); // http://localhost:8080/fcrepo/rest/0b/0b/6c/68/0b0b6c68-30d8-410c-8a0e-154d0fd4ca20 // Parse resource as an EasyRdf Graph $graph = $chullo->getGraph($uri); // Set the resource's title $graph->set($uri, 'dc:title', 'My Sweet Title'); // Save the graph to Fedora $chullo->saveGraph($uri, $graph);","title":"Usage"},{"location":"chullo/#maintainerssponsors","text":"Current maintainers: Daniel Lamb Nick Ruest","title":"Maintainers/Sponsors"},{"location":"chullo/#development","text":"If you would like to contribute to this module, please check out CONTRIBUTING.md .","title":"Development"},{"location":"contributing/CONTRIBUTING/","text":"Welcome! If you are reading this document then you are interested in contributing to Islandora CLAW. All contributions are welcome: use-cases, documentation, code, patches, bug reports, feature requests, etc. You do not need to be a programmer to speak up! Workflows The group meets each Wednesday at 1:00 PM Eastern. Meeting notes and announcements are posted to the Islandora community list and the Islandora developers list . You can view meeting agendas, notes, and call-in information here . Anybody is welcome to join the calls, and add items to the agenda. Use cases If you would like to submit a use case to the Islandora CLAW project, please submit an issue here using the Use Case template , prepending \"Use Case:\" to the title of the issue. Documentation You can contribute documentation in two different ways. One way is to create an issue here , prepending \"Documentation:\" to the title of the issue. Another way is by pull request, which is the same process as Contribute Code . All documentation resides in docs . Request a new feature To request a new feature you should open an issue in the CLAW repository or create a use case (see the Use cases section above), and summarize the desired functionality. Prepend \"Enhancement:\" if creating an issue on the project repo, and \"Use Case:\" if creating a use case. Report a bug To report a bug you should open an issue in the CLAW repository that summarizes the bug. Prepend the label \"Bug:\" to the title of the issue. In order to help us understand and fix the bug it would be great if you could provide us with: The steps to reproduce the bug. This includes information about e.g. the Islandora version you were using along with the versions of stack components. The expected behavior. The actual, incorrect behavior. Feel free to search the issue queue for existing issues (aka tickets) that already describe the problem; if there is such a ticket please add your information as a comment. If you want to provide a pull along with your bug report: That is great! In this case please send us a pull request as described in the section Create a pull request below. Contribute code Before you set out to contribute code you will need to have completed a Contributor License Agreement or be covered by a Corporate Contributor Licencse Agreement . The signed copy of the license agreement should be sent to community@islandora.ca If you are interested in contributing code to Islandora but do not know where to begin: In this case you should browse open issues and check out use cases . If you are contributing Drupal code, it must adhere to Drupal Coding Standards ; Travis CI will check for this on pull requests. Contributions to the Islandora codebase should be sent as GitHub pull requests. See section Create a pull request below for details. If there is any problem with the pull request we can work through it using the commenting features of GitHub. For small patches , feel free to submit pull requests directly for those patches. For larger code contributions , please use the following process. The idea behind this process is to prevent any wasted work and catch design issues early on. Open an issue , prepending \"Enhancement:\" in the title if a similar issue does not exist already. If a similar issue does exist, then you may consider participating in the work on the existing issue. Comment on the issue with your plan for implementing the issue. Explain what pieces of the codebase you are going to touch and how everything is going to fit together. Islandora committers will work with you on the design to make sure you are on the right track. Implement your issue, create a pull request (see below), and iterate from there. Create a pull request Take a look at Creating a pull request . In a nutshell you need to: Fork this repository to your personal or institutional GitHub account (depending on the CLA you are working under). Be cautious of which branches you work from though (you'll want to base your work off master, or for Drupal modules use the most recent version branch). See Fork a repo for detailed instructions. Commit any changes to your fork. Send a pull request using the pull request template to the Islandora GitHub repository that you forked in step 1. If your pull request is related to an existing issue -- for instance, because you reported a bug/issue earlier -- prefix the title of your pull request with the corresponding issue number (e.g. issue-123: ... ). Please also include a reference to the issue in the description of the pull. This can be done by using '#' plus the issue number like so '#123', also try to pick an appropriate name for the branch in which you're issuing the pull request from. You may want to read Syncing a fork for instructions on how to keep your fork up to date with the latest changes of the upstream (official) repository. License Agreements The Islandora Foundation requires that contributors complete a Contributor License Agreement or be covered by a Corporate Contributor License Agreement . The signed copy of the license agreement should be sent to community@islandora.ca . This license is for your protection as a contributor as well as the protection of the Foundation and its users; it does not change your rights to use your own contributions for any other purpose.","title":"How to contribute"},{"location":"contributing/CONTRIBUTING/#welcome","text":"If you are reading this document then you are interested in contributing to Islandora CLAW. All contributions are welcome: use-cases, documentation, code, patches, bug reports, feature requests, etc. You do not need to be a programmer to speak up!","title":"Welcome!"},{"location":"contributing/CONTRIBUTING/#workflows","text":"The group meets each Wednesday at 1:00 PM Eastern. Meeting notes and announcements are posted to the Islandora community list and the Islandora developers list . You can view meeting agendas, notes, and call-in information here . Anybody is welcome to join the calls, and add items to the agenda.","title":"Workflows"},{"location":"contributing/CONTRIBUTING/#use-cases","text":"If you would like to submit a use case to the Islandora CLAW project, please submit an issue here using the Use Case template , prepending \"Use Case:\" to the title of the issue.","title":"Use cases"},{"location":"contributing/CONTRIBUTING/#documentation","text":"You can contribute documentation in two different ways. One way is to create an issue here , prepending \"Documentation:\" to the title of the issue. Another way is by pull request, which is the same process as Contribute Code . All documentation resides in docs .","title":"Documentation"},{"location":"contributing/CONTRIBUTING/#request-a-new-feature","text":"To request a new feature you should open an issue in the CLAW repository or create a use case (see the Use cases section above), and summarize the desired functionality. Prepend \"Enhancement:\" if creating an issue on the project repo, and \"Use Case:\" if creating a use case.","title":"Request a new feature"},{"location":"contributing/CONTRIBUTING/#report-a-bug","text":"To report a bug you should open an issue in the CLAW repository that summarizes the bug. Prepend the label \"Bug:\" to the title of the issue. In order to help us understand and fix the bug it would be great if you could provide us with: The steps to reproduce the bug. This includes information about e.g. the Islandora version you were using along with the versions of stack components. The expected behavior. The actual, incorrect behavior. Feel free to search the issue queue for existing issues (aka tickets) that already describe the problem; if there is such a ticket please add your information as a comment. If you want to provide a pull along with your bug report: That is great! In this case please send us a pull request as described in the section Create a pull request below.","title":"Report a bug"},{"location":"contributing/CONTRIBUTING/#contribute-code","text":"Before you set out to contribute code you will need to have completed a Contributor License Agreement or be covered by a Corporate Contributor Licencse Agreement . The signed copy of the license agreement should be sent to community@islandora.ca If you are interested in contributing code to Islandora but do not know where to begin: In this case you should browse open issues and check out use cases . If you are contributing Drupal code, it must adhere to Drupal Coding Standards ; Travis CI will check for this on pull requests. Contributions to the Islandora codebase should be sent as GitHub pull requests. See section Create a pull request below for details. If there is any problem with the pull request we can work through it using the commenting features of GitHub. For small patches , feel free to submit pull requests directly for those patches. For larger code contributions , please use the following process. The idea behind this process is to prevent any wasted work and catch design issues early on. Open an issue , prepending \"Enhancement:\" in the title if a similar issue does not exist already. If a similar issue does exist, then you may consider participating in the work on the existing issue. Comment on the issue with your plan for implementing the issue. Explain what pieces of the codebase you are going to touch and how everything is going to fit together. Islandora committers will work with you on the design to make sure you are on the right track. Implement your issue, create a pull request (see below), and iterate from there.","title":"Contribute code"},{"location":"contributing/CONTRIBUTING/#create-a-pull-request","text":"Take a look at Creating a pull request . In a nutshell you need to: Fork this repository to your personal or institutional GitHub account (depending on the CLA you are working under). Be cautious of which branches you work from though (you'll want to base your work off master, or for Drupal modules use the most recent version branch). See Fork a repo for detailed instructions. Commit any changes to your fork. Send a pull request using the pull request template to the Islandora GitHub repository that you forked in step 1. If your pull request is related to an existing issue -- for instance, because you reported a bug/issue earlier -- prefix the title of your pull request with the corresponding issue number (e.g. issue-123: ... ). Please also include a reference to the issue in the description of the pull. This can be done by using '#' plus the issue number like so '#123', also try to pick an appropriate name for the branch in which you're issuing the pull request from. You may want to read Syncing a fork for instructions on how to keep your fork up to date with the latest changes of the upstream (official) repository.","title":"Create a pull request"},{"location":"contributing/CONTRIBUTING/#license-agreements","text":"The Islandora Foundation requires that contributors complete a Contributor License Agreement or be covered by a Corporate Contributor License Agreement . The signed copy of the license agreement should be sent to community@islandora.ca . This license is for your protection as a contributor as well as the protection of the Foundation and its users; it does not change your rights to use your own contributions for any other purpose.","title":"License Agreements"},{"location":"contributing/committers/","text":"Islandora CLAW Committers Islandora CLAW is open source and released under MIT and GPLv2 licenses. The software and associated documentation is developed collectively by a community of contributors and committers. All interested community members are encouraged to contribute to the project. Contributors who demonstrate sustained engagement with the project through quality participation in meetings, mailing lists, documentation and code updates can be nominated by existing committers to also become a committers. It should be emphasized that committers need not be limited to software developers. Community members with skills in documentation and testing, for example, can also be committers. Rights Committers share the following rights: Write access to the codebase Nomination privileges of new committers Release management privileges Binding votes on procedural, code modification, and release issues Access to the private committers mailing list Responsibilities Committers share the following responsibilities: Monitor and respond to project mailing lists Attend project and technical meetings Monitor and vet bug-tracker issues Review and commit code contributions Ensure code contributions are properly licensed Guide and mentor new committers Committers The following is an alphabetized list of the current Islandora CLAW committers: Name Organization irc nick Aaron Coburn Amherst College acoburn Jonathan Green LYRASIS jonathangee Mark Jordan Simon Fraser University mjordan Danny Lamb Islandora Foundation dhlamb Natkeeran Ledchumykanthan University of Toronto Scarborough Natkeeran Rosie Le Faive University of Prince Edward Island rlefaive Diego Pino METRO diegopino Seth Shaw University of Nevada, Las Vegas seth-shaw Jared Whiklo University of Manitoba whikloj Emeritus Committers The following is an alphabetized list of the prior Islandora CLAW committers: Name Organization irc nick Nick Ruest York University ruebot Guidelines for assessing new candidates for committership When a contributor is nominated to become a committer, the following guidelines should be used by existing committers to evaluate the nominee's suitability. Ability to work cooperatively with peers How do we evaluate? By the interactions they have through mail. By how they respond to criticism. By how they participate in decision-making process. Ability to be a mentor How do we evaluate? By the interactions they have through mail. By how clear they are and how willing they are to point at appropriate background materials (or even create them). Community How do we evaluate? By the interactions they have through mail. Do they help to answer questions raised on the mailing list; do they show a helpful attitude and respect for other's ideas. Commitment How do we evaluate? By time, by sticking through tough issues, by helping on not-so-fun tasks as well. Personal skill/ability How do we evaluate? A solid general understanding of the project. Quality of discussion in mail. Patches (where applicable) easy to apply with only a cursory review. New Committer Process This section describes the process for handling the voting of a new committer. Summary: Call a vote ( templates/committerVote.txt ) Close a vote ( templates/closeCommitterVote.txt ) Invite the new committer ( templates/committerInvite.txt ), if no CLA is on file ( templates/committerInviteCLA.txt ) If they accept, then do: Add to Committer team of GitHub Islandora organization Add to Committer team of GitHub Islandora-Labs organization Add to islandora-committers google-group Add to committers wiki page: Islandora Committers Announce the new committer ( template/committerAnnounce.txt )","title":"Committers"},{"location":"contributing/committers/#islandora-claw-committers","text":"Islandora CLAW is open source and released under MIT and GPLv2 licenses. The software and associated documentation is developed collectively by a community of contributors and committers. All interested community members are encouraged to contribute to the project. Contributors who demonstrate sustained engagement with the project through quality participation in meetings, mailing lists, documentation and code updates can be nominated by existing committers to also become a committers. It should be emphasized that committers need not be limited to software developers. Community members with skills in documentation and testing, for example, can also be committers.","title":"Islandora CLAW Committers"},{"location":"contributing/committers/#rights","text":"Committers share the following rights: Write access to the codebase Nomination privileges of new committers Release management privileges Binding votes on procedural, code modification, and release issues Access to the private committers mailing list","title":"Rights"},{"location":"contributing/committers/#responsibilities","text":"Committers share the following responsibilities: Monitor and respond to project mailing lists Attend project and technical meetings Monitor and vet bug-tracker issues Review and commit code contributions Ensure code contributions are properly licensed Guide and mentor new committers","title":"Responsibilities"},{"location":"contributing/committers/#committers","text":"The following is an alphabetized list of the current Islandora CLAW committers: Name Organization irc nick Aaron Coburn Amherst College acoburn Jonathan Green LYRASIS jonathangee Mark Jordan Simon Fraser University mjordan Danny Lamb Islandora Foundation dhlamb Natkeeran Ledchumykanthan University of Toronto Scarborough Natkeeran Rosie Le Faive University of Prince Edward Island rlefaive Diego Pino METRO diegopino Seth Shaw University of Nevada, Las Vegas seth-shaw Jared Whiklo University of Manitoba whikloj","title":"Committers"},{"location":"contributing/committers/#emeritus-committers","text":"The following is an alphabetized list of the prior Islandora CLAW committers: Name Organization irc nick Nick Ruest York University ruebot","title":"Emeritus Committers"},{"location":"contributing/committers/#guidelines-for-assessing-new-candidates-for-committership","text":"When a contributor is nominated to become a committer, the following guidelines should be used by existing committers to evaluate the nominee's suitability.","title":"Guidelines for assessing new candidates for committership"},{"location":"contributing/committers/#ability-to-work-cooperatively-with-peers","text":"How do we evaluate? By the interactions they have through mail. By how they respond to criticism. By how they participate in decision-making process.","title":"Ability to work cooperatively with peers"},{"location":"contributing/committers/#ability-to-be-a-mentor","text":"How do we evaluate? By the interactions they have through mail. By how clear they are and how willing they are to point at appropriate background materials (or even create them).","title":"Ability to be a mentor"},{"location":"contributing/committers/#community","text":"How do we evaluate? By the interactions they have through mail. Do they help to answer questions raised on the mailing list; do they show a helpful attitude and respect for other's ideas.","title":"Community"},{"location":"contributing/committers/#commitment","text":"How do we evaluate? By time, by sticking through tough issues, by helping on not-so-fun tasks as well.","title":"Commitment"},{"location":"contributing/committers/#personal-skillability","text":"How do we evaluate? A solid general understanding of the project. Quality of discussion in mail. Patches (where applicable) easy to apply with only a cursory review.","title":"Personal skill/ability"},{"location":"contributing/committers/#new-committer-process","text":"This section describes the process for handling the voting of a new committer. Summary: Call a vote ( templates/committerVote.txt ) Close a vote ( templates/closeCommitterVote.txt ) Invite the new committer ( templates/committerInvite.txt ), if no CLA is on file ( templates/committerInviteCLA.txt ) If they accept, then do: Add to Committer team of GitHub Islandora organization Add to Committer team of GitHub Islandora-Labs organization Add to islandora-committers google-group Add to committers wiki page: Islandora Committers Announce the new committer ( template/committerAnnounce.txt )","title":"New Committer Process"},{"location":"contributing/hacking-on-islandora/","text":"Hacking on Islandora CLAW One of the goals of the Islandora CLAW project is to lower the barrier to entry for working on and with Islandora. A shared, consistent environment amongst developers is one of the best ways to do this. To get started hacking on Islandora CLAW with your very own development environment, all you need to do follow these steps: Install VirtualBox Install Vagrant Fork Islandora CLAW and clone it onto your machine using the master branch ~ $ git clone -b master https://github.com/your_github_name/islandora.git OR If you're already a developer and have previously forked and cloned Islandora CLAW, just add the master branch from Islandora-CLAW to your existing checkout: ~ $ cd /path/to/islandora /path/to/CLAW $ git remote add claw https://github.com/Islandora-CLAW/CLAW.git /path/to/CLAW $ git fetch claw /path/to/CLAW $ git checkout master Navigate into the install directory of your master checkout ~ $ cd /path/to/CLAW/install Build your vm using vagrant up /path/to/CLAW/install $ vagrant up Sit back and relax as your development environment is created for you! In a few minutes you\u2019ll have a brand new Islandora CLAW install that you can use and abuse as much as you\u2019d like. If you ever ruin your environment (trust me, it\u2019ll happen), you can always destroy it and bring up a new one at any time. ~ $ cd /path/to/CLAW/install /path/to/CLAW/install $ vagrant destroy /path/to/CLAW/install $ vagrant up Logging in to your development environment You can ssh into your development environment at any time by doing the following: ~ $ cd /path/to/islandora/install /path/to/islandora/install $ vagrant ssh Welcome to Ubuntu 14.04.2 LTS (GNU/Linux 3.13.0-45-generic x86_64) * Documentation: https://help.ubuntu.com/ System information disabled due to load higher than 1.0 Get cloud support with Ubuntu Advantage Cloud Guest: http://www.ubuntu.com/business/services/cloud Last login: Fri Jul 17 13:51:38 2015 from 10.0.2.2 vagrant@islandora:~$ You'll be logged in as the vagrant user, with your github repo in your home directory. Port Forwarding Many ports are forwarded from your virtual machine to your personal computer, so care must be taken that there are no conflicts. Here's a list of all the ports that get forwarded: - Apache: 80 -> 8000 - Tomcat: 8080 -> 8080 - Karaf: 8181 -> 8181 - MySQL: 3306 -> 3306 At any point in time, you can edit how the ports are forwarded by clicking on the Port Forwarding button in your virtual machine's Network settings in Virtualbox. You can also edit the section of the Vagrantfile that controls the default port forwarding, which looks something like this: config.vm.network :forwarded_port, guest: 8080, host: 8080 # Tomcat config.vm.network :forwarded_port, guest: 8181, host: 8181 # Karaf config.vm.network :forwarded_port, guest: 3306, host: 3306 # MySQL config.vm.network :forwarded_port, guest: 5432, host: 5432 # PostgreSQL config.vm.network :forwarded_port, guest: 80, host: 8000 # Apache Important locations Drupal: /var/www/html/drupal Apache Logs: /var/log/apache2/error.log Tomcat: /var/lib/tomcat7 Logs: /var/log/tomcat7 Fedora 4: /var/lib/tomcat7/webapps/fcrepo Solr: /var/lib/tomcat7/webapps/solr BlazeGraph: /var/lib/tomcat7/webapps/bigdata FcrepoCamelToolbox: /var/lib/tomcat7/webapps/fcrepo-camel-toolbox Karaf: /opt/karaf Logs: /opt/karaf/data/log Configuration: /opt/karaf/etc CLAW: /home/vagrant/CLAW Shared folders By default, the vagrant environment uses a shared folder between your computer and the virtual machine it has created. This folder points to your Islandora CLAW github repo on your computer and is available at ~/CLAW ( /home/vagrant/CLAW ) on the virtual machine. On top of that, in Drupal, sites/all/modules/islandora is a symlink pointing to ~/CLAW/islandora . This has a few profound consequences: You can use the IDE you're comfortable with on your own machine, without the need to scp/rsync code over to the development environment Changes to Drupal module code are automatically reflected on your Drupal site since that code is symlinked (although you may need to be ssh'd in to drush cc all on occassion) When testing the Vagrant install after adding changes, the code from your fork and your branch on your computer is used to generate the virtual machine Compiling Camel Bundles Despite being nothing but Blueprint xml files, Camel projects still have to be compiled using Maven. The install directive is the default, so all one has to do is navigate to the appropriate directory and issue a mvn in the command line. For example, to compile the collection service: ~ $ cd /path/to/CLAW/Alpaca/services/collection-service /path/to/CLAW/Alpaca/serices/collection-service $ mvn The only caveat here is that this is best done on the virtual machine itself. While your virtual machine was being built, it's Karaf installation was set to monitor the vagrant user's Maven repository for changes, and autodeploy in response to mvn install . So while you can always run Maven from your own machine, it will get installed in your personal Maven repository on your machine. So to take advantage of the auto-redeploy capabilities of Karaf, you need to do this as the vagrant user. If for any reason, you have to shutdown or restart Karaf, it will cease to monitor the vagrant user's Maven repository. In order to turn this back on, you'll have to issue the appropriate commands to get monitoring working again. The easiest way to do this is to re-run the karaf script the install process uses to set up monitoring by executing /opt/karaf/bin/client < ~/islandora/install/karaf/monitor.script .","title":"Hacking on Islandora"},{"location":"contributing/hacking-on-islandora/#hacking-on-islandora-claw","text":"One of the goals of the Islandora CLAW project is to lower the barrier to entry for working on and with Islandora. A shared, consistent environment amongst developers is one of the best ways to do this. To get started hacking on Islandora CLAW with your very own development environment, all you need to do follow these steps: Install VirtualBox Install Vagrant Fork Islandora CLAW and clone it onto your machine using the master branch ~ $ git clone -b master https://github.com/your_github_name/islandora.git OR If you're already a developer and have previously forked and cloned Islandora CLAW, just add the master branch from Islandora-CLAW to your existing checkout: ~ $ cd /path/to/islandora /path/to/CLAW $ git remote add claw https://github.com/Islandora-CLAW/CLAW.git /path/to/CLAW $ git fetch claw /path/to/CLAW $ git checkout master Navigate into the install directory of your master checkout ~ $ cd /path/to/CLAW/install Build your vm using vagrant up /path/to/CLAW/install $ vagrant up Sit back and relax as your development environment is created for you! In a few minutes you\u2019ll have a brand new Islandora CLAW install that you can use and abuse as much as you\u2019d like. If you ever ruin your environment (trust me, it\u2019ll happen), you can always destroy it and bring up a new one at any time. ~ $ cd /path/to/CLAW/install /path/to/CLAW/install $ vagrant destroy /path/to/CLAW/install $ vagrant up","title":"Hacking on Islandora CLAW"},{"location":"contributing/hacking-on-islandora/#logging-in-to-your-development-environment","text":"You can ssh into your development environment at any time by doing the following: ~ $ cd /path/to/islandora/install /path/to/islandora/install $ vagrant ssh Welcome to Ubuntu 14.04.2 LTS (GNU/Linux 3.13.0-45-generic x86_64) * Documentation: https://help.ubuntu.com/ System information disabled due to load higher than 1.0 Get cloud support with Ubuntu Advantage Cloud Guest: http://www.ubuntu.com/business/services/cloud Last login: Fri Jul 17 13:51:38 2015 from 10.0.2.2 vagrant@islandora:~$ You'll be logged in as the vagrant user, with your github repo in your home directory.","title":"Logging in to your development environment"},{"location":"contributing/hacking-on-islandora/#port-forwarding","text":"Many ports are forwarded from your virtual machine to your personal computer, so care must be taken that there are no conflicts. Here's a list of all the ports that get forwarded: - Apache: 80 -> 8000 - Tomcat: 8080 -> 8080 - Karaf: 8181 -> 8181 - MySQL: 3306 -> 3306 At any point in time, you can edit how the ports are forwarded by clicking on the Port Forwarding button in your virtual machine's Network settings in Virtualbox. You can also edit the section of the Vagrantfile that controls the default port forwarding, which looks something like this: config.vm.network :forwarded_port, guest: 8080, host: 8080 # Tomcat config.vm.network :forwarded_port, guest: 8181, host: 8181 # Karaf config.vm.network :forwarded_port, guest: 3306, host: 3306 # MySQL config.vm.network :forwarded_port, guest: 5432, host: 5432 # PostgreSQL config.vm.network :forwarded_port, guest: 80, host: 8000 # Apache","title":"Port Forwarding"},{"location":"contributing/hacking-on-islandora/#important-locations","text":"Drupal: /var/www/html/drupal Apache Logs: /var/log/apache2/error.log Tomcat: /var/lib/tomcat7 Logs: /var/log/tomcat7 Fedora 4: /var/lib/tomcat7/webapps/fcrepo Solr: /var/lib/tomcat7/webapps/solr BlazeGraph: /var/lib/tomcat7/webapps/bigdata FcrepoCamelToolbox: /var/lib/tomcat7/webapps/fcrepo-camel-toolbox Karaf: /opt/karaf Logs: /opt/karaf/data/log Configuration: /opt/karaf/etc CLAW: /home/vagrant/CLAW","title":"Important locations"},{"location":"contributing/hacking-on-islandora/#shared-folders","text":"By default, the vagrant environment uses a shared folder between your computer and the virtual machine it has created. This folder points to your Islandora CLAW github repo on your computer and is available at ~/CLAW ( /home/vagrant/CLAW ) on the virtual machine. On top of that, in Drupal, sites/all/modules/islandora is a symlink pointing to ~/CLAW/islandora . This has a few profound consequences: You can use the IDE you're comfortable with on your own machine, without the need to scp/rsync code over to the development environment Changes to Drupal module code are automatically reflected on your Drupal site since that code is symlinked (although you may need to be ssh'd in to drush cc all on occassion) When testing the Vagrant install after adding changes, the code from your fork and your branch on your computer is used to generate the virtual machine","title":"Shared folders"},{"location":"contributing/hacking-on-islandora/#compiling-camel-bundles","text":"Despite being nothing but Blueprint xml files, Camel projects still have to be compiled using Maven. The install directive is the default, so all one has to do is navigate to the appropriate directory and issue a mvn in the command line. For example, to compile the collection service: ~ $ cd /path/to/CLAW/Alpaca/services/collection-service /path/to/CLAW/Alpaca/serices/collection-service $ mvn The only caveat here is that this is best done on the virtual machine itself. While your virtual machine was being built, it's Karaf installation was set to monitor the vagrant user's Maven repository for changes, and autodeploy in response to mvn install . So while you can always run Maven from your own machine, it will get installed in your personal Maven repository on your machine. So to take advantage of the auto-redeploy capabilities of Karaf, you need to do this as the vagrant user. If for any reason, you have to shutdown or restart Karaf, it will cease to monitor the vagrant user's Maven repository. In order to turn this back on, you'll have to issue the appropriate commands to get monitoring working again. The easiest way to do this is to re-run the karaf script the install process uses to set up monitoring by executing /opt/karaf/bin/client < ~/islandora/install/karaf/monitor.script .","title":"Compiling Camel Bundles"},{"location":"crayfish/","text":"Crayfish A collection of Islandora CLAW microservices, lovingly known as Crayfish. Some of the microservices are built specifically for use with a Fedora Repository and API-X, while others are just for general use within CLAW. Requirements The minimum requirements for any microservice are PHP 5.6+ Composer Many microservices have extra installation requirements. Please see the README of each microservice for additional details. Services Crayfish contains the following services Hypercube : Tesseract as a microservice Gemini : A path mapping micro service to align resources in Drupal and Fedora. Houdini : Imagemagick as a microservice See the individual services for more information on their endpoints. Security Crayfish microservices use JWTs to handle authentication like the rest of the Islandora CLAW. It is disabled by default. To enable, set security enabled to true in cfg/cfg.php for any microservice. You can also set the path to an xml configuration file for security a la Syn with the security config parameter. Development If you would like to contribute, please get involved by attending our weekly Tech Call . We love to hear from you! If you would like to contribute code to the project, you need to be covered by an Islandora Foundation Contributor License Agreement or Corporate Contributor License Agreement . Please see the Contributors pages on Islandora.ca for more information. Sponsors UPEI discoverygarden inc. LYRASIS McMaster University University of Limerick York University University of Manitoba Simon Fraser University PALS American Philosophical Society common media inc. Maintainers Jared Whiklo Diego Pino Nick Ruest License MIT","title":"Crayfish"},{"location":"crayfish/#crayfish","text":"A collection of Islandora CLAW microservices, lovingly known as Crayfish. Some of the microservices are built specifically for use with a Fedora Repository and API-X, while others are just for general use within CLAW.","title":"Crayfish"},{"location":"crayfish/#requirements","text":"The minimum requirements for any microservice are PHP 5.6+ Composer Many microservices have extra installation requirements. Please see the README of each microservice for additional details.","title":"Requirements"},{"location":"crayfish/#services","text":"Crayfish contains the following services Hypercube : Tesseract as a microservice Gemini : A path mapping micro service to align resources in Drupal and Fedora. Houdini : Imagemagick as a microservice See the individual services for more information on their endpoints.","title":"Services"},{"location":"crayfish/#security","text":"Crayfish microservices use JWTs to handle authentication like the rest of the Islandora CLAW. It is disabled by default. To enable, set security enabled to true in cfg/cfg.php for any microservice. You can also set the path to an xml configuration file for security a la Syn with the security config parameter.","title":"Security"},{"location":"crayfish/#development","text":"If you would like to contribute, please get involved by attending our weekly Tech Call . We love to hear from you! If you would like to contribute code to the project, you need to be covered by an Islandora Foundation Contributor License Agreement or Corporate Contributor License Agreement . Please see the Contributors pages on Islandora.ca for more information.","title":"Development"},{"location":"crayfish/#sponsors","text":"UPEI discoverygarden inc. LYRASIS McMaster University University of Limerick York University University of Manitoba Simon Fraser University PALS American Philosophical Society common media inc.","title":"Sponsors"},{"location":"crayfish/#maintainers","text":"Jared Whiklo Diego Pino Nick Ruest","title":"Maintainers"},{"location":"crayfish/#license","text":"MIT","title":"License"},{"location":"crayfish-commons/","text":"Crayfish Commons Crayfish Commons is a library housing shared code for Crayfish microservices. Requirements PHP 5.6+ Composer Development If you would like to contribute, please get involved by attending our weekly Tech Call . We love to hear from you! If you would like to contribute code to the project, you need to be covered by an Islandora Foundation Contributor License Agreement or Corporate Contributor License Agreement . Please see the Contributors pages on Islandora.ca for more information. Sponsors UPEI discoverygarden inc. LYRASIS McMaster University University of Limerick York University University of Manitoba Simon Fraser University PALS American Philosophical Society common media inc. Maintainers Daniel Lamb License MIT","title":"Crayfish Commons"},{"location":"crayfish-commons/#crayfish-commons","text":"Crayfish Commons is a library housing shared code for Crayfish microservices.","title":"Crayfish Commons"},{"location":"crayfish-commons/#requirements","text":"PHP 5.6+ Composer","title":"Requirements"},{"location":"crayfish-commons/#development","text":"If you would like to contribute, please get involved by attending our weekly Tech Call . We love to hear from you! If you would like to contribute code to the project, you need to be covered by an Islandora Foundation Contributor License Agreement or Corporate Contributor License Agreement . Please see the Contributors pages on Islandora.ca for more information.","title":"Development"},{"location":"crayfish-commons/#sponsors","text":"UPEI discoverygarden inc. LYRASIS McMaster University University of Limerick York University University of Manitoba Simon Fraser University PALS American Philosophical Society common media inc.","title":"Sponsors"},{"location":"crayfish-commons/#maintainers","text":"Daniel Lamb","title":"Maintainers"},{"location":"crayfish-commons/#license","text":"MIT","title":"License"},{"location":"islandora/","text":"Islandora Introduction Islandora is a module that turns a Drupal 8 site into a control panel for your digital repository. Through a user interface, it allows repository administrators to - Persist digital content in a Fedora repository - Model digital content using core Drupal entities (nodes, media, files, and taxonomy terms). Currently, there is support for - collections - images - binary files (including PDfs) - audio - video - Design forms for editing metadata - Control the display and theming of digital content - Perform full text searching of content and metadata - Bulk ingest content (using Drupal's migrate framework) - Administer fine grained access control - Index RDF metadata in a triplestore - Generate derivative files, such as web quality represenations. - Currently, only image derivatives are supported (requires islandora_image), but more to come. - Apply bulk operations to lists of content (re-index content, regenerate derivatives, etc...) - And much, much more... Content in an Islandora repository is treated as ordinary Drupal content, so the entire Drupal ecosystem of contributed modules is at your disposal. In fact, Islandora uses many contributed modules itself, including the extremely powerful and flexible context module. The context module allows users to do many things through a UI that normally would require programming custom modules or themes. Want to show certain users a simplified form for data entry? Want to give each collection a different theme? Want to give anonymous users a restricted view? All of this can be done using the context module. It is similar to the rules module, and it allows repository administrators to filter repository events (view, create, update, delete, etc...) by the criteria of their choice and respond by executing configurable actions. Requirements / Installation Setting up a full digital repsository is a daunting task involving many moving parts on one or more servers. To make things easier to get started, you can fully bootstrap a complete repository solution using our Ansible installer, claw-playbook. It can install both to a local Vagrant environment for development purposes, or it can install to one or more remote servers by providing your own playbook. By default you'll get one server with everything on it (i.e. the kitchen sink install). But we have broken down each component into its own Ansible role, so more advanced users can create customized builds containing only what their needs require. See the README for more details. Configuration If you want to get up and running as quickly as possible, import the islanora_demo_feature feature to install example configuration and bootstrap your site. If you're starting from scratch, then at a minimum , you must: 1. Set the url to your message broker at admin/config/islandora 1. Enable the islandora_core_feature module, then visit admin/config/development/features and import its config. It contains everything required for basic content modeling. You can also use drush to import the feature drush -y fim --bundle=islandora islandora_core_feature . 1. Run the migration to load the taxonomy terms required by Islandora. This can be done by visiting admin/structure/migrate , or executed via drush drush -l http://localhost:8000 mim --group=islandora . Content Modeling Islandora uses core Drupal 8 functionality for modeling content. Most core content entities are utilized: Nodes Nodes hold descriptive and structural metadata about objects in your repository. Membership between nodes (e.g. members of a collection, or pages of a book) is denoted with field_member_of , which is provided by islandora_core_feature . Additional behavior can be controlled by tagging nodes with taxonomy terms using field_tags . Media Media hold technical metadata for the files they represent. There are four core media types, used for audio, video, images, and generic files. Media are associated with a node using field_media_of , which is provided by islandora_core_feature . The role of the media is indicated by tagging it with a taxonomy term using field_tags . For example, tagging a media as 'Preservation Master' indicates that it is the master archival copy of a file, while 'Service File' would indicate that it is a lower quality derivative intended to be shown to the average user. Files Files hold the binary conents that are described by Media. They often created along with a media to hold its technical metadata, but can be created and then later associted with a Media in a separate process. Taxonomy Terms Taxonomy terms are used to tag nodes and media so they can be classified, organized, and acted upon. They must contain a field_external_uri field that holds an external URI for the term from a controlled vocabulary / ontology. The islandora_core_feature provides a migration that can be executed to load all of the required terms for basic use into your repository. The islandora_demo_feature provides a complete example of content modeling in Islandora for audio, video, files, and images, including tiff and JP2 support (e.g. large images). This includes some more advanced techniques, like switching display modes based on taxonomy terms so 'images' and 'large images' can share a metadata profile but be displayed differently. It also includes example actions for generating image derivatives (using the islandora_image module). You may not, however, want all of this functionality. In fact, this feature is not meant to be the end-all-be-all of content modeling, but serves as an example of how it's done using Islandora. You can take as much or as little of it as you'd like. If you're doing you're own thing, the gist is: When making your own content type, it will require field_member_of , field_tags , and an rdf mapping. When making your own media type, it will require field_media_of , field_tags , field_mimetype , an rdf mapping, and a field to hold the file. You can re-use field_media_file , field_media_image , field_media_audio , and field_media_video to do so. Media should always be tagged ( field_tags ) with a term from the pcdmuse ontology (preservation master, service file, thumbnail image) to denote its usage. When making your own taxonomy vocabulary, its terms will require field_external_uri and an rdf mapping. All rdf mappings need to map the changed time to schema:dateModified . Actions Islandora provides several useful actions for repository administrators that can be configured and executed through the user interface. Any view can expose bulk operations by adding a Bulk update field to its display. Islandora also provides a thin wrapper around Actions so that they can be used in conjunction with the context module. Repository events for indexing, deletion, and derivative generation are all handled by selecting one or more preconfigured actions using the context user interface. Delete Media You can use the Delete media action to bulk delete media, but not delete source files. Delete Media and File(s) You can use the Delete media and file(s) action to bulk delete media and their source files. Emit Node/Media/File/Term Event You can use Emit a * event to a queue/topic actions to produce messages so background processes can consume them and perform work. The islandora_core_feature contains several preconfigured actions to perform indexing and removal operations for Fedora and a triplestore. REST API Islandora has a light, mostly RESTful HTTP API that relies heavily on Drupal's core Rest module. The majority of what Islandora provides is Link headers in GET and HEAD responses. These headers can be used to locate related resources and navigate your repository. In addition to these link headers, there are additional endpoints exposed for uploading files, as well as a couple of useful REST exports. Exposed Headers Referenced taxonomy terms (Nodes and Media) The taxonomy terms used to tag content are exposed as link headers with rel=\"tag\" and a title equal to the taxonomy term's display label. If the term has an external uri in a controlled vocabulary, then that uri is provided. Otherwise, the local Drupal uri is provided. For example, if a piece of content is tagged with taxonomy/term/1 , which has a display label of \"Example Term\", then the link header returned in a GET or HEAD response would look like Link: <http://example.org/taxonomy/term/1>; rel=\"tag\"; title=\"Example Term\" If instead the term were to have the field_external_uri field with a value of http://purl.org/dc/dcmitype/Collection then the link header would look like Link: <http://purl.org/dc/dcmitype/Collection>; rel=\"tag\"; title=\"Example Term\" . Referenced entities (Nodes and Media) Entity reference fields are exposed as link headers with rel=\"related\" and a title equal to the entity reference field's display label. For example, if http://example.org/node/1 has an entity reference field name \"Associated Content\" that references http://example.org/node/2 , then the link header returned in a GET or HEAD response would look like Link: <http://example.org/node/2>; rel=\"related\"; title=\"Associated Content\" . Associated media (Nodes only) Media entities that belong to nodes and are tagged with terms from the PCDM Use ontology are exposed as link headers with rel=\"related\" and a title equal to the display label of the taxonomy term. For example, if a Media is tagged as Preservation Master indicating that it is the archival copy, the link header returned in a GET or HEAD response for a node would look like Link: <http://example.org/media/1>; rel=\"related\"; title=\"Preservation Master\" . Source files (Media only) Files that are the source for Media entities are exposed as Link headers in the GET and HEAD responses with rel=\"describes\" . The endpoint to edit the contents of the source file is also exposed using rel=\"edit-media\" . For example, if http://example.org/media/1 has the source file http://example.org/file.txt , then a GET or HEAD response would contain both - Link: <http://example.org/file.txt>; rel=\"describes\" - Link: <http://example.org/media/1/source>; rel=\"edit-media\" Exposed Endpoints /media/{media}/source You can PUT content to the /media/{media}/source endpoint to update the source file for a media. The Content-Type header is required in addition to the PUT body. Requests with empty bodies or no Content-Type header will be rejected. Example usage: curl -u admin:islandora -v -X PUT -H 'Content-Type: image/png' --data-binary @my_image.png localhost:8000/media/1/source /node/{node}/media/{media_type}/{taxonomy_term} You can PUT content to the /node/{node}/media/{media_type}/{taxonomy_term} endpoint to create or update Media for Nodes. Media created in this way will automatically be assigned to the node in the route and tagged with the term in the route. The Content-Type header is expected, as well as a Content-Disposition header of the form attachment; filename=\"your_filename\" to indicate the name to give the file if it's new. Requests with empty bodies or that are without Content-Type and Content-Disposition headers will be rejected. For example, to create a new Image media for node 1, and tag it with taxonomy term 1: curl -v -u admin:islandora -H \"Content-Type: image/jpeg\" -H \"Content-Disposition: attachment; filename=\\\"test.jpeg\\\"\" --data-binary @test.jpeg http://localhost:8000/node/1/media/image/1 Or, to update an existing image media that is tagged with taxonomy term 2: curl -v -u admin:islandora -H \"Content-Type: image/jpeg\" -H \"Content-Disposition: attachment; filename=\\\"test2.jpeg\\\"\" --data-binary @test2.jpeg http://localhost:8000/node/1/media/image/2 /node/{node}/members You can issue GET requests to this endpoint to get a list of members of a node. It is actually a REST export, and requires the _format query param. It can (read should) also be paged like other REST export. For example, to get a paged list of members for a node, ten at a time: curl -v -u admin:islandora http://localhost:8000/node/1/members?_format=json&items_per_page=10&offset=0 /node/{node}/media You can issue GET requests to this endpoint to get a list of media of a node. It is actually a REST export, and requires the _format query param. Like the members endpoint, it can be paged, but is less likely to be neccessary as most nodes don't have that many media. For example, to get the full list of media for a node: curl -v -u admin:islandora http://localhost:8000/node/1/media?_format=json Maintainers Current maintainers: Diego Pino Jared Whiklo Danny Lamb Development If you would like to contribute, please get involved by attending our weekly Tech Call . We love to hear from you! If you would like to contribute code to the project, you need to be covered by an Islandora Foundation Contributor License Agreement or Corporate Contributor License Agreement . Please see the Contributors pages on Islandora.ca for more information. License GPLv2","title":"Islandora (Drupal Module)"},{"location":"islandora/#islandora","text":"","title":"Islandora"},{"location":"islandora/#introduction","text":"Islandora is a module that turns a Drupal 8 site into a control panel for your digital repository. Through a user interface, it allows repository administrators to - Persist digital content in a Fedora repository - Model digital content using core Drupal entities (nodes, media, files, and taxonomy terms). Currently, there is support for - collections - images - binary files (including PDfs) - audio - video - Design forms for editing metadata - Control the display and theming of digital content - Perform full text searching of content and metadata - Bulk ingest content (using Drupal's migrate framework) - Administer fine grained access control - Index RDF metadata in a triplestore - Generate derivative files, such as web quality represenations. - Currently, only image derivatives are supported (requires islandora_image), but more to come. - Apply bulk operations to lists of content (re-index content, regenerate derivatives, etc...) - And much, much more... Content in an Islandora repository is treated as ordinary Drupal content, so the entire Drupal ecosystem of contributed modules is at your disposal. In fact, Islandora uses many contributed modules itself, including the extremely powerful and flexible context module. The context module allows users to do many things through a UI that normally would require programming custom modules or themes. Want to show certain users a simplified form for data entry? Want to give each collection a different theme? Want to give anonymous users a restricted view? All of this can be done using the context module. It is similar to the rules module, and it allows repository administrators to filter repository events (view, create, update, delete, etc...) by the criteria of their choice and respond by executing configurable actions.","title":"Introduction"},{"location":"islandora/#requirements-installation","text":"Setting up a full digital repsository is a daunting task involving many moving parts on one or more servers. To make things easier to get started, you can fully bootstrap a complete repository solution using our Ansible installer, claw-playbook. It can install both to a local Vagrant environment for development purposes, or it can install to one or more remote servers by providing your own playbook. By default you'll get one server with everything on it (i.e. the kitchen sink install). But we have broken down each component into its own Ansible role, so more advanced users can create customized builds containing only what their needs require. See the README for more details.","title":"Requirements / Installation"},{"location":"islandora/#configuration","text":"If you want to get up and running as quickly as possible, import the islanora_demo_feature feature to install example configuration and bootstrap your site. If you're starting from scratch, then at a minimum , you must: 1. Set the url to your message broker at admin/config/islandora 1. Enable the islandora_core_feature module, then visit admin/config/development/features and import its config. It contains everything required for basic content modeling. You can also use drush to import the feature drush -y fim --bundle=islandora islandora_core_feature . 1. Run the migration to load the taxonomy terms required by Islandora. This can be done by visiting admin/structure/migrate , or executed via drush drush -l http://localhost:8000 mim --group=islandora .","title":"Configuration"},{"location":"islandora/#content-modeling","text":"Islandora uses core Drupal 8 functionality for modeling content. Most core content entities are utilized: Nodes Nodes hold descriptive and structural metadata about objects in your repository. Membership between nodes (e.g. members of a collection, or pages of a book) is denoted with field_member_of , which is provided by islandora_core_feature . Additional behavior can be controlled by tagging nodes with taxonomy terms using field_tags . Media Media hold technical metadata for the files they represent. There are four core media types, used for audio, video, images, and generic files. Media are associated with a node using field_media_of , which is provided by islandora_core_feature . The role of the media is indicated by tagging it with a taxonomy term using field_tags . For example, tagging a media as 'Preservation Master' indicates that it is the master archival copy of a file, while 'Service File' would indicate that it is a lower quality derivative intended to be shown to the average user. Files Files hold the binary conents that are described by Media. They often created along with a media to hold its technical metadata, but can be created and then later associted with a Media in a separate process. Taxonomy Terms Taxonomy terms are used to tag nodes and media so they can be classified, organized, and acted upon. They must contain a field_external_uri field that holds an external URI for the term from a controlled vocabulary / ontology. The islandora_core_feature provides a migration that can be executed to load all of the required terms for basic use into your repository. The islandora_demo_feature provides a complete example of content modeling in Islandora for audio, video, files, and images, including tiff and JP2 support (e.g. large images). This includes some more advanced techniques, like switching display modes based on taxonomy terms so 'images' and 'large images' can share a metadata profile but be displayed differently. It also includes example actions for generating image derivatives (using the islandora_image module). You may not, however, want all of this functionality. In fact, this feature is not meant to be the end-all-be-all of content modeling, but serves as an example of how it's done using Islandora. You can take as much or as little of it as you'd like. If you're doing you're own thing, the gist is: When making your own content type, it will require field_member_of , field_tags , and an rdf mapping. When making your own media type, it will require field_media_of , field_tags , field_mimetype , an rdf mapping, and a field to hold the file. You can re-use field_media_file , field_media_image , field_media_audio , and field_media_video to do so. Media should always be tagged ( field_tags ) with a term from the pcdmuse ontology (preservation master, service file, thumbnail image) to denote its usage. When making your own taxonomy vocabulary, its terms will require field_external_uri and an rdf mapping. All rdf mappings need to map the changed time to schema:dateModified .","title":"Content Modeling"},{"location":"islandora/#actions","text":"Islandora provides several useful actions for repository administrators that can be configured and executed through the user interface. Any view can expose bulk operations by adding a Bulk update field to its display. Islandora also provides a thin wrapper around Actions so that they can be used in conjunction with the context module. Repository events for indexing, deletion, and derivative generation are all handled by selecting one or more preconfigured actions using the context user interface.","title":"Actions"},{"location":"islandora/#delete-media","text":"You can use the Delete media action to bulk delete media, but not delete source files.","title":"Delete Media"},{"location":"islandora/#delete-media-and-files","text":"You can use the Delete media and file(s) action to bulk delete media and their source files.","title":"Delete Media and File(s)"},{"location":"islandora/#emit-nodemediafileterm-event","text":"You can use Emit a * event to a queue/topic actions to produce messages so background processes can consume them and perform work. The islandora_core_feature contains several preconfigured actions to perform indexing and removal operations for Fedora and a triplestore.","title":"Emit Node/Media/File/Term Event"},{"location":"islandora/#rest-api","text":"Islandora has a light, mostly RESTful HTTP API that relies heavily on Drupal's core Rest module. The majority of what Islandora provides is Link headers in GET and HEAD responses. These headers can be used to locate related resources and navigate your repository. In addition to these link headers, there are additional endpoints exposed for uploading files, as well as a couple of useful REST exports.","title":"REST API"},{"location":"islandora/#exposed-headers","text":"","title":"Exposed Headers"},{"location":"islandora/#referenced-taxonomy-terms-nodes-and-media","text":"The taxonomy terms used to tag content are exposed as link headers with rel=\"tag\" and a title equal to the taxonomy term's display label. If the term has an external uri in a controlled vocabulary, then that uri is provided. Otherwise, the local Drupal uri is provided. For example, if a piece of content is tagged with taxonomy/term/1 , which has a display label of \"Example Term\", then the link header returned in a GET or HEAD response would look like Link: <http://example.org/taxonomy/term/1>; rel=\"tag\"; title=\"Example Term\" If instead the term were to have the field_external_uri field with a value of http://purl.org/dc/dcmitype/Collection then the link header would look like Link: <http://purl.org/dc/dcmitype/Collection>; rel=\"tag\"; title=\"Example Term\" .","title":"Referenced taxonomy terms (Nodes and Media)"},{"location":"islandora/#referenced-entities-nodes-and-media","text":"Entity reference fields are exposed as link headers with rel=\"related\" and a title equal to the entity reference field's display label. For example, if http://example.org/node/1 has an entity reference field name \"Associated Content\" that references http://example.org/node/2 , then the link header returned in a GET or HEAD response would look like Link: <http://example.org/node/2>; rel=\"related\"; title=\"Associated Content\" .","title":"Referenced entities (Nodes and Media)"},{"location":"islandora/#associated-media-nodes-only","text":"Media entities that belong to nodes and are tagged with terms from the PCDM Use ontology are exposed as link headers with rel=\"related\" and a title equal to the display label of the taxonomy term. For example, if a Media is tagged as Preservation Master indicating that it is the archival copy, the link header returned in a GET or HEAD response for a node would look like Link: <http://example.org/media/1>; rel=\"related\"; title=\"Preservation Master\" .","title":"Associated media (Nodes only)"},{"location":"islandora/#source-files-media-only","text":"Files that are the source for Media entities are exposed as Link headers in the GET and HEAD responses with rel=\"describes\" . The endpoint to edit the contents of the source file is also exposed using rel=\"edit-media\" . For example, if http://example.org/media/1 has the source file http://example.org/file.txt , then a GET or HEAD response would contain both - Link: <http://example.org/file.txt>; rel=\"describes\" - Link: <http://example.org/media/1/source>; rel=\"edit-media\"","title":"Source files (Media only)"},{"location":"islandora/#exposed-endpoints","text":"","title":"Exposed Endpoints"},{"location":"islandora/#mediamediasource","text":"You can PUT content to the /media/{media}/source endpoint to update the source file for a media. The Content-Type header is required in addition to the PUT body. Requests with empty bodies or no Content-Type header will be rejected. Example usage: curl -u admin:islandora -v -X PUT -H 'Content-Type: image/png' --data-binary @my_image.png localhost:8000/media/1/source","title":"/media/{media}/source"},{"location":"islandora/#nodenodemediamedia_typetaxonomy_term","text":"You can PUT content to the /node/{node}/media/{media_type}/{taxonomy_term} endpoint to create or update Media for Nodes. Media created in this way will automatically be assigned to the node in the route and tagged with the term in the route. The Content-Type header is expected, as well as a Content-Disposition header of the form attachment; filename=\"your_filename\" to indicate the name to give the file if it's new. Requests with empty bodies or that are without Content-Type and Content-Disposition headers will be rejected. For example, to create a new Image media for node 1, and tag it with taxonomy term 1: curl -v -u admin:islandora -H \"Content-Type: image/jpeg\" -H \"Content-Disposition: attachment; filename=\\\"test.jpeg\\\"\" --data-binary @test.jpeg http://localhost:8000/node/1/media/image/1 Or, to update an existing image media that is tagged with taxonomy term 2: curl -v -u admin:islandora -H \"Content-Type: image/jpeg\" -H \"Content-Disposition: attachment; filename=\\\"test2.jpeg\\\"\" --data-binary @test2.jpeg http://localhost:8000/node/1/media/image/2","title":"/node/{node}/media/{media_type}/{taxonomy_term}"},{"location":"islandora/#nodenodemembers","text":"You can issue GET requests to this endpoint to get a list of members of a node. It is actually a REST export, and requires the _format query param. It can (read should) also be paged like other REST export. For example, to get a paged list of members for a node, ten at a time: curl -v -u admin:islandora http://localhost:8000/node/1/members?_format=json&items_per_page=10&offset=0","title":"/node/{node}/members"},{"location":"islandora/#nodenodemedia","text":"You can issue GET requests to this endpoint to get a list of media of a node. It is actually a REST export, and requires the _format query param. Like the members endpoint, it can be paged, but is less likely to be neccessary as most nodes don't have that many media. For example, to get the full list of media for a node: curl -v -u admin:islandora http://localhost:8000/node/1/media?_format=json","title":"/node/{node}/media"},{"location":"islandora/#maintainers","text":"Current maintainers: Diego Pino Jared Whiklo Danny Lamb","title":"Maintainers"},{"location":"islandora/#development","text":"If you would like to contribute, please get involved by attending our weekly Tech Call . We love to hear from you! If you would like to contribute code to the project, you need to be covered by an Islandora Foundation Contributor License Agreement or Corporate Contributor License Agreement . Please see the Contributors pages on Islandora.ca for more information.","title":"Development"},{"location":"islandora/#license","text":"GPLv2","title":"License"},{"location":"islandora/drupal-bundle-configurations/","text":"Drupal Bundle Configurations In Islandora CLAW, content models are primarily created using content types (also known as node bundles) and media bundles. Bundles are defined by YAML configuration files. To create new content models , one would create the needed content types and media bundles via UI, then export the yml files related for those bundles using Configuration Synchronization ( http://localhost:8000/admin/config/development/configuration ) or Features . An understanding about the structure of a bundle and various configuration files used to define it helps in creating and updating it. Content types and media bundles can be thought of as web forms consisting of fields. Drupal provides widgets to define the behavior of a field and field storage to define how the data is stored in the database. Drupal provides various display modes to show the forms to user when they are editing (Manage form display) or viewing (Manage display). A content model is packaged as a module for installation. All yml files are put in config/install folder of the module. Note that not all content models would contain media bundles. The following files define the bundles themselves. It contains some metadata about the bundle and lists its dependencies. node.type.your_content_type.yml media_entity.bundle.your_media_bundle.yml The following files define the fields attached to the bundle forms. There must be one config file for each field in your bundle, except for the default drupal fields. field.field.node.your_content_type.field_name1.yml field.field.node.your_content_type.field_name2.yml ... field.field.media.your_media_bundle.field_name1.yml field.field.media.your_media_bundle.field_name2.yml If the new bundle contains new fields, then field storage configurations for the newly created fields would be needed as well. Note that if you reused existing fields, storage definitions should not be defined again. Storage config contains information about the number of values allowed for that field (cardinality). field.storage.node.field_new_name3.yml field.storage.media.field__new_name3.yml There is a configuration file for each combination of bundle / display mode when managing form displays. Usually, form displays will have default and inline modes. core.entity_form_display.media.your_media_bundle.default.yml core.entity_form_display.media.your_media_bundle.inline.yml --- core.entity_form_display.node.your_content_type.default.yml core.entity_form_display.node.your_content_type.inline.yml There is a configuration file for each combination of bundle / display mode when managing displays. Usually, displays will have default and teaser modes for content types and default and content modes for media bundles. core.entity_view_display.media.your_media_bundle.default.yml core.entity_view_display.media.your_media_bundle.content.yml --- core.entity_view_display.node.your_content_type.default.yml core.entity_view_display.node.your_content_type.teaser.yml In addition, CLAW needs a RDF mapping to express the content in RDF and to sync to fedora. There will be one rdf mapping per bundle. rdf.mapping.media.your_media_bundle.yml rdf.mapping.node.your_content_type.yml","title":"Drupal bundle configurations"},{"location":"islandora/drupal-bundle-configurations/#drupal-bundle-configurations","text":"In Islandora CLAW, content models are primarily created using content types (also known as node bundles) and media bundles. Bundles are defined by YAML configuration files. To create new content models , one would create the needed content types and media bundles via UI, then export the yml files related for those bundles using Configuration Synchronization ( http://localhost:8000/admin/config/development/configuration ) or Features . An understanding about the structure of a bundle and various configuration files used to define it helps in creating and updating it. Content types and media bundles can be thought of as web forms consisting of fields. Drupal provides widgets to define the behavior of a field and field storage to define how the data is stored in the database. Drupal provides various display modes to show the forms to user when they are editing (Manage form display) or viewing (Manage display). A content model is packaged as a module for installation. All yml files are put in config/install folder of the module. Note that not all content models would contain media bundles. The following files define the bundles themselves. It contains some metadata about the bundle and lists its dependencies. node.type.your_content_type.yml media_entity.bundle.your_media_bundle.yml The following files define the fields attached to the bundle forms. There must be one config file for each field in your bundle, except for the default drupal fields. field.field.node.your_content_type.field_name1.yml field.field.node.your_content_type.field_name2.yml ... field.field.media.your_media_bundle.field_name1.yml field.field.media.your_media_bundle.field_name2.yml If the new bundle contains new fields, then field storage configurations for the newly created fields would be needed as well. Note that if you reused existing fields, storage definitions should not be defined again. Storage config contains information about the number of values allowed for that field (cardinality). field.storage.node.field_new_name3.yml field.storage.media.field__new_name3.yml There is a configuration file for each combination of bundle / display mode when managing form displays. Usually, form displays will have default and inline modes. core.entity_form_display.media.your_media_bundle.default.yml core.entity_form_display.media.your_media_bundle.inline.yml --- core.entity_form_display.node.your_content_type.default.yml core.entity_form_display.node.your_content_type.inline.yml There is a configuration file for each combination of bundle / display mode when managing displays. Usually, displays will have default and teaser modes for content types and default and content modes for media bundles. core.entity_view_display.media.your_media_bundle.default.yml core.entity_view_display.media.your_media_bundle.content.yml --- core.entity_view_display.node.your_content_type.default.yml core.entity_view_display.node.your_content_type.teaser.yml In addition, CLAW needs a RDF mapping to express the content in RDF and to sync to fedora. There will be one rdf mapping per bundle. rdf.mapping.media.your_media_bundle.yml rdf.mapping.node.your_content_type.yml","title":"Drupal Bundle Configurations"},{"location":"islandora/rdf-mapping/","text":"RDF Mapping RDF mapping is aligning drupal fields to RDF ontology properties. For example the title field of a content model can be mapped to dcterms:title and/or schema:title . In Islandora CLAW, triples expressed by these mappings get synced to Fedora and indexed in the Blazegraph triplestore. Drupal provides default RDF mappings for its core entities. For instance, the article content type's rdf mapping is specified in the rdf.mapping.node.page.yml config. One can export this RDF mapping by going to Configuration Synchronization: http://localhost:8000/admin/config/development/configuration/single/export , selecting RDF for Configuration type and chosing node.article . RDF mappings are defined/stored in Drupal as a YAML file. Currently, Drupal 8 does not have a UI to create/update RDF mappings to ontologies other than Schema.org. There is a project underway to develop a UI to support RDF mappings to any ontology. However, until then exporting/importing RDF yml files via Configuration Synchronization is the primary method to create/update RDF mappings. Structure of RDF YAML file Below is an example of RDF mapping. It is the current version of the rdf mapping of islandora collection content model ( rdf.mapping.node_type.collection.yml ). types specify the rdf:type of the resource or content model. fieldMappings specify all fields of that bundle and their RDF property mappings. One field can be mapped to more than one RDF property. It is a simple flat list. types and fieldMappings langcode: en status: true dependencies: config: - node.type.islandora_collection module: - islandora enforced: module: - islandora_collection id: node.islandora_collection targetEntityType: node bundle: islandora_collection types: - 'pcdm:Collection' - 'schema:CollectionPage' fieldMappings: field_description: properties: - 'dc:description' field_memberof: properties: - 'pcdm:memberOf' mapping_type: rel title: properties: - 'dc:title' created: properties: - 'schema:dateCreated' datatype_callback: callable: 'Drupal\\rdf\\CommonDataConverter::dateIso8601Value' changed: properties: - 'schema:dateModified' datatype_callback: callable: 'Drupal\\rdf\\CommonDataConverter::dateIso8601Value' uid: properties: - 'schema:author' mapping_type: rel Viewing RDF mapping of a resource Please see the following tutorial to configure and view resources via REST request: An Introduction to RESTful Web Services in Drupal 8 . To get the JsonLD mapping, use jsonld format. Example request url: http://localhost:8000/node/1?_format=jsonld Altering an existing RDF mapping Each Islandora CLAW content models come with a RDF mapping. It can be exported similar to above article's rdf mapping, modified and imported back by going to here: http://localhost:8000/admin/config/development/configuration/single/import . Defining a new RDF mapping A RDF mapping need to be created for a new or custom content model/type. The following steps describe the procedure: Export RDF mapping of a similar content type Export form display yml to get the list of the fields (ex core.entity_form_display.node.your_content_type.default.yml ) Remove any cache and uuid related elements Add/modify the fields and ontology properties as needed, following the same syntax Name it following the convention (ex rdf.mapping.node_type.your_content_type.yml ) Import it by going to http://localhost:8000/admin/config/development/configuration/single/import","title":"Rdf mapping"},{"location":"islandora/rdf-mapping/#rdf-mapping","text":"RDF mapping is aligning drupal fields to RDF ontology properties. For example the title field of a content model can be mapped to dcterms:title and/or schema:title . In Islandora CLAW, triples expressed by these mappings get synced to Fedora and indexed in the Blazegraph triplestore. Drupal provides default RDF mappings for its core entities. For instance, the article content type's rdf mapping is specified in the rdf.mapping.node.page.yml config. One can export this RDF mapping by going to Configuration Synchronization: http://localhost:8000/admin/config/development/configuration/single/export , selecting RDF for Configuration type and chosing node.article . RDF mappings are defined/stored in Drupal as a YAML file. Currently, Drupal 8 does not have a UI to create/update RDF mappings to ontologies other than Schema.org. There is a project underway to develop a UI to support RDF mappings to any ontology. However, until then exporting/importing RDF yml files via Configuration Synchronization is the primary method to create/update RDF mappings.","title":"RDF Mapping"},{"location":"islandora/rdf-mapping/#structure-of-rdf-yaml-file","text":"Below is an example of RDF mapping. It is the current version of the rdf mapping of islandora collection content model ( rdf.mapping.node_type.collection.yml ). types specify the rdf:type of the resource or content model. fieldMappings specify all fields of that bundle and their RDF property mappings. One field can be mapped to more than one RDF property. It is a simple flat list. types and fieldMappings langcode: en status: true dependencies: config: - node.type.islandora_collection module: - islandora enforced: module: - islandora_collection id: node.islandora_collection targetEntityType: node bundle: islandora_collection types: - 'pcdm:Collection' - 'schema:CollectionPage' fieldMappings: field_description: properties: - 'dc:description' field_memberof: properties: - 'pcdm:memberOf' mapping_type: rel title: properties: - 'dc:title' created: properties: - 'schema:dateCreated' datatype_callback: callable: 'Drupal\\rdf\\CommonDataConverter::dateIso8601Value' changed: properties: - 'schema:dateModified' datatype_callback: callable: 'Drupal\\rdf\\CommonDataConverter::dateIso8601Value' uid: properties: - 'schema:author' mapping_type: rel","title":"Structure of RDF YAML file"},{"location":"islandora/rdf-mapping/#viewing-rdf-mapping-of-a-resource","text":"Please see the following tutorial to configure and view resources via REST request: An Introduction to RESTful Web Services in Drupal 8 . To get the JsonLD mapping, use jsonld format. Example request url: http://localhost:8000/node/1?_format=jsonld","title":"Viewing RDF mapping of a resource"},{"location":"islandora/rdf-mapping/#altering-an-existing-rdf-mapping","text":"Each Islandora CLAW content models come with a RDF mapping. It can be exported similar to above article's rdf mapping, modified and imported back by going to here: http://localhost:8000/admin/config/development/configuration/single/import .","title":"Altering an existing RDF mapping"},{"location":"islandora/rdf-mapping/#defining-a-new-rdf-mapping","text":"A RDF mapping need to be created for a new or custom content model/type. The following steps describe the procedure: Export RDF mapping of a similar content type Export form display yml to get the list of the fields (ex core.entity_form_display.node.your_content_type.default.yml ) Remove any cache and uuid related elements Add/modify the fields and ontology properties as needed, following the same syntax Name it following the convention (ex rdf.mapping.node_type.your_content_type.yml ) Import it by going to http://localhost:8000/admin/config/development/configuration/single/import","title":"Defining a new RDF mapping"},{"location":"jsonld/","text":"JSONLD Introduction JSON-LD Serializer for Drupal 8 and Islandora CLAW. This module adds a simple Drupal entity to JSON-LD normalizer/serializer/unserializer service provider and a few supporting classes. It depends on RDF module and existing fields to rdf properties mappings to do it's job. Maintainers Current maintainers: Diego Pino Development If you would like to contribute, please get involved by attending our weekly Tech Call . We love to hear from you! If you would like to contribute code to the project, you need to be covered by an Islandora Foundation Contributor License Agreement or Corporate Contributor Licencse Agreement . Please see the Contributors pages on Islandora.ca for more information. License GPLv2","title":"Jsonld (Drupal Module)"},{"location":"jsonld/#jsonld","text":"","title":"JSONLD"},{"location":"jsonld/#introduction","text":"JSON-LD Serializer for Drupal 8 and Islandora CLAW. This module adds a simple Drupal entity to JSON-LD normalizer/serializer/unserializer service provider and a few supporting classes. It depends on RDF module and existing fields to rdf properties mappings to do it's job.","title":"Introduction"},{"location":"jsonld/#maintainers","text":"Current maintainers: Diego Pino","title":"Maintainers"},{"location":"jsonld/#development","text":"If you would like to contribute, please get involved by attending our weekly Tech Call . We love to hear from you! If you would like to contribute code to the project, you need to be covered by an Islandora Foundation Contributor License Agreement or Corporate Contributor Licencse Agreement . Please see the Contributors pages on Islandora.ca for more information.","title":"Development"},{"location":"jsonld/#license","text":"GPLv2","title":"License"},{"location":"migration/fedora-namespace-predicates/","text":"Fedora 3.x namespace RELS-EXT predicates $ grep -R \"FEDORA_RELS_EXT_URI\" Islandora-7.x Islandora isMemberOfCollection isMemberOf Image Annotation isAnnotationOf Compound isConstituentOf isPartOf","title":"Fedora namespace predicates"},{"location":"migration/fedora-namespace-predicates/#fedora-3x-namespace-rels-ext-predicates","text":"$ grep -R \"FEDORA_RELS_EXT_URI\" Islandora-7.x","title":"Fedora 3.x namespace RELS-EXT predicates"},{"location":"migration/fedora-namespace-predicates/#islandora","text":"isMemberOfCollection isMemberOf","title":"Islandora"},{"location":"migration/fedora-namespace-predicates/#image-annotation","text":"isAnnotationOf","title":"Image Annotation"},{"location":"migration/fedora-namespace-predicates/#compound","text":"isConstituentOf isPartOf","title":"Compound"},{"location":"migration/islandora-namespace-predicates/","text":"Islandora namespace RELS-EXT predicates $ grep -R \"ISLANDORA_RELS_EXT_URI\" Islandora-7.x Book isPageOf isSequenceNumber isPageNumber isSection Image Annotation targetedBy targets hasColor hasURN strokeWidth isEntity isAnnotationType OCR hasLanguage generate_ocr Book Batch book-batched email-admin-when-ingested Newspaper isPageOf isSequenceNumber dateIssued XACML isViewableByRole isManageableByRole isViewableByUser isManageableByUser Paged Content hasLanguage isPageOf isSequenceNumber isPageNumber isSection Compound isSequenceNumberOf$escaped_pid","title":"Islandora namespace predicates"},{"location":"migration/islandora-namespace-predicates/#islandora-namespace-rels-ext-predicates","text":"$ grep -R \"ISLANDORA_RELS_EXT_URI\" Islandora-7.x","title":"Islandora namespace RELS-EXT predicates"},{"location":"migration/islandora-namespace-predicates/#book","text":"isPageOf isSequenceNumber isPageNumber isSection","title":"Book"},{"location":"migration/islandora-namespace-predicates/#image-annotation","text":"targetedBy targets hasColor hasURN strokeWidth isEntity isAnnotationType","title":"Image Annotation"},{"location":"migration/islandora-namespace-predicates/#ocr","text":"hasLanguage generate_ocr","title":"OCR"},{"location":"migration/islandora-namespace-predicates/#book-batch","text":"book-batched email-admin-when-ingested","title":"Book Batch"},{"location":"migration/islandora-namespace-predicates/#newspaper","text":"isPageOf isSequenceNumber dateIssued","title":"Newspaper"},{"location":"migration/islandora-namespace-predicates/#xacml","text":"isViewableByRole isManageableByRole isViewableByUser isManageableByUser","title":"XACML"},{"location":"migration/islandora-namespace-predicates/#paged-content","text":"hasLanguage isPageOf isSequenceNumber isPageNumber isSection","title":"Paged Content"},{"location":"migration/islandora-namespace-predicates/#compound","text":"isSequenceNumberOf$escaped_pid","title":"Compound"},{"location":"migration/migration/","text":"fcrepo3 Object properties to fcrepo4 fcrepo 3 fcrepo4 Example PID fedora3model:PID\u2020 yul:328697 state fedoraaccess:objState Active label fedora3model:label\u2020 Elvis Presley createDate premis:hasDateCreatedByApplication 2015-03-16T20:11:06.683Z lastModifiedDate metadataModification 2015-03-16T20:11:06.683Z ownerId fedora3model:ownerId\u2020 nruest \u2020 The fedora3model namespace is not a published namespace. It is a representation of the fcrepo3 namespace info:fedora/fedora-system:def/model . \u2021 Not yet implemented fcrepo3 Datastream properties to fcrepo4 fcrepo3 fcrepo4 Example DSID dcterms:identifier OBJ Label dcterms:title\u2021 ASC19109.tif MIME Type ebucore:hasMimeType\u2020 image/tiff State fedoraaccess:objState Active Created premis:hasDateCreatedByApplication 2015-03-16T20:11:06.683Z Versionable fedora:hasVersions\u2021 true Format URI premis:formatDesignation\u2021 info:pronom/fmt/156 Alternate IDs dcterms:identifier\u2021 Access URL dcterms:identifier\u2021 Checksum cryptofunc: hashalgorithm \u2021 cryptofunc:sha1 \"c91342b705b15cb4f6ac5362cc6a47d9425aec86\" \u2020 The fedora3model namespace is not a published namespace. It is a representation of the fcrepo3 namespace info:fedora/fedora-system:def/model . \u2021 Not yet implemented fcrepo3 RELS-EXT to fcrepo4 Mapping fcrepo3 Example fcrepo4 Example fedora:isMemberOfCollection rdf:resource=\"info:fedora/yul:F0433\" fedora:hasParent fedora-model:hasModel rdf:resource=\"info:fedora/islandora:sp_large_image_cmodel\" rdf:type islandora:largeImage islandora:inheritXacmlFrom rdf:resource=\"info:fedora/yul:F0433\" islandora:hasLanguage fra dcterms:language fra islandora:isPageOf rdf:resource=\"info:fedora/yul:336566\" islandora:isSequenceNumber 213 islandora:isPageNumber 213 islandora:isSection 1 fedora:isConstituentOf rdf:resource=\"info:fedora/yul:271119\" fedora:hasParent islandora:isSequenceNumberOfyul_271119 1 islandora:dateIssued 1945-10-31 islandora:isSequenceNumber 2023 islandora:isMemberOf islandora:sp_large_image_cmodel fedora:hasParent fedora:isAnnotationOf rdf:resource=\"info:fedora/islandora:96 islandora:targetedBy admin islandora:isAnnotationType my type islandora:hasURN urn:uuid:C691142D-FCC0-0001-F6B3-1390128014A5 islandora:targets info:fedora/islandora:96 islandora:isViewableByUser nruest islandora:isViewableByRole islandora creator islandora:isManageableByUser nruest islandora:isManageableByRole islandora administrator Samples Large Image object <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:fedora=\"info:fedora/fedora-system:def/relations-external#\" xmlns:fedora-model=\"info:fedora/fedora-system:def/model#\" xmlns:islandora=\"http://islandora.ca/ontology/relsext#\"> <rdf:Description rdf:about=\"info:fedora/yul:328697\"> <fedora:isMemberOfCollection rdf:resource=\"info:fedora/yul:F0433\"></fedora:isMemberOfCollection> <fedora-model:hasModel rdf:resource=\"info:fedora/islandora:sp_large_image_cmodel\"></fedora-model:hasModel> <islandora:inheritXacmlFrom rdf:resource=\"info:fedora/yul:F0433\"></islandora:inheritXacmlFrom> </rdf:Description> </rdf:RDF> Page object <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:fedora=\"info:fedora/fedora-system:def/relations-external#\" xmlns:fedora-model=\"info:fedora/fedora-system:def/model#\" xmlns:islandora=\"http://islandora.ca/ontology/relsext#\"> <rdf:Description rdf:about=\"info:fedora/yul:336779\"> <fedora-model:hasModel rdf:resource=\"info:fedora/islandora:pageCModel\"></fedora-model:hasModel> <islandora:hasLanguage>fra</islandora:hasLanguage> <islandora:isPageOf rdf:resource=\"info:fedora/yul:336566\"></islandora:isPageOf> <islandora:isSequenceNumber>213</islandora:isSequenceNumber> <islandora:isPageNumber>213</islandora:isPageNumber> <islandora:isSection>1</islandora:isSection> <fedora:isMemberOf rdf:resource=\"info:fedora/yul:336566\"></fedora:isMemberOf> <islandora:inheritXacmlFrom rdf:resource=\"info:fedora/yul:336566\"></islandora:inheritXacmlFrom> </rdf:Description> </rdf:RDF> Compound object (child) <rdf:RDF xmlns:fedora=\"info:fedora/fedora-system:def/relations-external#\" xmlns:fedora-model=\"info:fedora/fedora-system:def/model#\" xmlns:islandora=\"http://islandora.ca/ontology/relsext#\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"> <rdf:Description rdf:about=\"info:fedora/yul:271117\"> <fedora:isMemberOfCollection rdf:resource=\"info:fedora/yul:F0375\"></fedora:isMemberOfCollection> <fedora-model:hasModel rdf:resource=\"info:fedora/islandora:sp_large_image_cmodel\"></fedora-model:hasModel> <islandora:inheritXacmlFrom rdf:resource=\"info:fedora/yul:F0375\"></islandora:inheritXacmlFrom> <fedora:isConstituentOf rdf:resource=\"info:fedora/yul:271119\"></fedora:isConstituentOf> <islandora:isSequenceNumberOfyul_271119>1</islandora:isSequenceNumberOfyul_271119> </rdf:Description> </rdf:RDF> Newspaper object <rdf:RDF> <rdf:Description rdf:about=\"info:fedora/uofm:1243378\"> <fedora-model:hasModel rdf:resource=\"info:fedora/islandora:newspaperCModel\"/> <fedora:isMemberOfCollection rdf:resource=\"info:fedora/uofm:libraries\"/> </rdf:Description> </rdf:RDF> Newspaper issue object <rdf:RDF> <rdf:Description rdf:about=\"info:fedora/uofm:1351347\"> <fedora:isMemberOf rdf:resource=\"info:fedora/uofm:1243378\"/> <fedora-model:hasModel rdf:resource=\"info:fedora/islandora:newspaperIssueCModel\"/> <islandora:dateIssued>1945-10-31</islandora:dateIssued> <islandora:isSequenceNumber>2023</islandora:isSequenceNumber> </rdf:Description> </rdf:RDF> Newspaper page object <rdf:RDF> <rdf:Description rdf:about=\"info:fedora/uofm:1351348\"> <fedora-model:hasModel rdf:resource=\"info:fedora/islandora:newspaperPageCModel\"/> <fedora:isMemberOf rdf:resource=\"info:fedora/uofm:1351347\"/> <islandora:isPageOf rdf:resource=\"info:fedora/uofm:1351347\"/> <islandora:isSequenceNumber>1</islandora:isSequenceNumber> <islandora:isPageNumber>1</islandora:isPageNumber> </rdf:Description> </rdf:RDF> Audit log migration auditTrail mapping fcrepo3 event fcrepo4 Event Type addDatastream premis:ing\u2021 modifyDatastreamByReference audit:contentModification/metadataModification\u2021 modifyObject audit:resourceModification\u2021 modifyObject (checksum validation) premis:validation\u2021 modifyDatastreamByValue audit:contentModification/metadataModification\u2021 purgeDatastream audit:contentRemoval\u2021 \u2020 The fedora3model namespace is not a published namespace. It is a representation of the fcrepo3 namespace info:fedora/fedora-system:def/model . \u2021 Not yet implemented Examples : addDatastream <audit:record ID=\"AUDREC1\"> <audit:process type=\"Fedora API-M\"/> <audit:action>addDatastream</audit:action> <audit:componentID>TECHMD_FITS</audit:componentID> <audit:responsibility>joanna</audit:responsibility> <audit:date>2013-06-21T14:54:27.396Z</audit:date> <audit:justification>Copied datastream from yul:61282.</audit:justification> </audit:record> modifyDatastreamByReference <audit:record ID=\"AUDREC4\"> <audit:process type=\"Fedora API-M\"/> <audit:action>modifyDatastreamByReference</audit:action> <audit:componentID>TN</audit:componentID> <audit:responsibility>fedoraAdmin</audit:responsibility> <audit:date>2013-06-22T05:14:34.443Z</audit:date> <audit:justification></audit:justification> </audit:record> modifyObject <audit:record ID=\"AUDREC5\"> <audit:process type=\"Fedora API-M\"/> <audit:action>modifyObject</audit:action> <audit:componentID></audit:componentID> <audit:responsibility>joanna</audit:responsibility> <audit:date>2013-07-02T14:31:59.699Z</audit:date> <audit:justification></audit:justification> </audit:record> modifyObject (checksum validation) <audit:record ID=\"AUDREC23\"> <audit:process type=\"Fedora API-M\"/> <audit:action>modifyObject</audit:action> <audit:componentID></audit:componentID> <audit:responsibility>anonymous</audit:responsibility> <audit:date>2014-01-22T21:07:43.502Z</audit:date> <audit:justification>PREMIS:file=yul:96031+FULL_TEXT+FULL_TEXT.0; PREMIS:eventType=fixity check; PREMIS:eventOutcome=SHA-1 checksum validated.</audit:justification> </audit:record> modifyDatastreamByValue <audit:record ID=\"AUDREC16\"> <audit:process type=\"Fedora API-M\"/> <audit:action>modifyDatastreamByValue</audit:action> <audit:componentID>RELS-EXT</audit:componentID> <audit:responsibility>nruest</audit:responsibility> <audit:date>2013-11-27T15:42:08.823Z</audit:date> <audit:justification></audit:justification> </audit:record> purgeDatastream <audit:record ID=\"AUDREC15\"> <audit:process type=\"Fedora API-M\"/> <audit:action>purgeDatastream</audit:action> <audit:componentID>MKV</audit:componentID> <audit:responsibility>fedoraAdmin</audit:responsibility> <audit:date>2015-04-08T14:37:54.963Z</audit:date> <audit:justification>Purged datastream (ID=MKV), versions ranging from the beginning of time to the end of time. This resulted in the permanent removal of 1 datastream version(s) (2015-02-19T21:01:56.235Z) and all associated audit records.</audit:justification> Diagrams Example Islandora (Large Image Object), PCDM, and Fedora 4 structure","title":"Migration"},{"location":"migration/migration/#fcrepo3-object-properties-to-fcrepo4","text":"fcrepo 3 fcrepo4 Example PID fedora3model:PID\u2020 yul:328697 state fedoraaccess:objState Active label fedora3model:label\u2020 Elvis Presley createDate premis:hasDateCreatedByApplication 2015-03-16T20:11:06.683Z lastModifiedDate metadataModification 2015-03-16T20:11:06.683Z ownerId fedora3model:ownerId\u2020 nruest \u2020 The fedora3model namespace is not a published namespace. It is a representation of the fcrepo3 namespace info:fedora/fedora-system:def/model . \u2021 Not yet implemented","title":"fcrepo3 Object properties to fcrepo4"},{"location":"migration/migration/#fcrepo3-datastream-properties-to-fcrepo4","text":"fcrepo3 fcrepo4 Example DSID dcterms:identifier OBJ Label dcterms:title\u2021 ASC19109.tif MIME Type ebucore:hasMimeType\u2020 image/tiff State fedoraaccess:objState Active Created premis:hasDateCreatedByApplication 2015-03-16T20:11:06.683Z Versionable fedora:hasVersions\u2021 true Format URI premis:formatDesignation\u2021 info:pronom/fmt/156 Alternate IDs dcterms:identifier\u2021 Access URL dcterms:identifier\u2021 Checksum cryptofunc: hashalgorithm \u2021 cryptofunc:sha1 \"c91342b705b15cb4f6ac5362cc6a47d9425aec86\" \u2020 The fedora3model namespace is not a published namespace. It is a representation of the fcrepo3 namespace info:fedora/fedora-system:def/model . \u2021 Not yet implemented","title":"fcrepo3 Datastream properties to fcrepo4"},{"location":"migration/migration/#fcrepo3-rels-ext-to-fcrepo4-mapping","text":"fcrepo3 Example fcrepo4 Example fedora:isMemberOfCollection rdf:resource=\"info:fedora/yul:F0433\" fedora:hasParent fedora-model:hasModel rdf:resource=\"info:fedora/islandora:sp_large_image_cmodel\" rdf:type islandora:largeImage islandora:inheritXacmlFrom rdf:resource=\"info:fedora/yul:F0433\" islandora:hasLanguage fra dcterms:language fra islandora:isPageOf rdf:resource=\"info:fedora/yul:336566\" islandora:isSequenceNumber 213 islandora:isPageNumber 213 islandora:isSection 1 fedora:isConstituentOf rdf:resource=\"info:fedora/yul:271119\" fedora:hasParent islandora:isSequenceNumberOfyul_271119 1 islandora:dateIssued 1945-10-31 islandora:isSequenceNumber 2023 islandora:isMemberOf islandora:sp_large_image_cmodel fedora:hasParent fedora:isAnnotationOf rdf:resource=\"info:fedora/islandora:96 islandora:targetedBy admin islandora:isAnnotationType my type islandora:hasURN urn:uuid:C691142D-FCC0-0001-F6B3-1390128014A5 islandora:targets info:fedora/islandora:96 islandora:isViewableByUser nruest islandora:isViewableByRole islandora creator islandora:isManageableByUser nruest islandora:isManageableByRole islandora administrator Samples Large Image object <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:fedora=\"info:fedora/fedora-system:def/relations-external#\" xmlns:fedora-model=\"info:fedora/fedora-system:def/model#\" xmlns:islandora=\"http://islandora.ca/ontology/relsext#\"> <rdf:Description rdf:about=\"info:fedora/yul:328697\"> <fedora:isMemberOfCollection rdf:resource=\"info:fedora/yul:F0433\"></fedora:isMemberOfCollection> <fedora-model:hasModel rdf:resource=\"info:fedora/islandora:sp_large_image_cmodel\"></fedora-model:hasModel> <islandora:inheritXacmlFrom rdf:resource=\"info:fedora/yul:F0433\"></islandora:inheritXacmlFrom> </rdf:Description> </rdf:RDF> Page object <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:fedora=\"info:fedora/fedora-system:def/relations-external#\" xmlns:fedora-model=\"info:fedora/fedora-system:def/model#\" xmlns:islandora=\"http://islandora.ca/ontology/relsext#\"> <rdf:Description rdf:about=\"info:fedora/yul:336779\"> <fedora-model:hasModel rdf:resource=\"info:fedora/islandora:pageCModel\"></fedora-model:hasModel> <islandora:hasLanguage>fra</islandora:hasLanguage> <islandora:isPageOf rdf:resource=\"info:fedora/yul:336566\"></islandora:isPageOf> <islandora:isSequenceNumber>213</islandora:isSequenceNumber> <islandora:isPageNumber>213</islandora:isPageNumber> <islandora:isSection>1</islandora:isSection> <fedora:isMemberOf rdf:resource=\"info:fedora/yul:336566\"></fedora:isMemberOf> <islandora:inheritXacmlFrom rdf:resource=\"info:fedora/yul:336566\"></islandora:inheritXacmlFrom> </rdf:Description> </rdf:RDF> Compound object (child) <rdf:RDF xmlns:fedora=\"info:fedora/fedora-system:def/relations-external#\" xmlns:fedora-model=\"info:fedora/fedora-system:def/model#\" xmlns:islandora=\"http://islandora.ca/ontology/relsext#\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"> <rdf:Description rdf:about=\"info:fedora/yul:271117\"> <fedora:isMemberOfCollection rdf:resource=\"info:fedora/yul:F0375\"></fedora:isMemberOfCollection> <fedora-model:hasModel rdf:resource=\"info:fedora/islandora:sp_large_image_cmodel\"></fedora-model:hasModel> <islandora:inheritXacmlFrom rdf:resource=\"info:fedora/yul:F0375\"></islandora:inheritXacmlFrom> <fedora:isConstituentOf rdf:resource=\"info:fedora/yul:271119\"></fedora:isConstituentOf> <islandora:isSequenceNumberOfyul_271119>1</islandora:isSequenceNumberOfyul_271119> </rdf:Description> </rdf:RDF> Newspaper object <rdf:RDF> <rdf:Description rdf:about=\"info:fedora/uofm:1243378\"> <fedora-model:hasModel rdf:resource=\"info:fedora/islandora:newspaperCModel\"/> <fedora:isMemberOfCollection rdf:resource=\"info:fedora/uofm:libraries\"/> </rdf:Description> </rdf:RDF> Newspaper issue object <rdf:RDF> <rdf:Description rdf:about=\"info:fedora/uofm:1351347\"> <fedora:isMemberOf rdf:resource=\"info:fedora/uofm:1243378\"/> <fedora-model:hasModel rdf:resource=\"info:fedora/islandora:newspaperIssueCModel\"/> <islandora:dateIssued>1945-10-31</islandora:dateIssued> <islandora:isSequenceNumber>2023</islandora:isSequenceNumber> </rdf:Description> </rdf:RDF> Newspaper page object <rdf:RDF> <rdf:Description rdf:about=\"info:fedora/uofm:1351348\"> <fedora-model:hasModel rdf:resource=\"info:fedora/islandora:newspaperPageCModel\"/> <fedora:isMemberOf rdf:resource=\"info:fedora/uofm:1351347\"/> <islandora:isPageOf rdf:resource=\"info:fedora/uofm:1351347\"/> <islandora:isSequenceNumber>1</islandora:isSequenceNumber> <islandora:isPageNumber>1</islandora:isPageNumber> </rdf:Description> </rdf:RDF>","title":"fcrepo3 RELS-EXT to fcrepo4 Mapping"},{"location":"migration/migration/#audit-log-migration","text":"auditTrail mapping fcrepo3 event fcrepo4 Event Type addDatastream premis:ing\u2021 modifyDatastreamByReference audit:contentModification/metadataModification\u2021 modifyObject audit:resourceModification\u2021 modifyObject (checksum validation) premis:validation\u2021 modifyDatastreamByValue audit:contentModification/metadataModification\u2021 purgeDatastream audit:contentRemoval\u2021 \u2020 The fedora3model namespace is not a published namespace. It is a representation of the fcrepo3 namespace info:fedora/fedora-system:def/model . \u2021 Not yet implemented Examples : addDatastream <audit:record ID=\"AUDREC1\"> <audit:process type=\"Fedora API-M\"/> <audit:action>addDatastream</audit:action> <audit:componentID>TECHMD_FITS</audit:componentID> <audit:responsibility>joanna</audit:responsibility> <audit:date>2013-06-21T14:54:27.396Z</audit:date> <audit:justification>Copied datastream from yul:61282.</audit:justification> </audit:record> modifyDatastreamByReference <audit:record ID=\"AUDREC4\"> <audit:process type=\"Fedora API-M\"/> <audit:action>modifyDatastreamByReference</audit:action> <audit:componentID>TN</audit:componentID> <audit:responsibility>fedoraAdmin</audit:responsibility> <audit:date>2013-06-22T05:14:34.443Z</audit:date> <audit:justification></audit:justification> </audit:record> modifyObject <audit:record ID=\"AUDREC5\"> <audit:process type=\"Fedora API-M\"/> <audit:action>modifyObject</audit:action> <audit:componentID></audit:componentID> <audit:responsibility>joanna</audit:responsibility> <audit:date>2013-07-02T14:31:59.699Z</audit:date> <audit:justification></audit:justification> </audit:record> modifyObject (checksum validation) <audit:record ID=\"AUDREC23\"> <audit:process type=\"Fedora API-M\"/> <audit:action>modifyObject</audit:action> <audit:componentID></audit:componentID> <audit:responsibility>anonymous</audit:responsibility> <audit:date>2014-01-22T21:07:43.502Z</audit:date> <audit:justification>PREMIS:file=yul:96031+FULL_TEXT+FULL_TEXT.0; PREMIS:eventType=fixity check; PREMIS:eventOutcome=SHA-1 checksum validated.</audit:justification> </audit:record> modifyDatastreamByValue <audit:record ID=\"AUDREC16\"> <audit:process type=\"Fedora API-M\"/> <audit:action>modifyDatastreamByValue</audit:action> <audit:componentID>RELS-EXT</audit:componentID> <audit:responsibility>nruest</audit:responsibility> <audit:date>2013-11-27T15:42:08.823Z</audit:date> <audit:justification></audit:justification> </audit:record> purgeDatastream <audit:record ID=\"AUDREC15\"> <audit:process type=\"Fedora API-M\"/> <audit:action>purgeDatastream</audit:action> <audit:componentID>MKV</audit:componentID> <audit:responsibility>fedoraAdmin</audit:responsibility> <audit:date>2015-04-08T14:37:54.963Z</audit:date> <audit:justification>Purged datastream (ID=MKV), versions ranging from the beginning of time to the end of time. This resulted in the permanent removal of 1 datastream version(s) (2015-02-19T21:01:56.235Z) and all associated audit records.</audit:justification>","title":"Audit log migration"},{"location":"migration/migration/#diagrams","text":"Example Islandora (Large Image Object), PCDM, and Fedora 4 structure","title":"Diagrams"},{"location":"mvp/mvp_doc/","text":"Islandora CLAW MVP Motivation The Islandora CLAW project is currently transitioning from a prototype into a competitive product, and has had a requirements change from integration with Drupal 7 to Drupal 8. In order to aid in that transition, we are defining the minimum viable product. This will defend against scope creep, give clearly defined goals for community members to work towards, and present the point at which the CLAW team feels the software is ready to be tested out in small installations. Needless to say, since this is a minimum product, a lot of parts of the previous prototype are either going to get replaced by an existing project to ease the maintenance load, or be removed altogether until time and resources allow other development. High Level Features These are what are considered the minimum requirements for a functional Islandora CLAW that is worthy of a 1.0.0 release. Content modeled in Drupal as Entities using PCDM 1.0 REST API exposed for Drupal Entities Support for collections, images, books, and pages The ability to control metadata mappings between Drupal and RDF Provide RDF based default descriptive metadata profile in Drupal The ability to export/import JSON-LD Automatic backup of Drupal content in Fedora 4 Ability to restore/bootstrap a Drupal site from a properly structured Fedora 4 repository The ability to index and search resources with Apache Solr The ability to restrict access to collections and/or individual resources across all representations (Drupal, Fedora, Solr, etc\u2026) Asynchronous derivative generation Vagrant environment for development purposes, which will serve as a starting point for more complicated, distributed installs Architecture Overview Islandora is composed of four broad categories of technologies. On one end, there is the administrative interface, which users and other clients will interact with. On the other is a repository, which will hold binary data and RDF triples. In between the two are connectors, which are small pieces of software that react to events from either administrative interface or the repository. These connectors will utilize microservices -- small utilities exposed as web services either internally or out on the internet at large. Administrative Interface Drupal 8 Drupal 8 provides a content management system (CMS for short) that allows end users the ability to create, edit, publish, and present digital content. Clients will interact with Drupal 8 via a browser or through a http client (such as cURL ) in order to manipulate digital content. With each write operation, messages will be emitted to an event stream for processing by connectors. SQL DB Drupal 8 requires a MySQL (or drop-in replacement) or Postgres database. Search Engine Existing Drupal 8 modules for Apache Solr or Elastic Search will be utilized to provide full text search. Microservices A microservice is a small web service with functionality related to a single problem, even if it exposes just a single function. It can be deployed and configured independently of any other service, even having its own database if necessary. It can even be something that we don\u2019t directly maintain or control ourselves. ID Mapping Service Identifiers between Fedora and Drupal need to be aligned so we can trace our way from one end of the system to the other. Implementing it as a microservice decouples this functionality from the rest of the codebase, allowing it to change or be pluggable with different mapping functions. It will utilize its own database. The ID indexing connector will be its primary client, updating the registry of IDs in response to repository events. Image Conversion Service Image conversion is a common operation in a content repository. Thumbnails, lower resolution copies for everyday access, and JP2s for use with IIIF image servers need to be generated when preservation masters are added or updated. This can be easily implemented by exposing ImageMagick\u2019s convert command as a microservice. Text Extraction Service Text extraction on PDFs or images of written text can be utilized to provide searching capabilities on content of a book or document. Ghostscript can be used on text based PDF\u2019s. Images will require an OCR utility like Tesseract . FITS Web Service The FITS web service is an already existing project that extracts technical metadata and produces FITS xml files. Repository Fedora Fedora 4 houses binary content along with RDF triples for metadata about repository content. It also conforms to the LDP specification, allowing for manipulation of relationships through HTTP operations. API-X API-X allows Islandora to extend the Fedora 4 API. Microservices are registered in API-X and then \u2018bound\u2019 to repository content. A proxy sitting in front of Fedora exposes microservices as functions on repository content, which all HTTP requests must be routed through. For example, suppose Islandora is running the FITS web service described above. Then let\u2019s say we \u2018bind\u2019 it to all binaries in Fedora, with an identifier of \u2018fits\u2019. If we have a binary file at http://fedora-host.com/fcrepo/rest/binaries/example , then instead of writing code to retreive the content and forward it to our FITS service, we simply visit the proxy at http://apix-host.com/fcrepo/rest/binaries/example/fits . Since services can be described, and that information is made available to interested clients, other applications can make informed decisions about what services are available for particular resources. Triplestore RDF content is indexed in a SPARQL 1.1 compliant triplestore. Connectors Connectors are small programs that listen to the event streams of either the Fedora repository or Drupal. In response to events, they perform actions, often bridging two pieces of technology together (like indexing a triplestore, hence \u2018connectors\u2019). Apache Camel is a natural fit for these types of programs. Connectors will often delegate larger chunks of work to microservices, either bound to content through API-X or used stand-alone. They are primarily concerned with guaranteeing that events are responded to in a idempotent fashion. Due to the nature of asynchronous messaging, certain guarantees, such as timeliness of delivery, cannot be made. So connectors may need to retry a couple of times, or know to ignore a message that\u2019s delivered late or applied twice. This is why it\u2019s important that operations are idempotent. ID Indexer A connector will listen to Fedora events and index unique IDs contained in RDF using the ID Mapping microservice. The predicate used to notate unique IDs can be controlled through configuration. Triplestore Indexer A connector will listen to Fedora events and index RDF in a SPARQL 1.1 triplestore. This is provided by the Fedora community as part of the fcrepo-camel-toolbox project. Sync A sub-project of Alpaca that provides two connectors for keeping information between Fedora and Drupal in sync. One, which indexes content in Fedora from Drupal events, is always running. The other, which indexes content in Drupal based on state in Fedora, is manually triggered through a re-indexing process like other fcrepo-camel-toolbox connectors. Alpaca Alpaca responds to creation and update events for binary files and creates derivative files based on the microservices it finds available for that type of binary in API-X. Derivatives are then ingested into Drupal, with Sync making sure they get flushed back to Fedora. Request Flows Here are the proposed flows for all the different types of requests you can make against repository objects. Read a Resource Suppose a client views a resource in Islandora through their browser. A request is made to Drupal, which looks up the resource in an SQL database, and its representation is returned to the user. Create a Resource Suppose a client submits a form to create a new Resource, or provides a json-ld or binary representation to an entity REST endpoint. The supplied representation is used to create an entity in Drupal. In response to the entity being saved, an event is emitted with supplied representation as the body. The response is then sent back to the client. If using a browser, the client should be redirected to the newly created resource. Meanwhile, Sync will receive the creation event, and ingest the supplied representation in Fedora. Fedora will then emit a creation event. The ID Mapping connector will react, retrieving the Fedora representation and extracting an ID out of the RDF. That ID will be indexed in the ID Mapping microservice. The triple store connector will also react, retrieving RDF and indexing it in the triple store. If the node created was a preservation master, then Alpaca will respond by inspecting the list of derivative generation services bound as extensions on the preservation master in API-X. Each will be invoked, with the new resource getting ingested into Drupal. The process repeats itself again, with new events being emitted for the new entities getting created in Drupal. Sync responds and ingests the derivatives into Fedora. Fedora emits the creation events, but since none are a preservation master, Alpaca does not respond and the cycle is broken. Update a Resource Suppose a client submits a form to update a new Resource, or provides a json-ld or binary representation to an entity REST endpoint. In response to the entity being saved, an event is emitted with supplied representation as the body. The response is then sent back to the client. Meanwhile, Sync will receive the update event, and apply it against the representation in Fedora. Fedora will then emit an update event. The triple store connector will also react, retrieving RDF and indexing it in the triple store. If a binary of a presentation master was updated, then Alpaca will respond by inspecting the list of derivative generation services bound as extensions on the preservation master in API-X. Each will be invoked, with the new resource overwriting its predecessor in Drupal. The process repeats itself again, with new events being emitted for the derivative entities getting updated in Drupal. Sync responds and ingests the derivatives into Fedora. Fedora emits the creation events, but since none are a preservation master, Alpaca does not respond and the cycle is broken. Delete a Resource Suppose a client deletes a resource through the browser or API. In response to the entity being deleted, an event is emitted. The response is then sent back to the client. Meanwhile, Sync will receive the delete event, and remove the corresponding resource in Fedora. The ID Mapping connector will respond to the delete event by removing the resource\u2019s entry. The triple store connector will also respond, deleting all triples with subject of the resource. Content Modeling in Fedora Descriptive metadata will be RDF properties, and a default dcterms descriptive metadata application profile will be created. Technical metadata will be RDF properties, and follow the Hydra/Islandora led technical metadata application profile . Here are Turtle snippets representing the default collection, object, and file types. Collection <> a pcdm:Collection . dc:title \u201cCollection Title\u201d . dc:description \u201cCollection description\u201d . \u2026 other descriptive metadata \u2026 Image <> a pcdm:Object, schema:ImageObject . pcdm:memberOf <someCollection> dc:title \u201cImage Title\u201d . dc:description \u201cImage description\u201d . \u2026 other descriptive metadata \u2026 Image Preservation Master File <> a pcdmuse:PreservationMasterFile . pcdm:fileOf <someImage> ebucore:hasMimeType \u201cimage/jpeg\u201d \u2026 other technical metadata \u2026 Image Service File <> a pcdmuse:ServiceFile . pcdm:fileOf <someImage> ebucore:hasMimeType \u201cimage/jpeg\u201d \u2026 other technical metadata \u2026 Image Thumbnail File <> a pcdmuse:ThumbnailImage . pcdm:fileOf <someImage> ebucore:hasMimeType \u201cimage/png\u201d \u2026 other technical metadata \u2026 Book <> a pcdm:Object, schema:Book . pcdm:memberOf <someCollection> iana:first <firstPageProxy> iana:last <lastPageProxy> dc:title \u201cBook Title\u201d . dc:description \u201cBook description\u201d . \u2026 other descriptive metadata \u2026 Page <> a pcdm:Object, schema:ImageObject . pcdm:memberOf <someBook> dc:title \u201cPage Title\u201d . dc:description \u201cPage description\u201d . \u2026 other descriptive metadata \u2026 Page Proxy <> a ore:Proxy ore:proxyFor <somePage> ore:proxyIn <someBook> iana:prev <prevPageProxy> iana:next <nextPageProxy> Page Preservation Master File <> a pcdmuse:PreservationMasterFile . pcdm:fileOf <somePage> ebucore:hasMimeType \u201cimage/tiff\u201d \u2026 other technical metadata \u2026 Page Intermediate File <> a pcdmuse:IntermediateFile . pcdm:fileOf <somePage> ebucore:hasMimeType \u201cimage/jp2\u201d \u2026 other technical metadata \u2026 Page Service File <> a pcdmuse:ServiceFile . pcdm:fileOf <somePage> ebucore:hasMimeType \u201cimage/jpeg\u201d \u2026 other technical metadata \u2026 Page Thumbnail File <> a pcdmuse:ThumbnailImage . pcdm:fileOf <somePage> ebucore:hasMimeType \u201cimage/png\u201d \u2026 other technical metadata \u2026 Drupal 8 Objects will be modeled using content entities in Drupal 8. The content entities store their metadata as Drupal fields, which are mapped to RDF using an rdf mapping . An RDF mapping not only allows metadata to be transformed into json-ld, but it also controls which properties from Drupal get preserved in Fedora. Files will be modeled using media entities . Media entities attempt to provide the base storage component for the Drupal 8. They can model any type of media, including local files, YouTube videos, Tweets, Instagram photos, etc\u2026 Ingests and edits can be done for an entire graph of entities using inline entity forms . Although flushing back to Fedora happens at the per-Resource level, using inline entity forms makes the named graph the default unit of work for a repository architect. Here\u2019s an example of what an ingest form could look like using inline entity forms: Here\u2019s a list of the entities required to meet our goals. Each of these entities must have basic RESTful CRUD operations exposed for clients. RdfResource NonRdfResource Proxy Object File Collection Image Page Book Individual entities and named graphs can be imported and exported in json-ld format using json-ld contexts .","title":"Minimum Viable Product"},{"location":"mvp/mvp_doc/#islandora-claw-mvp","text":"","title":"Islandora CLAW MVP"},{"location":"mvp/mvp_doc/#motivation","text":"The Islandora CLAW project is currently transitioning from a prototype into a competitive product, and has had a requirements change from integration with Drupal 7 to Drupal 8. In order to aid in that transition, we are defining the minimum viable product. This will defend against scope creep, give clearly defined goals for community members to work towards, and present the point at which the CLAW team feels the software is ready to be tested out in small installations. Needless to say, since this is a minimum product, a lot of parts of the previous prototype are either going to get replaced by an existing project to ease the maintenance load, or be removed altogether until time and resources allow other development.","title":"Motivation"},{"location":"mvp/mvp_doc/#high-level-features","text":"These are what are considered the minimum requirements for a functional Islandora CLAW that is worthy of a 1.0.0 release. Content modeled in Drupal as Entities using PCDM 1.0 REST API exposed for Drupal Entities Support for collections, images, books, and pages The ability to control metadata mappings between Drupal and RDF Provide RDF based default descriptive metadata profile in Drupal The ability to export/import JSON-LD Automatic backup of Drupal content in Fedora 4 Ability to restore/bootstrap a Drupal site from a properly structured Fedora 4 repository The ability to index and search resources with Apache Solr The ability to restrict access to collections and/or individual resources across all representations (Drupal, Fedora, Solr, etc\u2026) Asynchronous derivative generation Vagrant environment for development purposes, which will serve as a starting point for more complicated, distributed installs","title":"High Level Features"},{"location":"mvp/mvp_doc/#architecture","text":"","title":"Architecture"},{"location":"mvp/mvp_doc/#overview","text":"Islandora is composed of four broad categories of technologies. On one end, there is the administrative interface, which users and other clients will interact with. On the other is a repository, which will hold binary data and RDF triples. In between the two are connectors, which are small pieces of software that react to events from either administrative interface or the repository. These connectors will utilize microservices -- small utilities exposed as web services either internally or out on the internet at large.","title":"Overview"},{"location":"mvp/mvp_doc/#administrative-interface","text":"","title":"Administrative Interface"},{"location":"mvp/mvp_doc/#drupal-8","text":"Drupal 8 provides a content management system (CMS for short) that allows end users the ability to create, edit, publish, and present digital content. Clients will interact with Drupal 8 via a browser or through a http client (such as cURL ) in order to manipulate digital content. With each write operation, messages will be emitted to an event stream for processing by connectors.","title":"Drupal 8"},{"location":"mvp/mvp_doc/#sql-db","text":"Drupal 8 requires a MySQL (or drop-in replacement) or Postgres database.","title":"SQL DB"},{"location":"mvp/mvp_doc/#search-engine","text":"Existing Drupal 8 modules for Apache Solr or Elastic Search will be utilized to provide full text search.","title":"Search Engine"},{"location":"mvp/mvp_doc/#microservices","text":"A microservice is a small web service with functionality related to a single problem, even if it exposes just a single function. It can be deployed and configured independently of any other service, even having its own database if necessary. It can even be something that we don\u2019t directly maintain or control ourselves.","title":"Microservices"},{"location":"mvp/mvp_doc/#id-mapping-service","text":"Identifiers between Fedora and Drupal need to be aligned so we can trace our way from one end of the system to the other. Implementing it as a microservice decouples this functionality from the rest of the codebase, allowing it to change or be pluggable with different mapping functions. It will utilize its own database. The ID indexing connector will be its primary client, updating the registry of IDs in response to repository events.","title":"ID Mapping Service"},{"location":"mvp/mvp_doc/#image-conversion-service","text":"Image conversion is a common operation in a content repository. Thumbnails, lower resolution copies for everyday access, and JP2s for use with IIIF image servers need to be generated when preservation masters are added or updated. This can be easily implemented by exposing ImageMagick\u2019s convert command as a microservice.","title":"Image Conversion Service"},{"location":"mvp/mvp_doc/#text-extraction-service","text":"Text extraction on PDFs or images of written text can be utilized to provide searching capabilities on content of a book or document. Ghostscript can be used on text based PDF\u2019s. Images will require an OCR utility like Tesseract .","title":"Text Extraction Service"},{"location":"mvp/mvp_doc/#fits-web-service","text":"The FITS web service is an already existing project that extracts technical metadata and produces FITS xml files.","title":"FITS Web Service"},{"location":"mvp/mvp_doc/#repository","text":"","title":"Repository"},{"location":"mvp/mvp_doc/#fedora","text":"Fedora 4 houses binary content along with RDF triples for metadata about repository content. It also conforms to the LDP specification, allowing for manipulation of relationships through HTTP operations.","title":"Fedora"},{"location":"mvp/mvp_doc/#api-x","text":"API-X allows Islandora to extend the Fedora 4 API. Microservices are registered in API-X and then \u2018bound\u2019 to repository content. A proxy sitting in front of Fedora exposes microservices as functions on repository content, which all HTTP requests must be routed through. For example, suppose Islandora is running the FITS web service described above. Then let\u2019s say we \u2018bind\u2019 it to all binaries in Fedora, with an identifier of \u2018fits\u2019. If we have a binary file at http://fedora-host.com/fcrepo/rest/binaries/example , then instead of writing code to retreive the content and forward it to our FITS service, we simply visit the proxy at http://apix-host.com/fcrepo/rest/binaries/example/fits . Since services can be described, and that information is made available to interested clients, other applications can make informed decisions about what services are available for particular resources.","title":"API-X"},{"location":"mvp/mvp_doc/#triplestore","text":"RDF content is indexed in a SPARQL 1.1 compliant triplestore.","title":"Triplestore"},{"location":"mvp/mvp_doc/#connectors","text":"Connectors are small programs that listen to the event streams of either the Fedora repository or Drupal. In response to events, they perform actions, often bridging two pieces of technology together (like indexing a triplestore, hence \u2018connectors\u2019). Apache Camel is a natural fit for these types of programs. Connectors will often delegate larger chunks of work to microservices, either bound to content through API-X or used stand-alone. They are primarily concerned with guaranteeing that events are responded to in a idempotent fashion. Due to the nature of asynchronous messaging, certain guarantees, such as timeliness of delivery, cannot be made. So connectors may need to retry a couple of times, or know to ignore a message that\u2019s delivered late or applied twice. This is why it\u2019s important that operations are idempotent.","title":"Connectors"},{"location":"mvp/mvp_doc/#id-indexer","text":"A connector will listen to Fedora events and index unique IDs contained in RDF using the ID Mapping microservice. The predicate used to notate unique IDs can be controlled through configuration.","title":"ID Indexer"},{"location":"mvp/mvp_doc/#triplestore-indexer","text":"A connector will listen to Fedora events and index RDF in a SPARQL 1.1 triplestore. This is provided by the Fedora community as part of the fcrepo-camel-toolbox project.","title":"Triplestore Indexer"},{"location":"mvp/mvp_doc/#sync","text":"A sub-project of Alpaca that provides two connectors for keeping information between Fedora and Drupal in sync. One, which indexes content in Fedora from Drupal events, is always running. The other, which indexes content in Drupal based on state in Fedora, is manually triggered through a re-indexing process like other fcrepo-camel-toolbox connectors.","title":"Sync"},{"location":"mvp/mvp_doc/#alpaca","text":"Alpaca responds to creation and update events for binary files and creates derivative files based on the microservices it finds available for that type of binary in API-X. Derivatives are then ingested into Drupal, with Sync making sure they get flushed back to Fedora.","title":"Alpaca"},{"location":"mvp/mvp_doc/#request-flows","text":"Here are the proposed flows for all the different types of requests you can make against repository objects.","title":"Request Flows"},{"location":"mvp/mvp_doc/#read-a-resource","text":"Suppose a client views a resource in Islandora through their browser. A request is made to Drupal, which looks up the resource in an SQL database, and its representation is returned to the user.","title":"Read a Resource"},{"location":"mvp/mvp_doc/#create-a-resource","text":"Suppose a client submits a form to create a new Resource, or provides a json-ld or binary representation to an entity REST endpoint. The supplied representation is used to create an entity in Drupal. In response to the entity being saved, an event is emitted with supplied representation as the body. The response is then sent back to the client. If using a browser, the client should be redirected to the newly created resource. Meanwhile, Sync will receive the creation event, and ingest the supplied representation in Fedora. Fedora will then emit a creation event. The ID Mapping connector will react, retrieving the Fedora representation and extracting an ID out of the RDF. That ID will be indexed in the ID Mapping microservice. The triple store connector will also react, retrieving RDF and indexing it in the triple store. If the node created was a preservation master, then Alpaca will respond by inspecting the list of derivative generation services bound as extensions on the preservation master in API-X. Each will be invoked, with the new resource getting ingested into Drupal. The process repeats itself again, with new events being emitted for the new entities getting created in Drupal. Sync responds and ingests the derivatives into Fedora. Fedora emits the creation events, but since none are a preservation master, Alpaca does not respond and the cycle is broken.","title":"Create a Resource"},{"location":"mvp/mvp_doc/#update-a-resource","text":"Suppose a client submits a form to update a new Resource, or provides a json-ld or binary representation to an entity REST endpoint. In response to the entity being saved, an event is emitted with supplied representation as the body. The response is then sent back to the client. Meanwhile, Sync will receive the update event, and apply it against the representation in Fedora. Fedora will then emit an update event. The triple store connector will also react, retrieving RDF and indexing it in the triple store. If a binary of a presentation master was updated, then Alpaca will respond by inspecting the list of derivative generation services bound as extensions on the preservation master in API-X. Each will be invoked, with the new resource overwriting its predecessor in Drupal. The process repeats itself again, with new events being emitted for the derivative entities getting updated in Drupal. Sync responds and ingests the derivatives into Fedora. Fedora emits the creation events, but since none are a preservation master, Alpaca does not respond and the cycle is broken.","title":"Update a Resource"},{"location":"mvp/mvp_doc/#delete-a-resource","text":"Suppose a client deletes a resource through the browser or API. In response to the entity being deleted, an event is emitted. The response is then sent back to the client. Meanwhile, Sync will receive the delete event, and remove the corresponding resource in Fedora. The ID Mapping connector will respond to the delete event by removing the resource\u2019s entry. The triple store connector will also respond, deleting all triples with subject of the resource.","title":"Delete a Resource"},{"location":"mvp/mvp_doc/#content-modeling-in-fedora","text":"Descriptive metadata will be RDF properties, and a default dcterms descriptive metadata application profile will be created. Technical metadata will be RDF properties, and follow the Hydra/Islandora led technical metadata application profile . Here are Turtle snippets representing the default collection, object, and file types.","title":"Content Modeling in Fedora"},{"location":"mvp/mvp_doc/#collection","text":"<> a pcdm:Collection . dc:title \u201cCollection Title\u201d . dc:description \u201cCollection description\u201d . \u2026 other descriptive metadata \u2026","title":"Collection"},{"location":"mvp/mvp_doc/#image","text":"<> a pcdm:Object, schema:ImageObject . pcdm:memberOf <someCollection> dc:title \u201cImage Title\u201d . dc:description \u201cImage description\u201d . \u2026 other descriptive metadata \u2026","title":"Image"},{"location":"mvp/mvp_doc/#image-preservation-master-file","text":"<> a pcdmuse:PreservationMasterFile . pcdm:fileOf <someImage> ebucore:hasMimeType \u201cimage/jpeg\u201d \u2026 other technical metadata \u2026","title":"Image Preservation Master File"},{"location":"mvp/mvp_doc/#image-service-file","text":"<> a pcdmuse:ServiceFile . pcdm:fileOf <someImage> ebucore:hasMimeType \u201cimage/jpeg\u201d \u2026 other technical metadata \u2026","title":"Image Service File"},{"location":"mvp/mvp_doc/#image-thumbnail-file","text":"<> a pcdmuse:ThumbnailImage . pcdm:fileOf <someImage> ebucore:hasMimeType \u201cimage/png\u201d \u2026 other technical metadata \u2026","title":"Image Thumbnail File"},{"location":"mvp/mvp_doc/#book","text":"<> a pcdm:Object, schema:Book . pcdm:memberOf <someCollection> iana:first <firstPageProxy> iana:last <lastPageProxy> dc:title \u201cBook Title\u201d . dc:description \u201cBook description\u201d . \u2026 other descriptive metadata \u2026","title":"Book"},{"location":"mvp/mvp_doc/#page","text":"<> a pcdm:Object, schema:ImageObject . pcdm:memberOf <someBook> dc:title \u201cPage Title\u201d . dc:description \u201cPage description\u201d . \u2026 other descriptive metadata \u2026","title":"Page"},{"location":"mvp/mvp_doc/#page-proxy","text":"<> a ore:Proxy ore:proxyFor <somePage> ore:proxyIn <someBook> iana:prev <prevPageProxy> iana:next <nextPageProxy>","title":"Page Proxy"},{"location":"mvp/mvp_doc/#page-preservation-master-file","text":"<> a pcdmuse:PreservationMasterFile . pcdm:fileOf <somePage> ebucore:hasMimeType \u201cimage/tiff\u201d \u2026 other technical metadata \u2026","title":"Page Preservation Master File"},{"location":"mvp/mvp_doc/#page-intermediate-file","text":"<> a pcdmuse:IntermediateFile . pcdm:fileOf <somePage> ebucore:hasMimeType \u201cimage/jp2\u201d \u2026 other technical metadata \u2026","title":"Page Intermediate File"},{"location":"mvp/mvp_doc/#page-service-file","text":"<> a pcdmuse:ServiceFile . pcdm:fileOf <somePage> ebucore:hasMimeType \u201cimage/jpeg\u201d \u2026 other technical metadata \u2026","title":"Page Service File"},{"location":"mvp/mvp_doc/#page-thumbnail-file","text":"<> a pcdmuse:ThumbnailImage . pcdm:fileOf <somePage> ebucore:hasMimeType \u201cimage/png\u201d \u2026 other technical metadata \u2026","title":"Page Thumbnail File"},{"location":"mvp/mvp_doc/#drupal-8_1","text":"Objects will be modeled using content entities in Drupal 8. The content entities store their metadata as Drupal fields, which are mapped to RDF using an rdf mapping . An RDF mapping not only allows metadata to be transformed into json-ld, but it also controls which properties from Drupal get preserved in Fedora. Files will be modeled using media entities . Media entities attempt to provide the base storage component for the Drupal 8. They can model any type of media, including local files, YouTube videos, Tweets, Instagram photos, etc\u2026 Ingests and edits can be done for an entire graph of entities using inline entity forms . Although flushing back to Fedora happens at the per-Resource level, using inline entity forms makes the named graph the default unit of work for a repository architect. Here\u2019s an example of what an ingest form could look like using inline entity forms: Here\u2019s a list of the entities required to meet our goals. Each of these entities must have basic RESTful CRUD operations exposed for clients. RdfResource NonRdfResource Proxy Object File Collection Image Page Book Individual entities and named graphs can be imported and exported in json-ld format using json-ld contexts .","title":"Drupal 8"},{"location":"syn/","text":"Syn Description A valve for Tomcat8 that authenticates the JWT tokens created by Islandora in order to provide sessionless Authentication for Fedora4. Named after the Norse goddess Syn . Building This project requires Java 8 and can be built with Gradle . To build and test locally, use ./gradlew build . Installing Copy Syn JAR Copy the JAR that was built above from build/libs/islandora-syn-X.X.X-all.jar and place into $TOMCAT_HOME/lib directory. Can be found in Ubuntu at: /var/lib/tomcat8/lib/ . Note that this JAR is built to contain all the dependancies. Register Valve Now register the valve in Tomcat configuration file. In Ubuntu this file is located at: /var/lib/tomcat8/conf/context.xml <Valve className=\"ca.islandora.syn.valve.SynValve\" pathname=\"conf/syn-settings.xml\" /> where: * pathname : The location of the settings file. Defaults to $CATALINA_BASE/conf/syn-settings.xml . Enable security-contraint The valve checks if requested url is under security contraints . So, valve will activate only if the Fedora4 web.xml file contains something like: <security-constraint> <web-resource-collection> <web-resource-name>Fedora4</web-resource-name> <url-pattern>/*</url-pattern> </web-resource-collection> <auth-constraint> <role-name>*</role-name> </auth-constraint> <user-data-constraint> <transport-guarantee>NONE</transport-guarantee> </user-data-constraint> </security-constraint> <security-role> <role-name>islandora</role-name> </security-role> <login-config> <auth-method>BASIC</auth-method> <realm-name>fcrepo</realm-name> </login-config> On ubuntu this file can be found at: /var/lib/tomcat8/webapps/fcrepo/WEB-INF/web.xml Setup Syn Configuration Modify the example configuration and move it to: $CATALINA_BASE/conf/syn-settings.xml . Header principals Additional roles are passed to Fedora via a HTTP header, this is configured via the header attribute to the <config> element in the syn-settings.xml.example file. You must also configure Fedora to read this header via its HeaderProvider. Maintainers Jonathan Green Development If you would like to contribute, please get involved by attending our weekly Tech Call . We love to hear from you! If you would like to contribute code to the project, you need to be covered by an Islandora Foundation Contributor License Agreement or Corporate Contributor Licencse Agreement . Please see the Contributors pages on Islandora.ca for more information. Licensing MIT","title":"Syn"},{"location":"syn/#syn","text":"","title":"Syn"},{"location":"syn/#description","text":"A valve for Tomcat8 that authenticates the JWT tokens created by Islandora in order to provide sessionless Authentication for Fedora4. Named after the Norse goddess Syn .","title":"Description"},{"location":"syn/#building","text":"This project requires Java 8 and can be built with Gradle . To build and test locally, use ./gradlew build .","title":"Building"},{"location":"syn/#installing","text":"","title":"Installing"},{"location":"syn/#copy-syn-jar","text":"Copy the JAR that was built above from build/libs/islandora-syn-X.X.X-all.jar and place into $TOMCAT_HOME/lib directory. Can be found in Ubuntu at: /var/lib/tomcat8/lib/ . Note that this JAR is built to contain all the dependancies.","title":"Copy Syn JAR"},{"location":"syn/#register-valve","text":"Now register the valve in Tomcat configuration file. In Ubuntu this file is located at: /var/lib/tomcat8/conf/context.xml <Valve className=\"ca.islandora.syn.valve.SynValve\" pathname=\"conf/syn-settings.xml\" /> where: * pathname : The location of the settings file. Defaults to $CATALINA_BASE/conf/syn-settings.xml .","title":"Register Valve"},{"location":"syn/#enable-security-contraint","text":"The valve checks if requested url is under security contraints . So, valve will activate only if the Fedora4 web.xml file contains something like: <security-constraint> <web-resource-collection> <web-resource-name>Fedora4</web-resource-name> <url-pattern>/*</url-pattern> </web-resource-collection> <auth-constraint> <role-name>*</role-name> </auth-constraint> <user-data-constraint> <transport-guarantee>NONE</transport-guarantee> </user-data-constraint> </security-constraint> <security-role> <role-name>islandora</role-name> </security-role> <login-config> <auth-method>BASIC</auth-method> <realm-name>fcrepo</realm-name> </login-config> On ubuntu this file can be found at: /var/lib/tomcat8/webapps/fcrepo/WEB-INF/web.xml","title":"Enable security-contraint"},{"location":"syn/#setup-syn-configuration","text":"Modify the example configuration and move it to: $CATALINA_BASE/conf/syn-settings.xml .","title":"Setup Syn Configuration"},{"location":"syn/#header-principals","text":"Additional roles are passed to Fedora via a HTTP header, this is configured via the header attribute to the <config> element in the syn-settings.xml.example file. You must also configure Fedora to read this header via its HeaderProvider.","title":"Header principals"},{"location":"syn/#maintainers","text":"Jonathan Green","title":"Maintainers"},{"location":"syn/#development","text":"If you would like to contribute, please get involved by attending our weekly Tech Call . We love to hear from you! If you would like to contribute code to the project, you need to be covered by an Islandora Foundation Contributor License Agreement or Corporate Contributor Licencse Agreement . Please see the Contributors pages on Islandora.ca for more information.","title":"Development"},{"location":"syn/#licensing","text":"MIT","title":"Licensing"},{"location":"technical-documentation/docs-build/","text":"Introduction This documentation is built using mkdocs , a static site generator that is geared towards building project documentation. The documentation is created in the Markdown format, and it all resides in the docs directory in the repository. The organization of the documentation is controlled by the mkdocs.yml in the root of the repository. Prerequisites You will need to have mkdocs installed locally, as well as the mkdocs theme. Install mkdocs : sudo -H pip install mkdocs Install material theme: sudo -H pip install mkdocs-material Build and Deploy documentation Make sure you have all the submodules: git submodule update --init --recursive Documentation is build by running to the following command in the root of the repository: mkdocs build --clean This command will create a static site folder in the root of the repository. You can preview any changes you have made to the documentation by running the following command: mkdocs serve And then visiting http://localhost:8111 in your browser. To deploy documentation to GitHub Pages, issue the following command: mkdocs gh-deploy --clean","title":"How to build documenation"},{"location":"technical-documentation/docs-build/#introduction","text":"This documentation is built using mkdocs , a static site generator that is geared towards building project documentation. The documentation is created in the Markdown format, and it all resides in the docs directory in the repository. The organization of the documentation is controlled by the mkdocs.yml in the root of the repository.","title":"Introduction"},{"location":"technical-documentation/docs-build/#prerequisites","text":"You will need to have mkdocs installed locally, as well as the mkdocs theme. Install mkdocs : sudo -H pip install mkdocs Install material theme: sudo -H pip install mkdocs-material","title":"Prerequisites"},{"location":"technical-documentation/docs-build/#build-and-deploy-documentation","text":"Make sure you have all the submodules: git submodule update --init --recursive Documentation is build by running to the following command in the root of the repository: mkdocs build --clean This command will create a static site folder in the root of the repository. You can preview any changes you have made to the documentation by running the following command: mkdocs serve And then visiting http://localhost:8111 in your browser. To deploy documentation to GitHub Pages, issue the following command: mkdocs gh-deploy --clean","title":"Build and Deploy documentation"},{"location":"technical-documentation/drupal-project/","text":"Introduction Islandora CLAW makes use of drupal-project , a composer template for Drupal projects. We augment it with Islandora CLAW specific changes, and need to occasionally pull in upstream changes. The process below outlines how we will do it in a consistent manner. Pull in upstream changes Clone a fork of our fork to your or your institution's GitHub organization: git clone fork Add the drupal-composer repository as a remote: git remote add upstream https://github.com/drupal-composer/drupal-project.git Fetch everything: git fetch --all Create a branch to pull in changes that is based off the Islandora-CLAW 8.x-1.x branch: git checkout -b sync-upstream Rebase upstream changes: git rebase upstream/8.x (fix any merge conflicts, and then git rebase --continue ) Push to your fork: git push origin sync-upstream Create pull request","title":"Syncing Drupal Project"},{"location":"technical-documentation/drupal-project/#introduction","text":"Islandora CLAW makes use of drupal-project , a composer template for Drupal projects. We augment it with Islandora CLAW specific changes, and need to occasionally pull in upstream changes. The process below outlines how we will do it in a consistent manner.","title":"Introduction"},{"location":"technical-documentation/drupal-project/#pull-in-upstream-changes","text":"Clone a fork of our fork to your or your institution's GitHub organization: git clone fork Add the drupal-composer repository as a remote: git remote add upstream https://github.com/drupal-composer/drupal-project.git Fetch everything: git fetch --all Create a branch to pull in changes that is based off the Islandora-CLAW 8.x-1.x branch: git checkout -b sync-upstream Rebase upstream changes: git rebase upstream/8.x (fix any merge conflicts, and then git rebase --continue ) Push to your fork: git push origin sync-upstream Create pull request","title":"Pull in upstream changes"},{"location":"technical-documentation/structure/","text":"Structure","title":"Structure"},{"location":"technical-documentation/structure/#structure","text":"","title":"Structure"},{"location":"technical-documentation/versioning/","text":"Versioning Policy Islandora CLAW uses semantic versioning , except for Drupal modules. Components Semantic Versioning Major version . Minor version . Patch Major version ; Major changes, and breaks the API Minor version ; New features, and does not break the API Patch ; Bug fixes, and never breaks backward compatibility Example: 1.2.3 Alpaca Chullo CLAW Crayfish Crayfish Commons Syn Drupal Contrib Versioning Core Compatibility - Major . PatchLevel[-Extra] Example: 8.x-1.1 drupal-project islandora jsonld","title":"Versioning Policy"},{"location":"technical-documentation/versioning/#versioning-policy","text":"Islandora CLAW uses semantic versioning , except for Drupal modules.","title":"Versioning Policy"},{"location":"technical-documentation/versioning/#components","text":"","title":"Components"},{"location":"technical-documentation/versioning/#semantic-versioning","text":"Major version . Minor version . Patch Major version ; Major changes, and breaks the API Minor version ; New features, and does not break the API Patch ; Bug fixes, and never breaks backward compatibility Example: 1.2.3 Alpaca Chullo CLAW Crayfish Crayfish Commons Syn","title":"Semantic Versioning"},{"location":"technical-documentation/versioning/#drupal-contrib-versioning","text":"Core Compatibility - Major . PatchLevel[-Extra] Example: 8.x-1.1 drupal-project islandora jsonld","title":"Drupal Contrib Versioning"},{"location":"user-documentation/CLAWfor1x/","text":"What's Different Between Islandora 1.x and Islandora CLAW In the most basic terms, Islandora CLAW is the version of Islandora that works with Fedora 4 . Because Fedora 4 is a vastly different platform than Fedora 3, so too is Islandora CLAW a major departure from what came before. Switching to CLAW represents not just a typical upgrade with improvements, features, and bug fixes, but rather a major shift in how objects are stored and managed. Moving from Islandora 7.x-1.x to CLAW requires a migration of objects, which you can learn about here . It also requires some adjustments in how you think about your objects and their relationships, and how to manage them in Islandora, which we will cover below. You can also check out some of the documentation provided by the Fedora project: Concept Mapping - Fedora 3 to 4 The Fedora 4 object model Fedora 3 to 4 Upgration LDP-PCDM-F4 In Action Fedora Repository Structure Fedora 3 stored all objects at the top level of the repository, although presentation of the objects could mimic a directory structure by having objects 'in' collections and collections 'in' other collections. This image is a helpful oversimplification: Fedora 4 differs considerably in that there is an innate tree hierarchy to the repository rather than a flat structure. Put less simply, \" a Fedora 4 repository consists of a directed acyclic graph of resources where edges represent a parent-child relation \". Object Structure Fedora 3 objects are FOXML (Fedora Object eXtensible Markup Language) documents, with three elements: Digital Object Identifier : A unique, persistent identifier for the digital object. Also knowns as the PID. System Properties : A set of system-defined descriptive properties that is necessary to manage and track the object in the repository. Datastream(s) : The element in a Fedora digital object that represents a content item. In Fedora 4 , what we would have called objects are now referred to as Resources (and everything in Fedora 4 is a Resource ). Instead of being composed of XML as they were in Fedora 3, they are stored in ModeShape as nodes with RDF properties. Resources come in two flavors: RDF Sources , which are Resources having only RDF data, and Non-RDF Sources , which are Resources that are binary files (HTML, PDFs, images, audio, video, etc). The terms [ RDF Source ] and [ Non-RDF Source ] both come from the W3C's Linked Data Platform specification, which also defines the idea of Linked Data Platform Containers , or LDPCs . An LDPC is an RDF Source that functions as a collection of Resources , similar to the way Islandora 7.x-1.x compound objects exist only as a way to tie together its children. An LDPC may contain Non-RDF Sources , as well as other RDF Sources acting as LDPCs ; you can have a container of containers just like how Islandora 7.x-1.x can have a collection of collections. CLAW makes use of the Portland Common Data Model (PCDM) as a layer of abstraction over LDPCs to make containment simpler to understand for users; a pcdm:Collection may contain other pcdm:Collections or pcdm:Objects (similar to an Islandora 7.x-1.x collection content model), and a pcdm:Object may contain other pcdm:Objects (similar to the way an Islandora 7.x-1.x compound object has child objects) or pcdm:Files (similar to the way Islandora 7.x-1.x objects have datastreams). Datastreams In Islandora 7.x-1.x, every object has a specific content model which defined what datastreams it could have and which were absolutely required. Some of these Islandora 7.x-1.x datastreams contained metadata about the object while others contained binary files (JPG, PDF, MP3, PNG, TIFF, etc). In Islandora CLAW, all metadata about a resource is stored as RDF attributes directly on the resource itself, whether that resource is a pcdm:Collection , pcdm:Object or a pcdm:File , so we no longer need to separate metadata by type (RELS-EXT, RELS-INT, MODS, DC, PREMIS, etc) and store it in binary files as we did in Islandora 7.x-1.x. Binary files, such as JPGs, PNGs, MP3s, and PDFs, are handled via pcdm:Files which are contained by a parent pcdm:Object , similar to how an Islandora 7.x-1.x cmodel may hold a PDF or JPG as a datastream. Unlike Islandora 7.x-1.x, these binary files can actually have their own technical metadata attached them. This is because pcdm:Collections , pcdm:Objects and even pcdm:Files are all RDF Sources containing only RDF data, with pcdm:Files having links to the URL of the Non-RDF Source (binary file) they represent as part of their RDF data in addition to whatever other metadata you may want about the file. Using this system, a pcdm:Object can contain as many pcdm:Files as necessary, and each pcdm:File can have separate metadata about itself and its relationship to other pcdm:Files attached to the parent pcdm:Object , serving the same purpose RELS-INT datastreams served in Islandora 7.x-1.x. Note that you can use a pcdm:File to represent a file of metadata, such as MODS, DC, or PBCore, in case you would like to preserve a copy of an object's legacy metadata when migrating into Fedora 4. These metadata files will be treated like any other binary file in Islandora CLAW, and will not be indexed or editable through the GUI. PIDs Every object in a Fedora 3 repository had a Persistent Identifier following the pattern namespace:pid . Fedora 4 resources do not have PIDs. Instead, since Fedora 4 is an LDP server , their identifiers are fundamentally their URIs. The PIDs of objects migrated from a Fedora 3 repository can still be stored in Fedora 4, as additional properties on the new Fedora 4 resource. Since resources are stored as nodes on the Drupal side of Islandora CLAW, they also have Drupal UUIDs.","title":"Islandora CLAW for 1.x Users [old]"},{"location":"user-documentation/CLAWfor1x/#whats-different-between-islandora-1x-and-islandora-claw","text":"In the most basic terms, Islandora CLAW is the version of Islandora that works with Fedora 4 . Because Fedora 4 is a vastly different platform than Fedora 3, so too is Islandora CLAW a major departure from what came before. Switching to CLAW represents not just a typical upgrade with improvements, features, and bug fixes, but rather a major shift in how objects are stored and managed. Moving from Islandora 7.x-1.x to CLAW requires a migration of objects, which you can learn about here . It also requires some adjustments in how you think about your objects and their relationships, and how to manage them in Islandora, which we will cover below. You can also check out some of the documentation provided by the Fedora project: Concept Mapping - Fedora 3 to 4 The Fedora 4 object model Fedora 3 to 4 Upgration LDP-PCDM-F4 In Action","title":"What's Different Between Islandora 1.x and Islandora CLAW"},{"location":"user-documentation/CLAWfor1x/#fedora","text":"","title":"Fedora"},{"location":"user-documentation/CLAWfor1x/#repository-structure","text":"Fedora 3 stored all objects at the top level of the repository, although presentation of the objects could mimic a directory structure by having objects 'in' collections and collections 'in' other collections. This image is a helpful oversimplification: Fedora 4 differs considerably in that there is an innate tree hierarchy to the repository rather than a flat structure. Put less simply, \" a Fedora 4 repository consists of a directed acyclic graph of resources where edges represent a parent-child relation \".","title":"Repository Structure"},{"location":"user-documentation/CLAWfor1x/#object-structure","text":"Fedora 3 objects are FOXML (Fedora Object eXtensible Markup Language) documents, with three elements: Digital Object Identifier : A unique, persistent identifier for the digital object. Also knowns as the PID. System Properties : A set of system-defined descriptive properties that is necessary to manage and track the object in the repository. Datastream(s) : The element in a Fedora digital object that represents a content item. In Fedora 4 , what we would have called objects are now referred to as Resources (and everything in Fedora 4 is a Resource ). Instead of being composed of XML as they were in Fedora 3, they are stored in ModeShape as nodes with RDF properties. Resources come in two flavors: RDF Sources , which are Resources having only RDF data, and Non-RDF Sources , which are Resources that are binary files (HTML, PDFs, images, audio, video, etc). The terms [ RDF Source ] and [ Non-RDF Source ] both come from the W3C's Linked Data Platform specification, which also defines the idea of Linked Data Platform Containers , or LDPCs . An LDPC is an RDF Source that functions as a collection of Resources , similar to the way Islandora 7.x-1.x compound objects exist only as a way to tie together its children. An LDPC may contain Non-RDF Sources , as well as other RDF Sources acting as LDPCs ; you can have a container of containers just like how Islandora 7.x-1.x can have a collection of collections. CLAW makes use of the Portland Common Data Model (PCDM) as a layer of abstraction over LDPCs to make containment simpler to understand for users; a pcdm:Collection may contain other pcdm:Collections or pcdm:Objects (similar to an Islandora 7.x-1.x collection content model), and a pcdm:Object may contain other pcdm:Objects (similar to the way an Islandora 7.x-1.x compound object has child objects) or pcdm:Files (similar to the way Islandora 7.x-1.x objects have datastreams).","title":"Object Structure"},{"location":"user-documentation/CLAWfor1x/#datastreams","text":"In Islandora 7.x-1.x, every object has a specific content model which defined what datastreams it could have and which were absolutely required. Some of these Islandora 7.x-1.x datastreams contained metadata about the object while others contained binary files (JPG, PDF, MP3, PNG, TIFF, etc). In Islandora CLAW, all metadata about a resource is stored as RDF attributes directly on the resource itself, whether that resource is a pcdm:Collection , pcdm:Object or a pcdm:File , so we no longer need to separate metadata by type (RELS-EXT, RELS-INT, MODS, DC, PREMIS, etc) and store it in binary files as we did in Islandora 7.x-1.x. Binary files, such as JPGs, PNGs, MP3s, and PDFs, are handled via pcdm:Files which are contained by a parent pcdm:Object , similar to how an Islandora 7.x-1.x cmodel may hold a PDF or JPG as a datastream. Unlike Islandora 7.x-1.x, these binary files can actually have their own technical metadata attached them. This is because pcdm:Collections , pcdm:Objects and even pcdm:Files are all RDF Sources containing only RDF data, with pcdm:Files having links to the URL of the Non-RDF Source (binary file) they represent as part of their RDF data in addition to whatever other metadata you may want about the file. Using this system, a pcdm:Object can contain as many pcdm:Files as necessary, and each pcdm:File can have separate metadata about itself and its relationship to other pcdm:Files attached to the parent pcdm:Object , serving the same purpose RELS-INT datastreams served in Islandora 7.x-1.x. Note that you can use a pcdm:File to represent a file of metadata, such as MODS, DC, or PBCore, in case you would like to preserve a copy of an object's legacy metadata when migrating into Fedora 4. These metadata files will be treated like any other binary file in Islandora CLAW, and will not be indexed or editable through the GUI.","title":"Datastreams"},{"location":"user-documentation/CLAWfor1x/#pids","text":"Every object in a Fedora 3 repository had a Persistent Identifier following the pattern namespace:pid . Fedora 4 resources do not have PIDs. Instead, since Fedora 4 is an LDP server , their identifiers are fundamentally their URIs. The PIDs of objects migrated from a Fedora 3 repository can still be stored in Fedora 4, as additional properties on the new Fedora 4 resource. Since resources are stored as nodes on the Drupal side of Islandora CLAW, they also have Drupal UUIDs.","title":"PIDs"},{"location":"user-documentation/access-control/","text":"","title":"Access Control"},{"location":"user-documentation/collections/","text":"Todo You might want to use collections to organize, describe, and help with navigation. A collection is just another node All nodes can be members of other nodes. You can edit a node\u2019s Member relationships in\u2026 If you remove something from a collection does it get deleted? The \u2018everything is a collection\u2019 setting is is configurable, but where?","title":"Organizing your Collections"},{"location":"user-documentation/datastreams/","text":"Todo Files are attached to Nodes through Media (intermediary objects). Media objects can also contain technical metadata about the files. We use tags on the Media objects to determine how to display them (e.g. OpenSeadragon) You can see what media is attached to a node on the node's \"Media\" tab When you make a Media, it asks for a(nother) title and some alt-text. What should I put there? The node's title? Something else? Where are files actually stored? See todo: make Flysystem section. What does it mean for your content to be in Fedora? How does that happen and how do we check? See access control section as it relates to files.","title":"Datastreams are Media"},{"location":"user-documentation/derivatives/","text":"Todo Derivatives use Context (Rules?) module. Where to configure them? We set them up based on taxonomy terms Where are they, and how do I make a new one?","title":"Derivatives"},{"location":"user-documentation/fedora-rdf/","text":"Todo If you want to see the Drupal object in RDF, append ?_format=jsonld This is based on a mapping in yaml which lives where How to create or update a mapping How an object gets into Fedora at the high level so that we can detect if it's working Triplestore: where is it and how do we query it?","title":"Objects in Fedora/RDF"},{"location":"user-documentation/getting-started-with-islandora-claw/","text":"Getting Started with Islandora CLAW How to Add a User Log in under admin credentials. Click the Manage tab from the top toolbar. Select People tab from the resulting menu. Enter all required fields, as indicated by red asterisks, in the Add User page. Click on the Create New Account button at the bottom of the page. To review/edit the permission for each role, click the Permissions tab in the set of tabs above the Add User button. How to Create a New User Role Click the Manage tab from the top toolbar. Select People tab from the resulting menu. Click the Roles tab in the set of tabs above the Add User button. Click the Add role button. Name the role in a way that it can be disambiguated from related activities or similar groups I.e. use the course code for a particular class of students working on a particular collection. Click the Save button. To edit the permissions for a role, click on the Edit dropdown menu to the right of the role and select Edit Permissions . Scroll down until you see the Node section of options, then look for the options that have an Islandora prefix. For example, Islandora Collection: Create new content . Administrative Tasks How to Create a Collection Click the Manage tab from the top toolbar. Select Content tab from the resulting menu. Click on Add content button. This will load the Add content page. Click on Islandora Collection link. This will load the Create Islandora Collection page. Fill out form fields. Enter all required fields, as indicated by red asterisks. Title Member of: Parent collection This field will auto-populate Description Revision log message Click the Save and publish button. How to Add an Item to a Collection Click the Manage tab from the top toolbar. Select Content tab from the resulting menu. Click on Add content button. This will load the Add content page. Click on Islandora Image link. This will load the Create Islandora Image page. Fill out form fields. Enter all required fields, as indicated by red asterisks. [NOTE: currently the generation of image derivatives is not supported.] Title Description Member of: Parent collection This field will auto-populate OBJ JP2 MEDIUM_SIZE [NOTE: for now, just use this option to upload an object] Click on \"Add new media\" button. You must create some alternative text for the object. Click \"Create Media\" button. TN (Thumbnail) Revision log message Click the Save and publish button. Once you upload a file, you can Edit or Remove it.","title":"Getting Started with Islandora CLAW [old]"},{"location":"user-documentation/getting-started-with-islandora-claw/#getting-started-with-islandora-claw","text":"","title":"Getting Started with Islandora CLAW"},{"location":"user-documentation/getting-started-with-islandora-claw/#how-to-add-a-user","text":"Log in under admin credentials. Click the Manage tab from the top toolbar. Select People tab from the resulting menu. Enter all required fields, as indicated by red asterisks, in the Add User page. Click on the Create New Account button at the bottom of the page. To review/edit the permission for each role, click the Permissions tab in the set of tabs above the Add User button.","title":"How to Add a User"},{"location":"user-documentation/getting-started-with-islandora-claw/#how-to-create-a-new-user-role","text":"Click the Manage tab from the top toolbar. Select People tab from the resulting menu. Click the Roles tab in the set of tabs above the Add User button. Click the Add role button. Name the role in a way that it can be disambiguated from related activities or similar groups I.e. use the course code for a particular class of students working on a particular collection. Click the Save button. To edit the permissions for a role, click on the Edit dropdown menu to the right of the role and select Edit Permissions . Scroll down until you see the Node section of options, then look for the options that have an Islandora prefix. For example, Islandora Collection: Create new content .","title":"How to Create a New User Role"},{"location":"user-documentation/getting-started-with-islandora-claw/#administrative-tasks","text":"","title":"Administrative Tasks"},{"location":"user-documentation/getting-started-with-islandora-claw/#how-to-create-a-collection","text":"Click the Manage tab from the top toolbar. Select Content tab from the resulting menu. Click on Add content button. This will load the Add content page. Click on Islandora Collection link. This will load the Create Islandora Collection page. Fill out form fields. Enter all required fields, as indicated by red asterisks. Title Member of: Parent collection This field will auto-populate Description Revision log message Click the Save and publish button.","title":"How to Create a Collection"},{"location":"user-documentation/getting-started-with-islandora-claw/#how-to-add-an-item-to-a-collection","text":"Click the Manage tab from the top toolbar. Select Content tab from the resulting menu. Click on Add content button. This will load the Add content page. Click on Islandora Image link. This will load the Create Islandora Image page. Fill out form fields. Enter all required fields, as indicated by red asterisks. [NOTE: currently the generation of image derivatives is not supported.] Title Description Member of: Parent collection This field will auto-populate OBJ JP2 MEDIUM_SIZE [NOTE: for now, just use this option to upload an object] Click on \"Add new media\" button. You must create some alternative text for the object. Click \"Create Media\" button. TN (Thumbnail) Revision log message Click the Save and publish button. Once you upload a file, you can Edit or Remove it.","title":"How to Add an Item to a Collection"},{"location":"user-documentation/intro-to-claw/","text":"Intro to Islandora CLAW Islandora CLAW is the project name for development of Islandora to work with Fedora 4. To fully understand Islandora CLAW, it is best to start by looking at its contrasts to the previous version of Islandora, known as 7.x-1.x. Islandora 7.x-1.x (with Fedora 3) Islandora 7.x-1.x is \"middleware\", it allows Drupal 7.x to talk to a Fedora 3 server instead of Drupal's database. This is sometimes expressed as a hamburger: Islandora CLAW (with Fedora 4) Islandora CLAW does more than simply replace that base layer with Fedora 4. It is a total re-architecting of the interaction between the various pieces, acting as middleware for not only Drupal 8.x and Fedora 4, but also Solr, Blazegraph, and any microservices added to the stack. Islandora CLAW achieves this by implementing a system of \"plumbing\" using Apache Camel to pass messages between all the different parts of the stack to keep them in sync with each other. Rather than a hamburger, Islandora CLAW is a chimera : This new structure has several advantages: Parcelling out the various services and dependencies allows for more horizontal scalability Changing the relationship between Drupal and Fedora allows for a more flexible approach to front-end management (i.e, it need not be Drupal) while also taking much greater advantage of features available from Drupal (i.e, Fedora objects are treated more like nodes, for the purposes of using Drupal contrib modules. Many Islandora 7.x-1.x modules are redundant in Islandora CLAW because they reproduce existing Drupal contrib modules that can be used out of the box in Islandora CLAW). Easier to keep up-to-date as not all pieces must be versioned together. Installations tools (Ansible, Docker, Vagrant) can automate uniting the pieces in a simple, clean installation process. Islandora has always been a turn-key repository solution, in the sense that it needs no customization once installed. With Islandora CLAW, that installation process is much smoother, with automated solutions that can be used in production. Ecosystem Alpaca The plumbing for Islandora's asynchronous workflows. It handles reading from and writing to message queues, with appropriate retry rules and error handling. Chullo A PHP client for Fedora 4 built using Guzzle and EasyRdf. CLAW A container with references to all of the other components that make up Islandora CLAW. Also contains documentation and project discussions. Crayfish Top level container for the various Islandora CLAW microservices. Islandora The Drupal modules associated with CLAW. Work is underway to have this as a project on drupal.org . Why Switch? Islandora 7.x-1.x is a tried and tested product with a vibrant user and contributor community and many tools and add-ons available to customize and expand its uses. Islandora CLAW is a major departure, representing a great deal of work both in development of the software, and to migrate and upgrade existing Islandora sites. So why make the change? Fedora The primary motive for moving to Islandora CLAW is to stay current with the repository layer of our ecosystem. Moving to Fedora 4 is vital for the long-term utility of the project. Fedora 3 is End-of-Life and has not been supported since 2015. This means that there will be no improvements, bug fixes, or security patches released for the software, drastically increasing individual maintenance needs for adopters. Fedora 3 experiences significant slowdown when repositories reach a large (millions) number of objects. Fedora 4 is much more scalable, and is specifically engineered to be horizontally scalable in ways that Fedora 3 cannot. Drupal Drupal 8 has been officially released and development has begun on Drupal 9. Official Drupal policy will see Drupal 7 become unsupported when Drupal 9 is released, putting it in the same precarious territory as Fedora 3. The initial phases of Islandora CLAW development worked with Drupal 7 as a front-end, but Islandora CLAW has been architected with a pivot to Drupal 8 in mind from its very inception. As of June, 2016, Islandora CLAW development has pivoted fully to Drupal 8, ensuring that when the Islandora Community is ready to make the move, there will be a version of Islandora that functions with the latest and best-supported versions of both our front-end and repository layers by pairing Drupal 8 with Fedora 4. Community-Driven Design The Islandora community has grown significantly since the project began, both in terms of users and contributors. For the first time, we are in a position to have a truly community-driven development process, in which any Islandora user can participate at whatever level fits their interests and abilities. Islandora CLAW has worked with the broader Islandora community to solicit use-cases, put forward prospectuses and project plans for review and editing, and has been developed with a mix of funding from Islandora Foundation members and volunteer developers working on sprints. Islandora CLAW is developed by the Islandora community, for the Islandora community. As a member of the Islandora community, you can help to steer the direction it takes. Linked Data Linked Data is a big concept. A definition by Tim Berners-Lee from 2006 articulates the basic idea in the context of the \"Semantic Web\": It is about making links, so that a person or machine can explore the web of data. With linked data, when you have some of it, you can find other, related, data. Like the web of hypertext, the web of data is constructed with documents on the web. However, unlike the web of hypertext, where links are relationships anchors in hypertext documents written in HTML, for data they links between arbitrary things described by RDF. The URIs identify any kind of object or concept. But for HTML or RDF, the same expectations apply to make the web grow: Use URIs as names for things Use HTTP URIs so that people can look up those names. When someone looks up a URI, provide useful information, using the standards (RDF*, SPARQL) Include links to other URIs. so that they can discover more things. LDP is an official W3C recommendation. According to the spec , Linked Data Platform (LDP) defines a set of rules for HTTP operations on web resources, some based on RDF, to provide an architecture for read-write Linked Data on the web. Put more simply: An LDP server is a web server that lets you manage relationships in RDF by creating URLs you can perform CRUD (Create Read Update Delete) operation on: http://my_url/some_resource http://my_url/some_resource/children http://my_url/some_resource/children/child_resource <> prefix:isChildOf <http://my_url/some_resource> An LDP server also lets you request the RDF graph for a resource with varying levels of additional information for discovery: The resource itself The resource plus child resources The resource plus all other resources that reference it (inbound references) The resource plus children plus inbound references Fedora 4 is an LDP implementation. It stores metadata using RDF (Resource Description Framework), a standard format for data interchange on the web. RDF data is formatted as triples, like so: <resource_uri> <predicate_uri> <object_uri> and can be exported in many different formats: JSON-LD RDF/XML Turtle N-Triples Working with RDF is not entirely new in the Islandora/Fedora context, as RELS-EXT and RELS-INT have always been RDF/XML. Related objects can be included in RDF, so it functions as a graph you can traverse in order to discover more information. Example: Dublin Core as XML and RDF using the dc namespace Dublin Core XML you store with the resource. <?xml version=\"1.0\"?> <metadata xmlns=\"http://example.org/myapp/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://example.org/myapp/ http://example.org/myapp/schema.xsd\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\"> <dc:title> Islandora </dc:title> <dc:description> Islandora is an open-source software framework designed to help institutions and organizations and their audiences collaboratively manage, and discover digital assets using a best-practices framework. </dc:description> </metadata> vs RDF (which is actually properties of the resource) @prefix dc: <http://purl.org/dc/elements/1.1/> . <http://islandora.ca/> dc:title \"Islandora\" ; dc:description \"Islandora is an open-source software framework designed to help institutions and organizations and their audiences collaboratively manage, and discover digital assets using a best-practices framework.\" . Interoperability Islandora CLAW works with the Portland Common Data Model , \"a flexible, extensible domain model that is intended to underlie a wide array of repository and DAMS applications.\" What does this mean in practice? Objects stored in Islandora CLAW will have a data model that can be recognized by Hydra and other custom Fedora 4 based repository heads, and vice versa. By working together with the Hydra and Fedora communities, we can leverage a broader community of developers, librarians, and other digital repository users to build better tools and share resources.","title":"Introduction to Islandora CLAW [old]"},{"location":"user-documentation/intro-to-claw/#intro-to-islandora-claw","text":"Islandora CLAW is the project name for development of Islandora to work with Fedora 4. To fully understand Islandora CLAW, it is best to start by looking at its contrasts to the previous version of Islandora, known as 7.x-1.x.","title":"Intro to Islandora CLAW"},{"location":"user-documentation/intro-to-claw/#islandora-7x-1x-with-fedora-3","text":"Islandora 7.x-1.x is \"middleware\", it allows Drupal 7.x to talk to a Fedora 3 server instead of Drupal's database. This is sometimes expressed as a hamburger:","title":"Islandora 7.x-1.x (with Fedora 3)"},{"location":"user-documentation/intro-to-claw/#islandora-claw-with-fedora-4","text":"Islandora CLAW does more than simply replace that base layer with Fedora 4. It is a total re-architecting of the interaction between the various pieces, acting as middleware for not only Drupal 8.x and Fedora 4, but also Solr, Blazegraph, and any microservices added to the stack. Islandora CLAW achieves this by implementing a system of \"plumbing\" using Apache Camel to pass messages between all the different parts of the stack to keep them in sync with each other. Rather than a hamburger, Islandora CLAW is a chimera : This new structure has several advantages: Parcelling out the various services and dependencies allows for more horizontal scalability Changing the relationship between Drupal and Fedora allows for a more flexible approach to front-end management (i.e, it need not be Drupal) while also taking much greater advantage of features available from Drupal (i.e, Fedora objects are treated more like nodes, for the purposes of using Drupal contrib modules. Many Islandora 7.x-1.x modules are redundant in Islandora CLAW because they reproduce existing Drupal contrib modules that can be used out of the box in Islandora CLAW). Easier to keep up-to-date as not all pieces must be versioned together. Installations tools (Ansible, Docker, Vagrant) can automate uniting the pieces in a simple, clean installation process. Islandora has always been a turn-key repository solution, in the sense that it needs no customization once installed. With Islandora CLAW, that installation process is much smoother, with automated solutions that can be used in production.","title":"Islandora CLAW (with Fedora 4)"},{"location":"user-documentation/intro-to-claw/#ecosystem","text":"","title":"Ecosystem"},{"location":"user-documentation/intro-to-claw/#alpaca","text":"The plumbing for Islandora's asynchronous workflows. It handles reading from and writing to message queues, with appropriate retry rules and error handling.","title":"Alpaca"},{"location":"user-documentation/intro-to-claw/#chullo","text":"A PHP client for Fedora 4 built using Guzzle and EasyRdf.","title":"Chullo"},{"location":"user-documentation/intro-to-claw/#claw","text":"A container with references to all of the other components that make up Islandora CLAW. Also contains documentation and project discussions.","title":"CLAW"},{"location":"user-documentation/intro-to-claw/#crayfish","text":"Top level container for the various Islandora CLAW microservices.","title":"Crayfish"},{"location":"user-documentation/intro-to-claw/#islandora","text":"The Drupal modules associated with CLAW. Work is underway to have this as a project on drupal.org .","title":"Islandora"},{"location":"user-documentation/intro-to-claw/#why-switch","text":"Islandora 7.x-1.x is a tried and tested product with a vibrant user and contributor community and many tools and add-ons available to customize and expand its uses. Islandora CLAW is a major departure, representing a great deal of work both in development of the software, and to migrate and upgrade existing Islandora sites. So why make the change?","title":"Why Switch?"},{"location":"user-documentation/intro-to-claw/#fedora","text":"The primary motive for moving to Islandora CLAW is to stay current with the repository layer of our ecosystem. Moving to Fedora 4 is vital for the long-term utility of the project. Fedora 3 is End-of-Life and has not been supported since 2015. This means that there will be no improvements, bug fixes, or security patches released for the software, drastically increasing individual maintenance needs for adopters. Fedora 3 experiences significant slowdown when repositories reach a large (millions) number of objects. Fedora 4 is much more scalable, and is specifically engineered to be horizontally scalable in ways that Fedora 3 cannot.","title":"Fedora"},{"location":"user-documentation/intro-to-claw/#drupal","text":"Drupal 8 has been officially released and development has begun on Drupal 9. Official Drupal policy will see Drupal 7 become unsupported when Drupal 9 is released, putting it in the same precarious territory as Fedora 3. The initial phases of Islandora CLAW development worked with Drupal 7 as a front-end, but Islandora CLAW has been architected with a pivot to Drupal 8 in mind from its very inception. As of June, 2016, Islandora CLAW development has pivoted fully to Drupal 8, ensuring that when the Islandora Community is ready to make the move, there will be a version of Islandora that functions with the latest and best-supported versions of both our front-end and repository layers by pairing Drupal 8 with Fedora 4.","title":"Drupal"},{"location":"user-documentation/intro-to-claw/#community-driven-design","text":"The Islandora community has grown significantly since the project began, both in terms of users and contributors. For the first time, we are in a position to have a truly community-driven development process, in which any Islandora user can participate at whatever level fits their interests and abilities. Islandora CLAW has worked with the broader Islandora community to solicit use-cases, put forward prospectuses and project plans for review and editing, and has been developed with a mix of funding from Islandora Foundation members and volunteer developers working on sprints. Islandora CLAW is developed by the Islandora community, for the Islandora community. As a member of the Islandora community, you can help to steer the direction it takes.","title":"Community-Driven Design"},{"location":"user-documentation/intro-to-claw/#linked-data","text":"Linked Data is a big concept. A definition by Tim Berners-Lee from 2006 articulates the basic idea in the context of the \"Semantic Web\": It is about making links, so that a person or machine can explore the web of data. With linked data, when you have some of it, you can find other, related, data. Like the web of hypertext, the web of data is constructed with documents on the web. However, unlike the web of hypertext, where links are relationships anchors in hypertext documents written in HTML, for data they links between arbitrary things described by RDF. The URIs identify any kind of object or concept. But for HTML or RDF, the same expectations apply to make the web grow: Use URIs as names for things Use HTTP URIs so that people can look up those names. When someone looks up a URI, provide useful information, using the standards (RDF*, SPARQL) Include links to other URIs. so that they can discover more things. LDP is an official W3C recommendation. According to the spec , Linked Data Platform (LDP) defines a set of rules for HTTP operations on web resources, some based on RDF, to provide an architecture for read-write Linked Data on the web. Put more simply: An LDP server is a web server that lets you manage relationships in RDF by creating URLs you can perform CRUD (Create Read Update Delete) operation on: http://my_url/some_resource http://my_url/some_resource/children http://my_url/some_resource/children/child_resource <> prefix:isChildOf <http://my_url/some_resource> An LDP server also lets you request the RDF graph for a resource with varying levels of additional information for discovery: The resource itself The resource plus child resources The resource plus all other resources that reference it (inbound references) The resource plus children plus inbound references Fedora 4 is an LDP implementation. It stores metadata using RDF (Resource Description Framework), a standard format for data interchange on the web. RDF data is formatted as triples, like so: <resource_uri> <predicate_uri> <object_uri> and can be exported in many different formats: JSON-LD RDF/XML Turtle N-Triples Working with RDF is not entirely new in the Islandora/Fedora context, as RELS-EXT and RELS-INT have always been RDF/XML. Related objects can be included in RDF, so it functions as a graph you can traverse in order to discover more information.","title":"Linked Data"},{"location":"user-documentation/intro-to-claw/#example-dublin-core-as-xml-and-rdf-using-the-dc-namespace","text":"Dublin Core XML you store with the resource. <?xml version=\"1.0\"?> <metadata xmlns=\"http://example.org/myapp/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://example.org/myapp/ http://example.org/myapp/schema.xsd\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\"> <dc:title> Islandora </dc:title> <dc:description> Islandora is an open-source software framework designed to help institutions and organizations and their audiences collaboratively manage, and discover digital assets using a best-practices framework. </dc:description> </metadata> vs RDF (which is actually properties of the resource) @prefix dc: <http://purl.org/dc/elements/1.1/> . <http://islandora.ca/> dc:title \"Islandora\" ; dc:description \"Islandora is an open-source software framework designed to help institutions and organizations and their audiences collaboratively manage, and discover digital assets using a best-practices framework.\" .","title":"Example: Dublin Core as XML and RDF using the dc namespace"},{"location":"user-documentation/intro-to-claw/#interoperability","text":"Islandora CLAW works with the Portland Common Data Model , \"a flexible, extensible domain model that is intended to underlie a wide array of repository and DAMS applications.\" What does this mean in practice? Objects stored in Islandora CLAW will have a data model that can be recognized by Hydra and other custom Fedora 4 based repository heads, and vice versa. By working together with the Hydra and Fedora communities, we can leverage a broader community of developers, librarians, and other digital repository users to build better tools and share resources.","title":"Interoperability"},{"location":"user-documentation/intro-to-ld-for-claw/","text":"Introduction to Linked Data for CLAW The purpose of this page is to provide a guided reading list to anyone who wants to get up to speed on the basics of linked data within the Islandora community. Those who make their way through the readings will be able to talk competently about linked data and better understand the design decisions made in Islandora CLAW. The list starts with the fundamentals of linked data (RDF, SPARQL, serializations and ontologies) and moves toward more advanced topics specific to the use cases of a Fedora 4 based digital repository system. Basics of Linked Data This section seeks to give the reader a foundational understanding of what linked data is, why it is useful, and a very superficial understanding of how it works. Tim Berners-Lee\u2019s description of Linked Data Manu Sporny's \"What is Linked Data?\" YouTube Video Wikipedia article on Linked Data Wikipedia article on Semantic Web Wikipedia article on URIs Wikipedia article on the W3C W3C\u2019s description of Linked Data W3C\u2019s Linked Data Glossary W3C\u2019s Architecture of the World Wide Web Understanding RDF This section is all about RDF, the Resource Description Framework, which defines the way linked data is structured. Wikipedia article on RDF D-Lib\u2019s Intro to RDF W3C\u2019s RDF 1.1 Primer W3C\u2019s RDF 1.1 Concepts Querying Linked Data with SPARQL This section takes a look at SPARQL, the query language that allows you to ask linked data very specific questions. The queryable nature of linked data is one of the things that makes it so special. Try some SPARQL queries on DBpedia's endpoint to get some hands-on experience. Wikipedia article on SPARQL W3C\u2019s SPARQL 1.1 Overview W3C\u2019s SPARQL 1.1 Query Language DBpedia's SPARQL Endpoint RDF Serialization Formats RDF data can be translated into many different formats. RDF/XML is the original way that RDF data was shared, but there are much more human-friendly serialization formats like Turtle which is great for beginners. JSON-LD is the easiest format for applications to use, and is the serialization format that CLAW uses internally. Make sure to check out the JSON-LD Playground for an interactive learning experience. Wikipedia article on Serialization W3C\u2019s RDF/XML Syntax Specification W3C\u2019s RDF 1.1 Turtle W3C\u2019s JSON-LD 1.0 JSON-LD Website JSON-LD Playground Ontology & Vocabulary Basics Ontologies & vocabularies are created by communities of people to describe things, and once created, anyone can use an ontology or vocabulary to describe their resources. This section goes over some of the more popular ontologies & vocabularies in use. Wikipedia article on Ontologies W3C\u2019s description of Ontologies/Vocabularies (sameish thing) Wikipedia article on Friend of a Friend (FOAF) ontology FOAF 0.99 Vocabulary Specification Socially Interconnected Online Communities Ontology (SIOC) Dublin Core in RDF Building Ontologies One isn't limited to the ontologies & vocabularies that already exist in the world, anyone is free to create their own. This section goes over ontologies that exist to help those trying to create their own ontologies. Wikipedia article on RDF Schema (RDFS) W3C\u2019s RDF Schema (RDFS) 1.1 Wikipedia article on Simple Knowledge Organization System (SKOS) ALA\u2019s SKOS: A Guide for Information Professionals Wikipedia article on Web Ontology Language (OWL) W3C\u2019s OWL 2 Primer W3C\u2019s OWL 2 Quick Reference Repository-Specific Ontologies Most ontologies are very specific to certain use cases, and digital repository systems are no different. This section covers ontologies that are of specific interest to users of CLAW, or any Fedora 4 based digital repository system. MODS RDF Namespace Document MODS RDF Ontology Primer MODS RDF Ontology Primer 2: MODS XML to RDF Conversion PREMIS RDF Namespace Document Linked Data Platform (LDP) 1.0 Primer LDP 1.0 Specification Portland Common Data Model (PCDM) wiki) PCDM ontologies list PCDM Models ontology (defines Collections, Objects & Files) Fedora ontologies CLAWntology","title":"Introduction to Linked Data for CLAW [old]"},{"location":"user-documentation/intro-to-ld-for-claw/#introduction-to-linked-data-for-claw","text":"The purpose of this page is to provide a guided reading list to anyone who wants to get up to speed on the basics of linked data within the Islandora community. Those who make their way through the readings will be able to talk competently about linked data and better understand the design decisions made in Islandora CLAW. The list starts with the fundamentals of linked data (RDF, SPARQL, serializations and ontologies) and moves toward more advanced topics specific to the use cases of a Fedora 4 based digital repository system.","title":"Introduction to Linked Data for CLAW"},{"location":"user-documentation/intro-to-ld-for-claw/#basics-of-linked-data","text":"This section seeks to give the reader a foundational understanding of what linked data is, why it is useful, and a very superficial understanding of how it works. Tim Berners-Lee\u2019s description of Linked Data Manu Sporny's \"What is Linked Data?\" YouTube Video Wikipedia article on Linked Data Wikipedia article on Semantic Web Wikipedia article on URIs Wikipedia article on the W3C W3C\u2019s description of Linked Data W3C\u2019s Linked Data Glossary W3C\u2019s Architecture of the World Wide Web","title":"Basics of Linked Data"},{"location":"user-documentation/intro-to-ld-for-claw/#understanding-rdf","text":"This section is all about RDF, the Resource Description Framework, which defines the way linked data is structured. Wikipedia article on RDF D-Lib\u2019s Intro to RDF W3C\u2019s RDF 1.1 Primer W3C\u2019s RDF 1.1 Concepts","title":"Understanding RDF"},{"location":"user-documentation/intro-to-ld-for-claw/#querying-linked-data-with-sparql","text":"This section takes a look at SPARQL, the query language that allows you to ask linked data very specific questions. The queryable nature of linked data is one of the things that makes it so special. Try some SPARQL queries on DBpedia's endpoint to get some hands-on experience. Wikipedia article on SPARQL W3C\u2019s SPARQL 1.1 Overview W3C\u2019s SPARQL 1.1 Query Language DBpedia's SPARQL Endpoint","title":"Querying Linked Data with SPARQL"},{"location":"user-documentation/intro-to-ld-for-claw/#rdf-serialization-formats","text":"RDF data can be translated into many different formats. RDF/XML is the original way that RDF data was shared, but there are much more human-friendly serialization formats like Turtle which is great for beginners. JSON-LD is the easiest format for applications to use, and is the serialization format that CLAW uses internally. Make sure to check out the JSON-LD Playground for an interactive learning experience. Wikipedia article on Serialization W3C\u2019s RDF/XML Syntax Specification W3C\u2019s RDF 1.1 Turtle W3C\u2019s JSON-LD 1.0 JSON-LD Website JSON-LD Playground","title":"RDF Serialization Formats"},{"location":"user-documentation/intro-to-ld-for-claw/#ontology-vocabulary-basics","text":"Ontologies & vocabularies are created by communities of people to describe things, and once created, anyone can use an ontology or vocabulary to describe their resources. This section goes over some of the more popular ontologies & vocabularies in use. Wikipedia article on Ontologies W3C\u2019s description of Ontologies/Vocabularies (sameish thing) Wikipedia article on Friend of a Friend (FOAF) ontology FOAF 0.99 Vocabulary Specification Socially Interconnected Online Communities Ontology (SIOC) Dublin Core in RDF","title":"Ontology &amp; Vocabulary Basics"},{"location":"user-documentation/intro-to-ld-for-claw/#building-ontologies","text":"One isn't limited to the ontologies & vocabularies that already exist in the world, anyone is free to create their own. This section goes over ontologies that exist to help those trying to create their own ontologies. Wikipedia article on RDF Schema (RDFS) W3C\u2019s RDF Schema (RDFS) 1.1 Wikipedia article on Simple Knowledge Organization System (SKOS) ALA\u2019s SKOS: A Guide for Information Professionals Wikipedia article on Web Ontology Language (OWL) W3C\u2019s OWL 2 Primer W3C\u2019s OWL 2 Quick Reference","title":"Building Ontologies"},{"location":"user-documentation/intro-to-ld-for-claw/#repository-specific-ontologies","text":"Most ontologies are very specific to certain use cases, and digital repository systems are no different. This section covers ontologies that are of specific interest to users of CLAW, or any Fedora 4 based digital repository system. MODS RDF Namespace Document MODS RDF Ontology Primer MODS RDF Ontology Primer 2: MODS XML to RDF Conversion PREMIS RDF Namespace Document Linked Data Platform (LDP) 1.0 Primer LDP 1.0 Specification Portland Common Data Model (PCDM) wiki) PCDM ontologies list PCDM Models ontology (defines Collections, Objects & Files) Fedora ontologies CLAWntology","title":"Repository-Specific Ontologies"},{"location":"user-documentation/metadata/","text":"Metadata are stored in Fields Drupal 8 terminology In Drupal 8, Fields can be attached to entity sub-types (e.g. Content types, Vocabularies) or entities (Users, Files). For more on Fields, see \"2.3 Content Entities and Fields\" and \"6.3 Adding Basic Fields to a Content Type\" in the Official Guide. Todo In CLAW, metadata associated with an object are stored natively in Drupal, in fields . Islandora maps fields can be mapped to RDF (and must be if you want them to get into Fedora). It is recommended to store descriptive metadata at the Node level, and technical metadata at the Media level. Everything except \"Title\" is configurable, and you can edit it however you want Islandora Demo provides an example of this In Islandora Demo, we reserve Nodes for \"Islandora Objects\", the things that we associate with some file that requires preservation. We use Taxonomy terms for modelling simple or complex people, places, subjects, and organizations. How do I configure what fields exist? (go to Manage > Structure > Content Types and click Manage fields) How do I configure what fields show up on the display? (Go to Manage > Structure > Content Types and click Manage Display) How do I configure what display mode gets selected? (Rules/Context and taxonomy terms? Views?) How do I configure what fields show up in the edit form? (Go to Manage > Structure > Content Types and click \"Manage Form Display\") How do I configure what form mode gets displayed? (??) We provide some cool fields that extend Drupal's built-in field types (in what module?) ETDF Date Typed Relation Fields All normal field types are available to use for Islandora, including text, textarea, * do we need to warn against using HTML in textareas, in cases where it will be exported to Fedora? Custom field: EDTF Date Custom field: Typed Relation Mappings Fields get mapped to RDF in (a yml file). See the RDF and Fedora section. Islandora demo TODO: document the fields and display modes in Islandora Demo. 7.x Migration Note What about my XML? In 7.x, metadata were (usually) stored within XML datastreams such as MODS or DC. In CLAW we suggest breaking out individual metadata elements into fields attached to the node (or to an associated entity, if appropriate). The Metadata Interest Group is developing a default mapping which will provide a basic, yet customizable, transform between MODS metadata and Drupal fields in Islandora Demo. It is still possible to attach an XML file to a CLAW object as a Media (see Datastreams), however there is no mechanism in CLAW for editing XML in a user-friendly way.","title":"Metadata are Fields"},{"location":"user-documentation/metadata/#metadata-are-stored-in-fields","text":"Drupal 8 terminology In Drupal 8, Fields can be attached to entity sub-types (e.g. Content types, Vocabularies) or entities (Users, Files). For more on Fields, see \"2.3 Content Entities and Fields\" and \"6.3 Adding Basic Fields to a Content Type\" in the Official Guide. Todo In CLAW, metadata associated with an object are stored natively in Drupal, in fields . Islandora maps fields can be mapped to RDF (and must be if you want them to get into Fedora). It is recommended to store descriptive metadata at the Node level, and technical metadata at the Media level. Everything except \"Title\" is configurable, and you can edit it however you want Islandora Demo provides an example of this In Islandora Demo, we reserve Nodes for \"Islandora Objects\", the things that we associate with some file that requires preservation. We use Taxonomy terms for modelling simple or complex people, places, subjects, and organizations. How do I configure what fields exist? (go to Manage > Structure > Content Types and click Manage fields) How do I configure what fields show up on the display? (Go to Manage > Structure > Content Types and click Manage Display) How do I configure what display mode gets selected? (Rules/Context and taxonomy terms? Views?) How do I configure what fields show up in the edit form? (Go to Manage > Structure > Content Types and click \"Manage Form Display\") How do I configure what form mode gets displayed? (??) We provide some cool fields that extend Drupal's built-in field types (in what module?) ETDF Date Typed Relation","title":"Metadata are stored in Fields"},{"location":"user-documentation/metadata/#fields","text":"All normal field types are available to use for Islandora, including text, textarea, * do we need to warn against using HTML in textareas, in cases where it will be exported to Fedora?","title":"Fields"},{"location":"user-documentation/metadata/#custom-field-edtf-date","text":"","title":"Custom field: EDTF Date"},{"location":"user-documentation/metadata/#custom-field-typed-relation","text":"","title":"Custom field: Typed Relation"},{"location":"user-documentation/metadata/#mappings","text":"Fields get mapped to RDF in (a yml file). See the RDF and Fedora section.","title":"Mappings"},{"location":"user-documentation/metadata/#islandora-demo","text":"TODO: document the fields and display modes in Islandora Demo. 7.x Migration Note","title":"Islandora demo"},{"location":"user-documentation/metadata/#what-about-my-xml","text":"In 7.x, metadata were (usually) stored within XML datastreams such as MODS or DC. In CLAW we suggest breaking out individual metadata elements into fields attached to the node (or to an associated entity, if appropriate). The Metadata Interest Group is developing a default mapping which will provide a basic, yet customizable, transform between MODS metadata and Drupal fields in Islandora Demo. It is still possible to attach an XML file to a CLAW object as a Media (see Datastreams), however there is no mechanism in CLAW for editing XML in a user-friendly way.","title":"What about my XML?"},{"location":"user-documentation/objects/","text":"Islandora has the concept of an \"Object\", a bundle of files and their associated metadata. It's a remnant of the Islandora 7.x model, which was grounded in the Fedora 3.x object model, but we haven't entirely dropped it because our community still relies on this concept. However, in CLAW, an object is distributed. In Drupal it is distributed over a graph of related Drupal Entities, and in Fedora it is distributed over a number of Fedora \"objects\" including RDF and non-RDF sources. todo: insert a diagram. What is an Islandora object? Todo It\u2019s a node, with maybe one or more medias and files attached (see \u201cDatastreams are Media\u201d section) The node has metadata in its fields (See \"Metadata are Fields\" section.) It has a URI, and a JSON-LD view in Drupal It goes into Fedora. (See todo make \"In Fedora\" section) By Drupal default, all published nodes are public, so see todo make Access Control section. As a Drupal node, it\u2019s available to Views and gets indexed in Solr. We suggest using a taxonomy term on the node to control elements of its display or editing, e.g. in Islandora Demo there is a taxonomy term that sets the type: Audio, Binary, Collection, Image, and Video How do I make an Islandora object? (Make a node, then add a Media) 7.x migration note Where are my Solution Packs? If you are familiar with Islandora 7.x, a solution pack is a bundle representing objects of a certain 'type', that are associated with metadata forms, an ingest workflow that allows specific filetypes, derivative settings based on the uploaded object, an optional content viewer, and the look and feel of an object's page including what metadata to display to the user. In CLAW, all of these can be configured independently, often based on tags (taxonomy terms) attached to the nodes or media objects. You may, if desired, create separate bundles (content types) analogous to the Content Models in 7.x, however that is not necessary. Using the Features module, it is possible to bundle the configuration of a content type, as well as the configuration around it, as a Feature so that it can be exported and deployed on other sites. An example of this is the Islandora Demo module, which actually bundles several content \"types\" - Audio, Binary, Collection, Image, and Video. todo: see more at islandora demo?","title":"Objects are Nodes"},{"location":"user-documentation/objects/#what-is-an-islandora-object","text":"Todo It\u2019s a node, with maybe one or more medias and files attached (see \u201cDatastreams are Media\u201d section) The node has metadata in its fields (See \"Metadata are Fields\" section.) It has a URI, and a JSON-LD view in Drupal It goes into Fedora. (See todo make \"In Fedora\" section) By Drupal default, all published nodes are public, so see todo make Access Control section. As a Drupal node, it\u2019s available to Views and gets indexed in Solr. We suggest using a taxonomy term on the node to control elements of its display or editing, e.g. in Islandora Demo there is a taxonomy term that sets the type: Audio, Binary, Collection, Image, and Video How do I make an Islandora object? (Make a node, then add a Media) 7.x migration note","title":"What is an Islandora object?"},{"location":"user-documentation/objects/#where-are-my-solution-packs","text":"If you are familiar with Islandora 7.x, a solution pack is a bundle representing objects of a certain 'type', that are associated with metadata forms, an ingest workflow that allows specific filetypes, derivative settings based on the uploaded object, an optional content viewer, and the look and feel of an object's page including what metadata to display to the user. In CLAW, all of these can be configured independently, often based on tags (taxonomy terms) attached to the nodes or media objects. You may, if desired, create separate bundles (content types) analogous to the Content Models in 7.x, however that is not necessary. Using the Features module, it is possible to bundle the configuration of a content type, as well as the configuration around it, as a Feature so that it can be exported and deployed on other sites. An example of this is the Islandora Demo module, which actually bundles several content \"types\" - Audio, Binary, Collection, Image, and Video. todo: see more at islandora demo?","title":"Where are my Solution Packs?"},{"location":"user-documentation/solr/","text":"","title":"Solr"},{"location":"user-documentation/user-intro/","text":"Introduction to Islandora CLAW This User Documentation section is aimed at site admins and repository managers who need to understand and configure their Islandora. It will go in depth on how Islandora allows you to use the various features of Drupal to construct and display repository items. Islandora, like Drupal, provides tools to create a site, but does not force you to conform to any specific site structure, organization, or navigation. There is a hope that we can provide something useable out of the box, while also allowing the full suite of Drupal configuration options. This out-of-the-box configuration is the Islandora Demo module. It is recommended to be familiar with the basics of Drupal, including content types, fields, users, and views. The Official Drupal 8 User Guide and the Community Guide to Drupal 8 are a good place to start. Architecture Todo Islandora is middleware The Chimera diagram Reference to dev section for more info.","title":"Intro"},{"location":"user-documentation/user-intro/#introduction-to-islandora-claw","text":"This User Documentation section is aimed at site admins and repository managers who need to understand and configure their Islandora. It will go in depth on how Islandora allows you to use the various features of Drupal to construct and display repository items. Islandora, like Drupal, provides tools to create a site, but does not force you to conform to any specific site structure, organization, or navigation. There is a hope that we can provide something useable out of the box, while also allowing the full suite of Drupal configuration options. This out-of-the-box configuration is the Islandora Demo module. It is recommended to be familiar with the basics of Drupal, including content types, fields, users, and views. The Official Drupal 8 User Guide and the Community Guide to Drupal 8 are a good place to start.","title":"Introduction to Islandora CLAW"},{"location":"user-documentation/user-intro/#architecture","text":"Todo Islandora is middleware The Chimera diagram Reference to dev section for more info.","title":"Architecture"}]}