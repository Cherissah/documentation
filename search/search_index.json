{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Islandora is an open-source repository framework, that combines a Drupal front-end with a Fedora repository. It is a solution for institutions who want an extremely flexible and configurable preservation repository without creating a lot of custom code. Islandora 8 integrates Drupal (currently, Drupal 8) and Duraspace's Fedora Repository project (currently, Fedora 5). Islandora 8 allows you to create nodes, media, files, and taxonomy terms in Drupal, which are converted to RDF and pushed into a Fedora repository. It also allows you to connect repository content with microservices, small webapps that transform files to other types for display or preservation, or to extract additional metadata.","title":"Summary"},{"location":"installation/","text":"Islandora 8 is installed through an Ansible Playbook called claw-playbook . Requirements Download and install the following: Virtual Box Vagrant (version 2.0 or required) Use your package manager of choice to get Git and Ansible if you don't have them already. For example, if you're using Ubuntu and apt $ sudo apt-get install software-properties-common $ sudo apt-add-repository ppa:ansible/ansible $ sudo apt-get update $ sudo apt-get install git ansible If you want to provision a CENTOS 7 environment, you'll also need to install the vbguest plugin for Vagrant $ vagrant plugin install vagrant-vbguest Installing a local development environment Once you've installed all the requirements, you can spin up a local development environment with $ git clone https://github.com/Islandora-Devops/claw-playbook $ cd claw-playbook $ vagrant up By default, this provisions an Ubuntu 18.04 environment. If you would prefer to use CENTOS 7 instead, set the ISLANDORA_DISTRO environment variable to centos/7 . To prevent having to do this every time you open a new shell, add the following command to your .bashrc file $ export ISLANDORA_DISTRO= centos/7 Installing a remote environment If you want to provision a remote server using the playbook, there's a handful of configuration entries you need to update to include your usernames/passwords and IP addresses. You'll also want Apache to serve at port 80 as opposed to 8000, which we use for development purposes. To start, take the inventory for the vagrant development environment and copy it. Be sure to give it an appropriate name. Here we're using example . $ git clone https://github.com/Islandora-Devops/claw-playbook $ cd claw-playbook $ cp -r inventory/vagrant inventory/example Then you can update the following entries in the following files using your own information. If an entry does not exist in a file, just add it. Ansible will then use the value you provide instead of relying on its defaults. We're using changeme to represent passwords and assume the server will be available at example.org , but you'll want to provide your own values. group_vars/all/passwords.yml drupal_db_password: changeme drupal_account_pass: changeme islandora_db_root_password: changeme islandora_tomcat_password: changeme islandora_syn_token: changeme cantaloupe_admin_password: changeme group_vars/crayfish.yml crayfish_gemini_fedora_base_url: http://example.org:8080/fcrepo/rest crayfish_houdini_fedora_base_url: http://example.org:8080/fcrepo/rest crayfish_hypercube_fedora_base_url: http://example.org:8080/fcrepo/rest crayfish_milliner_fedora_base_url: http://example.org:8080/fcrepo/rest crayfish_milliner_drupal_base_url: http://example.org crayfish_milliner_gemini_base_url: http://example.org/gemini crayfish_homarus_fedora_base_url: http://example.org:8080/fcrepo/rest crayfish_recast_fedora_base_url: http://example.org:8080/fcrepo/rest crayfish_recast_drupal_base_url: http://example.org crayfish_recast_gemini_base_url: http://example.org/gemini group_vars/karaf.yml Unfortunately, you have to copy/paste this whole chunk into the yml, even though you're only updating the URLs and the token.value entry. alpaca_settings: - pid: ca.islandora.alpaca.http.client settings: token.value: changeme - pid: org.fcrepo.camel.indexing.triplestore settings: input.stream: activemq:topic:fedora triplestore.reindex.stream: activemq:queue:triplestore.reindex triplestore.baseUrl: http://example.org:8080/bigdata/namespace/islandora/sparql - pid: ca.islandora.alpaca.indexing.triplestore settings: error.maxRedeliveries: 10 index.stream: activemq:queue:islandora-indexing-triplestore-index delete.stream: activemq:queue:islandora-indexing-triplestore-delete triplestore.baseUrl: http://example.org:8080/bigdata/namespace/islandora/sparql - pid: ca.islandora.alpaca.indexing.fcrepo settings: error.maxRedeliveries: 5 node.stream: activemq:queue:islandora-indexing-fcrepo-content node.delete.stream: activemq:queue:islandora-indexing-fcrepo-delete media.stream: activemq:queue:islandora-indexing-fcrepo-media file.stream: activemq:queue:islandora-indexing-fcrepo-file file.delete.stream: activemq:queue:islandora-indexing-fcrepo-file-delete milliner.baseUrl: http://example.org/milliner/ gemini.baseUrl: http://example.org/gemini/ alpaca_blueprint_settings: - pid: ca.islandora.alpaca.connector.houdini in_stream: activemq:queue:islandora-connector-houdini derivative_service_url: http://example.org/houdini/convert error_max_redeliveries: 5 camel_context_id: IslandoraConnectorHoudini - pid: ca.islandora.alpaca.connector.homarus in_stream: activemq:queue:islandora-connector-homarus derivative_service_url: http://example.org/homarus/convert error_max_redeliveries: 5 camel_context_id: IslandoraConnectorHomarus group_vars/tomcat.yml fcrepo_allowed_external_content: - http://example.org/ cantaloupe_HttpResolver_BasicLookupStrategy_url_prefix: http://example.org/ group_vars/webserver/apache.yml Here's where you set the port to 80 instead of 8000. apache_listen_port: 80 group_vars/webserver/drupal.yml drupal_trusted_hosts: - ^localhost$ - example.org fedora_base_url: http://example.org:8080/fcrepo/rest/ group_vars/webserver/general.yml openseadragon_iiiv_server: http://example.org:8080/cantaloupe/iiif/2 matomo_site_url: http://example.org hosts You'll need the ssh particulars for logging into your server in the hosts file. This example is set up to login as root using an ssh key. You'll need to get the details for logging into your remote server from your hosting provider (AWS, Digital Ocean, etc...) or your systems administrator if you're running the server in-house. See this page for more details about what you can put into a host file default ansible_ssh_host=example.org ansible_ssh_user=root ansible_ssh_private_key_file='/home/username/.ssh/id_rsa' Running the remote installer First, you'll want to get the ansible roles that are needed for the version of Islandora you are trying to install. This can be done with $ ansible-galaxy install -r requirements.yml Then, depending on the operating system installed on the remote environment, you can use the following command for Ubuntu 16.04 $ ansible-playbook -i inventory/production playbook.yml -e islandora_distro=ubuntu/xenial64 or for CENTOS 7 $ ansible-playbook -i inventory/production playbook.yml -e islandora_distro=centos/7 Troubleshooting Ansible caches the code used to provision the environment, so if you've already installed once you may not be getting the latest version of things even if you've git pull 'd the latest playbook. The code is stored in roles/external , so if you want to clear it out you can run $ rm -rf roles/external If you run into any issues installing the environment, do not hesitate to email the mailing list to ask for help. If you think you've stumbled across a bug in the installer, please create an issue in the Islandora 8 issue queue and give it an ansible tag.","title":"Installation"},{"location":"installation/#requirements","text":"Download and install the following: Virtual Box Vagrant (version 2.0 or required) Use your package manager of choice to get Git and Ansible if you don't have them already. For example, if you're using Ubuntu and apt $ sudo apt-get install software-properties-common $ sudo apt-add-repository ppa:ansible/ansible $ sudo apt-get update $ sudo apt-get install git ansible If you want to provision a CENTOS 7 environment, you'll also need to install the vbguest plugin for Vagrant $ vagrant plugin install vagrant-vbguest","title":"Requirements"},{"location":"installation/#installing-a-local-development-environment","text":"Once you've installed all the requirements, you can spin up a local development environment with $ git clone https://github.com/Islandora-Devops/claw-playbook $ cd claw-playbook $ vagrant up By default, this provisions an Ubuntu 18.04 environment. If you would prefer to use CENTOS 7 instead, set the ISLANDORA_DISTRO environment variable to centos/7 . To prevent having to do this every time you open a new shell, add the following command to your .bashrc file $ export ISLANDORA_DISTRO= centos/7","title":"Installing a local development environment"},{"location":"installation/#installing-a-remote-environment","text":"If you want to provision a remote server using the playbook, there's a handful of configuration entries you need to update to include your usernames/passwords and IP addresses. You'll also want Apache to serve at port 80 as opposed to 8000, which we use for development purposes. To start, take the inventory for the vagrant development environment and copy it. Be sure to give it an appropriate name. Here we're using example . $ git clone https://github.com/Islandora-Devops/claw-playbook $ cd claw-playbook $ cp -r inventory/vagrant inventory/example Then you can update the following entries in the following files using your own information. If an entry does not exist in a file, just add it. Ansible will then use the value you provide instead of relying on its defaults. We're using changeme to represent passwords and assume the server will be available at example.org , but you'll want to provide your own values.","title":"Installing a remote environment"},{"location":"installation/#group_varsallpasswordsyml","text":"drupal_db_password: changeme drupal_account_pass: changeme islandora_db_root_password: changeme islandora_tomcat_password: changeme islandora_syn_token: changeme cantaloupe_admin_password: changeme","title":"group_vars/all/passwords.yml"},{"location":"installation/#group_varscrayfishyml","text":"crayfish_gemini_fedora_base_url: http://example.org:8080/fcrepo/rest crayfish_houdini_fedora_base_url: http://example.org:8080/fcrepo/rest crayfish_hypercube_fedora_base_url: http://example.org:8080/fcrepo/rest crayfish_milliner_fedora_base_url: http://example.org:8080/fcrepo/rest crayfish_milliner_drupal_base_url: http://example.org crayfish_milliner_gemini_base_url: http://example.org/gemini crayfish_homarus_fedora_base_url: http://example.org:8080/fcrepo/rest crayfish_recast_fedora_base_url: http://example.org:8080/fcrepo/rest crayfish_recast_drupal_base_url: http://example.org crayfish_recast_gemini_base_url: http://example.org/gemini","title":"group_vars/crayfish.yml"},{"location":"installation/#group_varskarafyml","text":"Unfortunately, you have to copy/paste this whole chunk into the yml, even though you're only updating the URLs and the token.value entry. alpaca_settings: - pid: ca.islandora.alpaca.http.client settings: token.value: changeme - pid: org.fcrepo.camel.indexing.triplestore settings: input.stream: activemq:topic:fedora triplestore.reindex.stream: activemq:queue:triplestore.reindex triplestore.baseUrl: http://example.org:8080/bigdata/namespace/islandora/sparql - pid: ca.islandora.alpaca.indexing.triplestore settings: error.maxRedeliveries: 10 index.stream: activemq:queue:islandora-indexing-triplestore-index delete.stream: activemq:queue:islandora-indexing-triplestore-delete triplestore.baseUrl: http://example.org:8080/bigdata/namespace/islandora/sparql - pid: ca.islandora.alpaca.indexing.fcrepo settings: error.maxRedeliveries: 5 node.stream: activemq:queue:islandora-indexing-fcrepo-content node.delete.stream: activemq:queue:islandora-indexing-fcrepo-delete media.stream: activemq:queue:islandora-indexing-fcrepo-media file.stream: activemq:queue:islandora-indexing-fcrepo-file file.delete.stream: activemq:queue:islandora-indexing-fcrepo-file-delete milliner.baseUrl: http://example.org/milliner/ gemini.baseUrl: http://example.org/gemini/ alpaca_blueprint_settings: - pid: ca.islandora.alpaca.connector.houdini in_stream: activemq:queue:islandora-connector-houdini derivative_service_url: http://example.org/houdini/convert error_max_redeliveries: 5 camel_context_id: IslandoraConnectorHoudini - pid: ca.islandora.alpaca.connector.homarus in_stream: activemq:queue:islandora-connector-homarus derivative_service_url: http://example.org/homarus/convert error_max_redeliveries: 5 camel_context_id: IslandoraConnectorHomarus","title":"group_vars/karaf.yml"},{"location":"installation/#group_varstomcatyml","text":"fcrepo_allowed_external_content: - http://example.org/ cantaloupe_HttpResolver_BasicLookupStrategy_url_prefix: http://example.org/","title":"group_vars/tomcat.yml"},{"location":"installation/#group_varswebserverapacheyml","text":"Here's where you set the port to 80 instead of 8000. apache_listen_port: 80","title":"group_vars/webserver/apache.yml"},{"location":"installation/#group_varswebserverdrupalyml","text":"drupal_trusted_hosts: - ^localhost$ - example.org fedora_base_url: http://example.org:8080/fcrepo/rest/","title":"group_vars/webserver/drupal.yml"},{"location":"installation/#group_varswebservergeneralyml","text":"openseadragon_iiiv_server: http://example.org:8080/cantaloupe/iiif/2 matomo_site_url: http://example.org","title":"group_vars/webserver/general.yml"},{"location":"installation/#hosts","text":"You'll need the ssh particulars for logging into your server in the hosts file. This example is set up to login as root using an ssh key. You'll need to get the details for logging into your remote server from your hosting provider (AWS, Digital Ocean, etc...) or your systems administrator if you're running the server in-house. See this page for more details about what you can put into a host file default ansible_ssh_host=example.org ansible_ssh_user=root ansible_ssh_private_key_file='/home/username/.ssh/id_rsa'","title":"hosts"},{"location":"installation/#running-the-remote-installer","text":"First, you'll want to get the ansible roles that are needed for the version of Islandora you are trying to install. This can be done with $ ansible-galaxy install -r requirements.yml Then, depending on the operating system installed on the remote environment, you can use the following command for Ubuntu 16.04 $ ansible-playbook -i inventory/production playbook.yml -e islandora_distro=ubuntu/xenial64 or for CENTOS 7 $ ansible-playbook -i inventory/production playbook.yml -e islandora_distro=centos/7","title":"Running the remote installer"},{"location":"installation/#troubleshooting","text":"Ansible caches the code used to provision the environment, so if you've already installed once you may not be getting the latest version of things even if you've git pull 'd the latest playbook. The code is stored in roles/external , so if you want to clear it out you can run $ rm -rf roles/external If you run into any issues installing the environment, do not hesitate to email the mailing list to ask for help. If you think you've stumbled across a bug in the installer, please create an issue in the Islandora 8 issue queue and give it an ansible tag.","title":"Troubleshooting"},{"location":"alpaca/alpaca-technical-stack/","text":"Alpaca Technical Stack Alpaca contains several OSGI modules or bundles. They are grouped together as features and deployed to Karaf container. OSGi OSGi is a specification to develop and deploy modular Java applications. It allows for dynamic deployment (hot deployment) and dependency management. The base unit of resources is called a bundle. Bundle is similar to a jar file, with additional information to be processed as an OSGi component. Several bundles can be grouped together into a Feature and installed together. OSGi bundles can be run on containers implementing the OSGi specification. Apache Karaf is one such container Karaf Apache Karaf is a container that can be used to deploy an array of applications such servlets, Apache Camel components, jars etc. Karaf - Bundle - Hello World Download a bundle to the CLAW vagrant (ex to /home/ubuntu directory). An example hello world bundle is here . In Islandora CLAW vagrant, you can login to Karaf using ssh. The password is karaf. You can also use the client here: /opt/karaf/bin/client . Karaf client allows the use of Linux commands such as grep in addition to Karaf commands. ssh -p 8101 karaf@localhost Install the bundle: karaf@root() bundle karaf@root(bundle) install file:///home/ubuntu/helloworld-1.0.0.jar Bundle ID: 242 The installation will return a bundle id. You can issue the list command to verify that bundle is on the list. Initially it will have Installed status. As per OSGi specification, before a bundle can be started, it has to be Resolved. To resolve, issue the following command. karaf@root(bundle) resolve 242 You can start and stop the bundle as below. karaf@root(bundle) start 242 Hello World! karaf@root(bundle) stop 242 Goodbye World! karaf@root(bundle) Karaf - Features - Hello World Karaf Features allows for bundles to be grouped, managed and deployed together. Features can be nested as well. Feature files of frameworks such as Apache Camel or Apache ActiveMQ can be used to deploy those services. A simple Features file is as below. features feature name='greeter_server' version='1.0' bundle file:///home/ubuntu/helloworld-1.0.0.jar /bundle bundle file:///home/ubuntu/helloworld2-1.0.0.jar /bundle /feature /features You can add the features to Karaf as below: karaf@root() feature:repo-add file:///home/ubuntu/features.xml You can install the feature's bundles as below. karaf@root(feature) install greeter_server Hello World 2 ! Hello World! Uninstalling the feature. karaf@root(feature) uninstall greeter_server Goodbye World 2 ! Goodbye World! Gradle Gradle is used by Alpaca as a build and package management tool. It is similar to Maven . Apache Camel Apache Camel is an integration framework that aids in implementing integration patterns. Alpaca - Apache Camel HelloWorld Maven has camel-archetype-blueprint which can be used to create apache-camel OSGi bundle project structure. Creating a project/bundle under Alpaca mvn archetype:generate -DarchetypeGroupId=org.apache.camel.archetypes -DarchetypeArtifactId=camel-archetype-blueprint -DarchetypeVersion=2.9.0 -DarchetypeRepository=https://repository.apache.org/content/groups/snapshots-g However, it is easier to copy the structure of an existing project such as islandora-connector-broadcast . cp -R islandora-connector-broadcast/ islandora-connector-helloworld Open the project in your IDE. In Eclipse, you can go to File | Open Projects from File System and navigate the new folder. We need to rename the configuration, java and build files to reflect the helloworld project. src/main/cfg/ca.islandora.alpaca.connector.helloworld.cfg src/main/java/ca/islandora/alpaca/connector/helloworld src/main/java/ca/islandora/alpaca/connector/helloworld/HelloworldRouter.java Also change the content of the above file to log Hello World package ca.islandora.alpaca.connector.helloworld; import static org.apache.camel.LoggingLevel.INFO; import org.apache.camel.builder.RouteBuilder; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class HelloworldRouter extends RouteBuilder { private static final Logger LOGGER = LoggerFactory.getLogger(HelloworldRouter.class); /** * Configure the message route workflow. */ public void configure() throws Exception { // Hello World. from( timer:foo?period=5000 ).log(INFO, LOGGER, Hello World ); } } src/main/resource/OSGI-INF/blueprint/blueprint.xml - Change the content of this file to reflect Helloworld package. src/build.gradle apply plugin: 'osgi' description = 'Islandora CLAW HelloWorld' dependencies { compile group: 'org.apache.camel', name: 'camel-core', version: camelVersion compile group: 'org.apache.camel', name: 'camel-blueprint', version: camelVersion compile group: 'org.apache.activemq', name: 'activemq-camel', version: activemqVersion compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion testCompile group: 'org.apache.camel', name: 'camel-test-blueprint', version: camelVersion } jar { manifest { description project.description docURL project.docURL vendor project.vendor license project.license instruction 'Import-Package', 'org.apache.activemq.camel.component,' + org.apache.camel;version=\\ ${camelVersionRange}\\ , + defaultOsgiImports instruction 'Export-Package', 'ca.islandora.alpaca.connector.helloworld' } } artifacts { archives (file('build/cfg/main/ca.islandora.alpaca.connector.helloworld.cfg')) { classifier 'configuration' type 'cfg' } } Building the bundle To build this project, we have to update the Alpaca build settings. Include and add the project in Alpaca/settings.gradle . include ':islandora-connector-helloworld' project(':islandora-connector-helloworld').projectDir = $rootDir/islandora-connector-helloworld as File Normally, we would also have to update the karaf/src/main/resources/features.xml file to include this bundle. However, we will be deploying the bundle directly into Karaf's Hot deployment directory. Thus, not needed at this time. To build it from command line in Linux. ubuntu:~/workspace/Alpaca$ sudo gradle w build Deploying the bundle Upload the bundle to the Apache Karaf deploy directory: /opt/apache-karaf-4.0.5/deploy Login to Karaf. You can also use the Karaf client here: /opt/karaf/bin/client . ssh -p 8101 karaf@localhost Verify that bundle is deployed bundle:list See the log to confirm that the bundle is working. log:tail You should see a message like below: 2017-02-24 21:30:17,973 | INFO | 12 - timer://foo | HelloworldRouter | 186 - ca.islandora.alpaca.islandora-connector-helloworld - 0.2.1.SNAPSHOT | Hello World Apache ActiveMQ Apache ActiveMQ is a JMS compliant Messaging Queue. Messaging client can make use of JMS to send messages. Installing ActiveMQ Installing ActiveMQ is relatively easy. Download the latest stable release here . Go to the activemq_install_dir/bin . Start the ActiveMQ by using the activemq script or batch file and start command. $ cd activemq_install_dir/bin $ ./activemq start When ActiveMQ gets started, go to http://localhost:8161/admin/. You can login using admin:admin. Note that ActiveMQ in CLAW vagrant does not have a UI. References OSGI for Beginners Playing with Apache Karaf Console Karaf Quick Start ActiveMQ Introduction","title":"Alpaca Technical Stack"},{"location":"alpaca/alpaca-technical-stack/#alpaca-technical-stack","text":"Alpaca contains several OSGI modules or bundles. They are grouped together as features and deployed to Karaf container.","title":"Alpaca Technical Stack"},{"location":"alpaca/alpaca-technical-stack/#osgi","text":"OSGi is a specification to develop and deploy modular Java applications. It allows for dynamic deployment (hot deployment) and dependency management. The base unit of resources is called a bundle. Bundle is similar to a jar file, with additional information to be processed as an OSGi component. Several bundles can be grouped together into a Feature and installed together. OSGi bundles can be run on containers implementing the OSGi specification. Apache Karaf is one such container","title":"OSGi"},{"location":"alpaca/alpaca-technical-stack/#karaf","text":"Apache Karaf is a container that can be used to deploy an array of applications such servlets, Apache Camel components, jars etc.","title":"Karaf"},{"location":"alpaca/alpaca-technical-stack/#karaf-bundle-hello-world","text":"Download a bundle to the CLAW vagrant (ex to /home/ubuntu directory). An example hello world bundle is here . In Islandora CLAW vagrant, you can login to Karaf using ssh. The password is karaf. You can also use the client here: /opt/karaf/bin/client . Karaf client allows the use of Linux commands such as grep in addition to Karaf commands. ssh -p 8101 karaf@localhost Install the bundle: karaf@root() bundle karaf@root(bundle) install file:///home/ubuntu/helloworld-1.0.0.jar Bundle ID: 242 The installation will return a bundle id. You can issue the list command to verify that bundle is on the list. Initially it will have Installed status. As per OSGi specification, before a bundle can be started, it has to be Resolved. To resolve, issue the following command. karaf@root(bundle) resolve 242 You can start and stop the bundle as below. karaf@root(bundle) start 242 Hello World! karaf@root(bundle) stop 242 Goodbye World! karaf@root(bundle)","title":"Karaf - Bundle - Hello World"},{"location":"alpaca/alpaca-technical-stack/#karaf-features-hello-world","text":"Karaf Features allows for bundles to be grouped, managed and deployed together. Features can be nested as well. Feature files of frameworks such as Apache Camel or Apache ActiveMQ can be used to deploy those services. A simple Features file is as below. features feature name='greeter_server' version='1.0' bundle file:///home/ubuntu/helloworld-1.0.0.jar /bundle bundle file:///home/ubuntu/helloworld2-1.0.0.jar /bundle /feature /features You can add the features to Karaf as below: karaf@root() feature:repo-add file:///home/ubuntu/features.xml You can install the feature's bundles as below. karaf@root(feature) install greeter_server Hello World 2 ! Hello World! Uninstalling the feature. karaf@root(feature) uninstall greeter_server Goodbye World 2 ! Goodbye World!","title":"Karaf - Features - Hello World"},{"location":"alpaca/alpaca-technical-stack/#gradle","text":"Gradle is used by Alpaca as a build and package management tool. It is similar to Maven .","title":"Gradle"},{"location":"alpaca/alpaca-technical-stack/#apache-camel","text":"Apache Camel is an integration framework that aids in implementing integration patterns.","title":"Apache Camel"},{"location":"alpaca/alpaca-technical-stack/#alpaca-apache-camel-helloworld","text":"Maven has camel-archetype-blueprint which can be used to create apache-camel OSGi bundle project structure.","title":"Alpaca - Apache Camel HelloWorld"},{"location":"alpaca/alpaca-technical-stack/#creating-a-projectbundle-under-alpaca","text":"mvn archetype:generate -DarchetypeGroupId=org.apache.camel.archetypes -DarchetypeArtifactId=camel-archetype-blueprint -DarchetypeVersion=2.9.0 -DarchetypeRepository=https://repository.apache.org/content/groups/snapshots-g However, it is easier to copy the structure of an existing project such as islandora-connector-broadcast . cp -R islandora-connector-broadcast/ islandora-connector-helloworld Open the project in your IDE. In Eclipse, you can go to File | Open Projects from File System and navigate the new folder. We need to rename the configuration, java and build files to reflect the helloworld project. src/main/cfg/ca.islandora.alpaca.connector.helloworld.cfg src/main/java/ca/islandora/alpaca/connector/helloworld src/main/java/ca/islandora/alpaca/connector/helloworld/HelloworldRouter.java Also change the content of the above file to log Hello World package ca.islandora.alpaca.connector.helloworld; import static org.apache.camel.LoggingLevel.INFO; import org.apache.camel.builder.RouteBuilder; import org.slf4j.Logger; import org.slf4j.LoggerFactory; public class HelloworldRouter extends RouteBuilder { private static final Logger LOGGER = LoggerFactory.getLogger(HelloworldRouter.class); /** * Configure the message route workflow. */ public void configure() throws Exception { // Hello World. from( timer:foo?period=5000 ).log(INFO, LOGGER, Hello World ); } } src/main/resource/OSGI-INF/blueprint/blueprint.xml - Change the content of this file to reflect Helloworld package. src/build.gradle apply plugin: 'osgi' description = 'Islandora CLAW HelloWorld' dependencies { compile group: 'org.apache.camel', name: 'camel-core', version: camelVersion compile group: 'org.apache.camel', name: 'camel-blueprint', version: camelVersion compile group: 'org.apache.activemq', name: 'activemq-camel', version: activemqVersion compile group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion testCompile group: 'org.apache.camel', name: 'camel-test-blueprint', version: camelVersion } jar { manifest { description project.description docURL project.docURL vendor project.vendor license project.license instruction 'Import-Package', 'org.apache.activemq.camel.component,' + org.apache.camel;version=\\ ${camelVersionRange}\\ , + defaultOsgiImports instruction 'Export-Package', 'ca.islandora.alpaca.connector.helloworld' } } artifacts { archives (file('build/cfg/main/ca.islandora.alpaca.connector.helloworld.cfg')) { classifier 'configuration' type 'cfg' } }","title":"Creating a project/bundle under Alpaca"},{"location":"alpaca/alpaca-technical-stack/#building-the-bundle","text":"To build this project, we have to update the Alpaca build settings. Include and add the project in Alpaca/settings.gradle . include ':islandora-connector-helloworld' project(':islandora-connector-helloworld').projectDir = $rootDir/islandora-connector-helloworld as File Normally, we would also have to update the karaf/src/main/resources/features.xml file to include this bundle. However, we will be deploying the bundle directly into Karaf's Hot deployment directory. Thus, not needed at this time. To build it from command line in Linux. ubuntu:~/workspace/Alpaca$ sudo gradle w build","title":"Building the bundle"},{"location":"alpaca/alpaca-technical-stack/#deploying-the-bundle","text":"Upload the bundle to the Apache Karaf deploy directory: /opt/apache-karaf-4.0.5/deploy Login to Karaf. You can also use the Karaf client here: /opt/karaf/bin/client . ssh -p 8101 karaf@localhost Verify that bundle is deployed bundle:list See the log to confirm that the bundle is working. log:tail You should see a message like below: 2017-02-24 21:30:17,973 | INFO | 12 - timer://foo | HelloworldRouter | 186 - ca.islandora.alpaca.islandora-connector-helloworld - 0.2.1.SNAPSHOT | Hello World","title":"Deploying the bundle"},{"location":"alpaca/alpaca-technical-stack/#apache-activemq","text":"Apache ActiveMQ is a JMS compliant Messaging Queue. Messaging client can make use of JMS to send messages.","title":"Apache ActiveMQ"},{"location":"alpaca/alpaca-technical-stack/#installing-activemq","text":"Installing ActiveMQ is relatively easy. Download the latest stable release here . Go to the activemq_install_dir/bin . Start the ActiveMQ by using the activemq script or batch file and start command. $ cd activemq_install_dir/bin $ ./activemq start When ActiveMQ gets started, go to http://localhost:8161/admin/. You can login using admin:admin. Note that ActiveMQ in CLAW vagrant does not have a UI.","title":"Installing ActiveMQ"},{"location":"alpaca/alpaca-technical-stack/#references","text":"OSGI for Beginners Playing with Apache Karaf Console Karaf Quick Start ActiveMQ Introduction","title":"References"},{"location":"contributing/CONTRIBUTING/","text":"Welcome! If you are reading this document then you are interested in contributing to Islandora 8. All contributions are welcome: use-cases, documentation, code, patches, bug reports, feature requests, etc. You do not need to be a programmer to speak up! We also have an irc channel -- #islandora -- on freenode.net. Feel free to hang out there, ask questions, and help others out if you can. Please note that this project operates under the Islandora Community Code of Conduct . By participating in this project you agree to abide by its terms. Workflows The group meets each Wednesday at 1:00 PM Eastern. Meeting notes and announcements are posted to the Islandora community list and the Islandora developers list . You can view meeting agendas, notes, and call-in information here . Anybody is welcome to join the calls, and add items to the agenda. Use cases If you would like to submit a use case to the Islandora 8 project, please submit an issue here using the Use Case template , prepending \"Use Case:\" to the title of the issue. Documentation You can contribute documentation in two different ways. One way is to create an issue here , prepending \"Documentation:\" to the title of the issue. Another way is by pull request, which is the same process as Contribute Code . All documentation resides in docs . Request a new feature To request a new feature you should open an issue in the Islandora 8 repository or create a use case (see the Use cases section above), and summarize the desired functionality. Prepend \"Enhancement:\" if creating an issue on the project repo, and \"Use Case:\" if creating a use case. Report a bug To report a bug you should open an issue in the Islandora 8 repository that summarizes the bug. Prepend the label \"Bug:\" to the title of the issue. In order to help us understand and fix the bug it would be great if you could provide us with: The steps to reproduce the bug. This includes information about e.g. the Islandora version you were using along with the versions of stack components. The expected behavior. The actual, incorrect behavior. Feel free to search the issue queue for existing issues (aka tickets) that already describe the problem; if there is such a ticket please add your information as a comment. If you want to provide a pull along with your bug report: That is great! In this case please send us a pull request as described in the section Create a pull request below. Contribute code Before you set out to contribute code you will need to have completed a Contributor License Agreement or be covered by a Corporate Contributor License Agreement . The signed copy of the license agreement should be sent to If you are interested in contributing code to Islandora but do not know where to begin: In this case you should browse open issues and check out use cases . If you are contributing Drupal code, it must adhere to Drupal Coding Standards ; Travis CI will check for this on pull requests. Contributions to the Islandora codebase should be sent as GitHub pull requests. See section Create a pull request below for details. If there is any problem with the pull request we can work through it using the commenting features of GitHub. For small patches , feel free to submit pull requests directly for those patches. For larger code contributions , please use the following process. The idea behind this process is to prevent any wasted work and catch design issues early on. Open an issue , prepending \"Enhancement:\" in the title if a similar issue does not exist already. If a similar issue does exist, then you may consider participating in the work on the existing issue. Comment on the issue with your plan for implementing the issue. Explain what pieces of the codebase you are going to touch and how everything is going to fit together. Islandora committers will work with you on the design to make sure you are on the right track. Implement your issue, create a pull request (see below), and iterate from there. Create a pull request Take a look at Creating a pull request . In a nutshell you need to: Fork this repository to your personal or institutional GitHub account (depending on the CLA you are working under). Be cautious of which branches you work from though (you'll want to base your work off master, or for Drupal modules use the most recent version branch). See Fork a repo for detailed instructions. Commit any changes to your fork. Send a pull request using the pull request template to the Islandora GitHub repository that you forked in step 1. If your pull request is related to an existing issue -- for instance, because you reported a bug/issue earlier -- prefix the title of your pull request with the corresponding issue number (e.g. issue-123: ... ). Please also include a reference to the issue in the description of the pull. This can be done by using '#' plus the issue number like so '#123', also try to pick an appropriate name for the branch in which you're issuing the pull request from. You may want to read Syncing a fork for instructions on how to keep your fork up to date with the latest changes of the upstream (official) repository. License Agreements The Islandora Foundation requires that contributors complete a Contributor License Agreement or be covered by a Corporate Contributor License Agreement . The signed copy of the license agreement should be sent to community@islandora.ca . This license is for your protection as a contributor as well as the protection of the Foundation and its users; it does not change your rights to use your own contributions for any other purpose. A list of current CLAs is kept here .","title":"How to contribute"},{"location":"contributing/CONTRIBUTING/#welcome","text":"If you are reading this document then you are interested in contributing to Islandora 8. All contributions are welcome: use-cases, documentation, code, patches, bug reports, feature requests, etc. You do not need to be a programmer to speak up! We also have an irc channel -- #islandora -- on freenode.net. Feel free to hang out there, ask questions, and help others out if you can. Please note that this project operates under the Islandora Community Code of Conduct . By participating in this project you agree to abide by its terms.","title":"Welcome!"},{"location":"contributing/CONTRIBUTING/#workflows","text":"The group meets each Wednesday at 1:00 PM Eastern. Meeting notes and announcements are posted to the Islandora community list and the Islandora developers list . You can view meeting agendas, notes, and call-in information here . Anybody is welcome to join the calls, and add items to the agenda.","title":"Workflows"},{"location":"contributing/CONTRIBUTING/#use-cases","text":"If you would like to submit a use case to the Islandora 8 project, please submit an issue here using the Use Case template , prepending \"Use Case:\" to the title of the issue.","title":"Use cases"},{"location":"contributing/CONTRIBUTING/#documentation","text":"You can contribute documentation in two different ways. One way is to create an issue here , prepending \"Documentation:\" to the title of the issue. Another way is by pull request, which is the same process as Contribute Code . All documentation resides in docs .","title":"Documentation"},{"location":"contributing/CONTRIBUTING/#request-a-new-feature","text":"To request a new feature you should open an issue in the Islandora 8 repository or create a use case (see the Use cases section above), and summarize the desired functionality. Prepend \"Enhancement:\" if creating an issue on the project repo, and \"Use Case:\" if creating a use case.","title":"Request a new feature"},{"location":"contributing/CONTRIBUTING/#report-a-bug","text":"To report a bug you should open an issue in the Islandora 8 repository that summarizes the bug. Prepend the label \"Bug:\" to the title of the issue. In order to help us understand and fix the bug it would be great if you could provide us with: The steps to reproduce the bug. This includes information about e.g. the Islandora version you were using along with the versions of stack components. The expected behavior. The actual, incorrect behavior. Feel free to search the issue queue for existing issues (aka tickets) that already describe the problem; if there is such a ticket please add your information as a comment. If you want to provide a pull along with your bug report: That is great! In this case please send us a pull request as described in the section Create a pull request below.","title":"Report a bug"},{"location":"contributing/CONTRIBUTING/#contribute-code","text":"Before you set out to contribute code you will need to have completed a Contributor License Agreement or be covered by a Corporate Contributor License Agreement . The signed copy of the license agreement should be sent to If you are interested in contributing code to Islandora but do not know where to begin: In this case you should browse open issues and check out use cases . If you are contributing Drupal code, it must adhere to Drupal Coding Standards ; Travis CI will check for this on pull requests. Contributions to the Islandora codebase should be sent as GitHub pull requests. See section Create a pull request below for details. If there is any problem with the pull request we can work through it using the commenting features of GitHub. For small patches , feel free to submit pull requests directly for those patches. For larger code contributions , please use the following process. The idea behind this process is to prevent any wasted work and catch design issues early on. Open an issue , prepending \"Enhancement:\" in the title if a similar issue does not exist already. If a similar issue does exist, then you may consider participating in the work on the existing issue. Comment on the issue with your plan for implementing the issue. Explain what pieces of the codebase you are going to touch and how everything is going to fit together. Islandora committers will work with you on the design to make sure you are on the right track. Implement your issue, create a pull request (see below), and iterate from there.","title":"Contribute code"},{"location":"contributing/CONTRIBUTING/#create-a-pull-request","text":"Take a look at Creating a pull request . In a nutshell you need to: Fork this repository to your personal or institutional GitHub account (depending on the CLA you are working under). Be cautious of which branches you work from though (you'll want to base your work off master, or for Drupal modules use the most recent version branch). See Fork a repo for detailed instructions. Commit any changes to your fork. Send a pull request using the pull request template to the Islandora GitHub repository that you forked in step 1. If your pull request is related to an existing issue -- for instance, because you reported a bug/issue earlier -- prefix the title of your pull request with the corresponding issue number (e.g. issue-123: ... ). Please also include a reference to the issue in the description of the pull. This can be done by using '#' plus the issue number like so '#123', also try to pick an appropriate name for the branch in which you're issuing the pull request from. You may want to read Syncing a fork for instructions on how to keep your fork up to date with the latest changes of the upstream (official) repository.","title":"Create a pull request"},{"location":"contributing/CONTRIBUTING/#license-agreements","text":"The Islandora Foundation requires that contributors complete a Contributor License Agreement or be covered by a Corporate Contributor License Agreement . The signed copy of the license agreement should be sent to community@islandora.ca . This license is for your protection as a contributor as well as the protection of the Foundation and its users; it does not change your rights to use your own contributions for any other purpose. A list of current CLAs is kept here .","title":"License Agreements"},{"location":"contributing/committers/","text":"Islandora CLAW Committers Islandora CLAW is open source and released under MIT and GPLv2 licenses. The software and associated documentation is developed collectively by a community of contributors and committers. All interested community members are encouraged to contribute to the project. Contributors who demonstrate sustained engagement with the project through quality participation in meetings, mailing lists, documentation and code updates can be nominated by existing committers to also become a committers. It should be emphasized that committers need not be limited to software developers. Community members with skills in documentation and testing, for example, can also be committers. Rights Committers share the following rights: Write access to the codebase Nomination privileges of new committers Release management privileges Binding votes on procedural, code modification, and release issues Access to the private committers mailing list Responsibilities Committers share the following responsibilities: Monitor and respond to project mailing lists Attend project and technical meetings Monitor and vet bug-tracker issues Review and commit code contributions Ensure code contributions are properly licensed Guide and mentor new committers Committers The following is an alphabetized list of the current Islandora CLAW committers: Name Organization Github username Jonathan Green LYRASIS jonathangreen Jonathan Hunt Catalyst.Net kayakr Mark Jordan Simon Fraser University mjordan Danny Lamb Islandora Foundation dannylamb Natkeeran Ledchumykanthan University of Toronto Scarborough natkeeran Rosie Le Faive University of Prince Edward Island rosiel Seth Shaw University of Nevada, Las Vegas seth-shaw-unlv Jared Whiklo University of Manitoba whikloj Emeritus Committers The following is an alphabetized list of the prior Islandora CLAW committers: Name Organization Aaron Coburn Amherst College Diego Pino METRO Nick Ruest York University Guidelines for assessing new candidates for committership When a contributor is nominated to become a committer, the following guidelines should be used by existing committers to evaluate the nominee's suitability. Ability to work cooperatively with peers How do we evaluate? By the interactions they have through mail. By how they respond to criticism. By how they participate in decision-making process. Ability to be a mentor How do we evaluate? By the interactions they have through mail. By how clear they are and how willing they are to point at appropriate background materials (or even create them). Community How do we evaluate? By the interactions they have through mail. Do they help to answer questions raised on the mailing list; do they show a helpful attitude and respect for other's ideas. Commitment How do we evaluate? By time, by sticking through tough issues, by helping on not-so-fun tasks as well. Personal skill/ability How do we evaluate? A solid general understanding of the project. Quality of discussion in mail. Patches (where applicable) easy to apply with only a cursory review. New Committer Process This section describes the process for handling the voting of a new committer. Summary: Call a vote ( templates/committerVote.txt ) Close a vote ( templates/closeCommitterVote.txt ) Invite the new committer ( templates/committerInvite.txt ), if no CLA is on file ( templates/committerInviteCLA.txt ) If they accept, then do: Add to Committer team of GitHub Islandora organization Add to Committer team of GitHub Islandora-Labs organization Add to islandora-committers google-group Add to committers wiki page: Islandora Committers Announce the new committer ( template/committerAnnounce.txt )","title":"Committers"},{"location":"contributing/committers/#islandora-claw-committers","text":"Islandora CLAW is open source and released under MIT and GPLv2 licenses. The software and associated documentation is developed collectively by a community of contributors and committers. All interested community members are encouraged to contribute to the project. Contributors who demonstrate sustained engagement with the project through quality participation in meetings, mailing lists, documentation and code updates can be nominated by existing committers to also become a committers. It should be emphasized that committers need not be limited to software developers. Community members with skills in documentation and testing, for example, can also be committers.","title":"Islandora CLAW Committers"},{"location":"contributing/committers/#rights","text":"Committers share the following rights: Write access to the codebase Nomination privileges of new committers Release management privileges Binding votes on procedural, code modification, and release issues Access to the private committers mailing list","title":"Rights"},{"location":"contributing/committers/#responsibilities","text":"Committers share the following responsibilities: Monitor and respond to project mailing lists Attend project and technical meetings Monitor and vet bug-tracker issues Review and commit code contributions Ensure code contributions are properly licensed Guide and mentor new committers","title":"Responsibilities"},{"location":"contributing/committers/#committers","text":"The following is an alphabetized list of the current Islandora CLAW committers: Name Organization Github username Jonathan Green LYRASIS jonathangreen Jonathan Hunt Catalyst.Net kayakr Mark Jordan Simon Fraser University mjordan Danny Lamb Islandora Foundation dannylamb Natkeeran Ledchumykanthan University of Toronto Scarborough natkeeran Rosie Le Faive University of Prince Edward Island rosiel Seth Shaw University of Nevada, Las Vegas seth-shaw-unlv Jared Whiklo University of Manitoba whikloj","title":"Committers"},{"location":"contributing/committers/#emeritus-committers","text":"The following is an alphabetized list of the prior Islandora CLAW committers: Name Organization Aaron Coburn Amherst College Diego Pino METRO Nick Ruest York University","title":"Emeritus Committers"},{"location":"contributing/committers/#guidelines-for-assessing-new-candidates-for-committership","text":"When a contributor is nominated to become a committer, the following guidelines should be used by existing committers to evaluate the nominee's suitability.","title":"Guidelines for assessing new candidates for committership"},{"location":"contributing/committers/#ability-to-work-cooperatively-with-peers","text":"How do we evaluate? By the interactions they have through mail. By how they respond to criticism. By how they participate in decision-making process.","title":"Ability to work cooperatively with peers"},{"location":"contributing/committers/#ability-to-be-a-mentor","text":"How do we evaluate? By the interactions they have through mail. By how clear they are and how willing they are to point at appropriate background materials (or even create them).","title":"Ability to be a mentor"},{"location":"contributing/committers/#community","text":"How do we evaluate? By the interactions they have through mail. Do they help to answer questions raised on the mailing list; do they show a helpful attitude and respect for other's ideas.","title":"Community"},{"location":"contributing/committers/#commitment","text":"How do we evaluate? By time, by sticking through tough issues, by helping on not-so-fun tasks as well.","title":"Commitment"},{"location":"contributing/committers/#personal-skillability","text":"How do we evaluate? A solid general understanding of the project. Quality of discussion in mail. Patches (where applicable) easy to apply with only a cursory review.","title":"Personal skill/ability"},{"location":"contributing/committers/#new-committer-process","text":"This section describes the process for handling the voting of a new committer. Summary: Call a vote ( templates/committerVote.txt ) Close a vote ( templates/closeCommitterVote.txt ) Invite the new committer ( templates/committerInvite.txt ), if no CLA is on file ( templates/committerInviteCLA.txt ) If they accept, then do: Add to Committer team of GitHub Islandora organization Add to Committer team of GitHub Islandora-Labs organization Add to islandora-committers google-group Add to committers wiki page: Islandora Committers Announce the new committer ( template/committerAnnounce.txt )","title":"New Committer Process"},{"location":"contributing/hacking-on-islandora/","text":"Hacking on Islandora CLAW One of the goals of the Islandora CLAW project is to lower the barrier to entry for working on and with Islandora. A shared, consistent environment amongst developers is one of the best ways to do this. To get started hacking on Islandora CLAW with your very own development environment, all you need to do follow these steps: Install VirtualBox Install Vagrant Fork Islandora CLAW and clone it onto your machine using the master branch ~ $ git clone -b master https://github.com/your_github_name/islandora.git OR If you're already a developer and have previously forked and cloned Islandora CLAW, just add the master branch from Islandora-CLAW to your existing checkout: ~ $ cd /path/to/islandora /path/to/CLAW $ git remote add claw https://github.com/Islandora-CLAW/CLAW.git /path/to/CLAW $ git fetch claw /path/to/CLAW $ git checkout master Navigate into the install directory of your master checkout ~ $ cd /path/to/CLAW/install Build your vm using vagrant up /path/to/CLAW/install $ vagrant up Sit back and relax as your development environment is created for you! In a few minutes you\u2019ll have a brand new Islandora CLAW install that you can use and abuse as much as you\u2019d like. If you ever ruin your environment (trust me, it\u2019ll happen), you can always destroy it and bring up a new one at any time. ~ $ cd /path/to/CLAW/install /path/to/CLAW/install $ vagrant destroy /path/to/CLAW/install $ vagrant up Logging in to your development environment You can ssh into your development environment at any time by doing the following: ~ $ cd /path/to/islandora/install /path/to/islandora/install $ vagrant ssh Welcome to Ubuntu 14.04.2 LTS (GNU/Linux 3.13.0-45-generic x86_64) * Documentation: https://help.ubuntu.com/ System information disabled due to load higher than 1.0 Get cloud support with Ubuntu Advantage Cloud Guest: http://www.ubuntu.com/business/services/cloud Last login: Fri Jul 17 13:51:38 2015 from 10.0.2.2 vagrant@islandora:~$ You'll be logged in as the vagrant user, with your GitHub repo in your home directory. Port Forwarding Many ports are forwarded from your virtual machine to your personal computer, so care must be taken that there are no conflicts. Here's a list of all the ports that get forwarded: - Apache: 80 - 8000 - Tomcat: 8080 - 8080 - Karaf: 8181 - 8181 - MySQL: 3306 - 3306 At any point in time, you can edit how the ports are forwarded by clicking on the Port Forwarding button in your virtual machine's Network settings in VirtualBox. You can also edit the section of the Vagrantfile that controls the default port forwarding, which looks something like this: config.vm.network :forwarded_port, guest: 8080, host: 8080 # Tomcat config.vm.network :forwarded_port, guest: 8181, host: 8181 # Karaf config.vm.network :forwarded_port, guest: 3306, host: 3306 # MySQL config.vm.network :forwarded_port, guest: 5432, host: 5432 # PostgreSQL config.vm.network :forwarded_port, guest: 80, host: 8000 # Apache Important locations Drupal: /var/www/html/drupal Apache Logs: /var/log/apache2/error.log Tomcat: /var/lib/tomcat7 Logs: /var/log/tomcat7 Fedora 4: /var/lib/tomcat7/webapps/fcrepo Solr: /var/lib/tomcat7/webapps/solr BlazeGraph: /var/lib/tomcat7/webapps/bigdata FcrepoCamelToolbox: /var/lib/tomcat7/webapps/fcrepo-camel-toolbox Karaf: /opt/karaf Logs: /opt/karaf/data/log Configuration: /opt/karaf/etc CLAW: /home/vagrant/CLAW Shared folders By default, the vagrant environment uses a shared folder between your computer and the virtual machine it has created. This folder points to your Islandora CLAW GitHub repo on your computer and is available at ~/CLAW ( /home/vagrant/CLAW ) on the virtual machine. On top of that, in Drupal, sites/all/modules/islandora is a symlink pointing to ~/CLAW/islandora . This has a few profound consequences: You can use the IDE you're comfortable with on your own machine, without the need to scp/rsync code over to the development environment Changes to Drupal module code are automatically reflected on your Drupal site since that code is symlinked (although you may need to be ssh'd in to drush cc all on occassion) When testing the Vagrant install after adding changes, the code from your fork and your branch on your computer is used to generate the virtual machine Compiling Camel Bundles Despite being nothing but Blueprint xml files, Camel projects still have to be compiled using Maven. The install directive is the default, so all one has to do is navigate to the appropriate directory and issue a mvn in the command line. For example, to compile the collection service: ~ $ cd /path/to/CLAW/Alpaca/services/collection-service /path/to/CLAW/Alpaca/serices/collection-service $ mvn The only caveat here is that this is best done on the virtual machine itself. While your virtual machine was being built, it's Karaf installation was set to monitor the vagrant user's Maven repository for changes, and autodeploy in response to mvn install . So while you can always run Maven from your own machine, it will get installed in your personal Maven repository on your machine. So to take advantage of the auto-redeploy capabilities of Karaf, you need to do this as the vagrant user. If for any reason, you have to shutdown or restart Karaf, it will cease to monitor the vagrant user's Maven repository. In order to turn this back on, you'll have to issue the appropriate commands to get monitoring working again. The easiest way to do this is to re-run the karaf script the install process uses to set up monitoring by executing /opt/karaf/bin/client ~/islandora/install/karaf/monitor.script .","title":"Hacking on Islandora CLAW"},{"location":"contributing/hacking-on-islandora/#hacking-on-islandora-claw","text":"One of the goals of the Islandora CLAW project is to lower the barrier to entry for working on and with Islandora. A shared, consistent environment amongst developers is one of the best ways to do this. To get started hacking on Islandora CLAW with your very own development environment, all you need to do follow these steps: Install VirtualBox Install Vagrant Fork Islandora CLAW and clone it onto your machine using the master branch ~ $ git clone -b master https://github.com/your_github_name/islandora.git OR If you're already a developer and have previously forked and cloned Islandora CLAW, just add the master branch from Islandora-CLAW to your existing checkout: ~ $ cd /path/to/islandora /path/to/CLAW $ git remote add claw https://github.com/Islandora-CLAW/CLAW.git /path/to/CLAW $ git fetch claw /path/to/CLAW $ git checkout master Navigate into the install directory of your master checkout ~ $ cd /path/to/CLAW/install Build your vm using vagrant up /path/to/CLAW/install $ vagrant up Sit back and relax as your development environment is created for you! In a few minutes you\u2019ll have a brand new Islandora CLAW install that you can use and abuse as much as you\u2019d like. If you ever ruin your environment (trust me, it\u2019ll happen), you can always destroy it and bring up a new one at any time. ~ $ cd /path/to/CLAW/install /path/to/CLAW/install $ vagrant destroy /path/to/CLAW/install $ vagrant up","title":"Hacking on Islandora CLAW"},{"location":"contributing/hacking-on-islandora/#logging-in-to-your-development-environment","text":"You can ssh into your development environment at any time by doing the following: ~ $ cd /path/to/islandora/install /path/to/islandora/install $ vagrant ssh Welcome to Ubuntu 14.04.2 LTS (GNU/Linux 3.13.0-45-generic x86_64) * Documentation: https://help.ubuntu.com/ System information disabled due to load higher than 1.0 Get cloud support with Ubuntu Advantage Cloud Guest: http://www.ubuntu.com/business/services/cloud Last login: Fri Jul 17 13:51:38 2015 from 10.0.2.2 vagrant@islandora:~$ You'll be logged in as the vagrant user, with your GitHub repo in your home directory.","title":"Logging in to your development environment"},{"location":"contributing/hacking-on-islandora/#port-forwarding","text":"Many ports are forwarded from your virtual machine to your personal computer, so care must be taken that there are no conflicts. Here's a list of all the ports that get forwarded: - Apache: 80 - 8000 - Tomcat: 8080 - 8080 - Karaf: 8181 - 8181 - MySQL: 3306 - 3306 At any point in time, you can edit how the ports are forwarded by clicking on the Port Forwarding button in your virtual machine's Network settings in VirtualBox. You can also edit the section of the Vagrantfile that controls the default port forwarding, which looks something like this: config.vm.network :forwarded_port, guest: 8080, host: 8080 # Tomcat config.vm.network :forwarded_port, guest: 8181, host: 8181 # Karaf config.vm.network :forwarded_port, guest: 3306, host: 3306 # MySQL config.vm.network :forwarded_port, guest: 5432, host: 5432 # PostgreSQL config.vm.network :forwarded_port, guest: 80, host: 8000 # Apache","title":"Port Forwarding"},{"location":"contributing/hacking-on-islandora/#important-locations","text":"Drupal: /var/www/html/drupal Apache Logs: /var/log/apache2/error.log Tomcat: /var/lib/tomcat7 Logs: /var/log/tomcat7 Fedora 4: /var/lib/tomcat7/webapps/fcrepo Solr: /var/lib/tomcat7/webapps/solr BlazeGraph: /var/lib/tomcat7/webapps/bigdata FcrepoCamelToolbox: /var/lib/tomcat7/webapps/fcrepo-camel-toolbox Karaf: /opt/karaf Logs: /opt/karaf/data/log Configuration: /opt/karaf/etc CLAW: /home/vagrant/CLAW","title":"Important locations"},{"location":"contributing/hacking-on-islandora/#shared-folders","text":"By default, the vagrant environment uses a shared folder between your computer and the virtual machine it has created. This folder points to your Islandora CLAW GitHub repo on your computer and is available at ~/CLAW ( /home/vagrant/CLAW ) on the virtual machine. On top of that, in Drupal, sites/all/modules/islandora is a symlink pointing to ~/CLAW/islandora . This has a few profound consequences: You can use the IDE you're comfortable with on your own machine, without the need to scp/rsync code over to the development environment Changes to Drupal module code are automatically reflected on your Drupal site since that code is symlinked (although you may need to be ssh'd in to drush cc all on occassion) When testing the Vagrant install after adding changes, the code from your fork and your branch on your computer is used to generate the virtual machine","title":"Shared folders"},{"location":"contributing/hacking-on-islandora/#compiling-camel-bundles","text":"Despite being nothing but Blueprint xml files, Camel projects still have to be compiled using Maven. The install directive is the default, so all one has to do is navigate to the appropriate directory and issue a mvn in the command line. For example, to compile the collection service: ~ $ cd /path/to/CLAW/Alpaca/services/collection-service /path/to/CLAW/Alpaca/serices/collection-service $ mvn The only caveat here is that this is best done on the virtual machine itself. While your virtual machine was being built, it's Karaf installation was set to monitor the vagrant user's Maven repository for changes, and autodeploy in response to mvn install . So while you can always run Maven from your own machine, it will get installed in your personal Maven repository on your machine. So to take advantage of the auto-redeploy capabilities of Karaf, you need to do this as the vagrant user. If for any reason, you have to shutdown or restart Karaf, it will cease to monitor the vagrant user's Maven repository. In order to turn this back on, you'll have to issue the appropriate commands to get monitoring working again. The easiest way to do this is to re-run the karaf script the install process uses to set up monitoring by executing /opt/karaf/bin/client ~/islandora/install/karaf/monitor.script .","title":"Compiling Camel Bundles"},{"location":"contributing/readme_template/","text":"# ![Alt text](Mascot Image) Repository Name [![Minimum PHP Version](link)](link) [![Build Status](link)](link) [![Contribution Guidelines](http://img.shields.io/badge/CONTRIBUTING-Guidelines-blue.svg)](./CONTRIBUTING.md) [![LICENSE](https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square)](./LICENSE) [![codecov](link)](link) ## Introduction A brief introduction and summary of the module. ## Requirements This module requires the following modules/libraries: * [Name](Link) * [Name](Link) * Any * Requirements ## Installation Installations instructions. ## Configuration Describe path to configuration. Include a screenshot of configuration page. When using your choice of screenshot software, resize your browser first to avoid wide screenshots. Here are a few browser extension examples to take screenshots. - [Fireshots](https://chrome.google.com/webstore/detail/take-webpage-screenshots/mcbpblocgmgfnpjjppndjkmgjaogfceg) - [Nimbus](https://chrome.google.com/webstore/detail/nimbus-screenshot-screen/bpconcjcammlapcogcnnelfmaeghhagj) To upload the image drag the image into the comment section of an existing Pull Request. This will generate the image URL link for you ![Configuration Screenshot](https://user-images.githubusercontent.com/2857697/39014759-e2ef9c1e-43e0-11e8-921c-c2a3234d65d2.jpg) Video example on [How to attach an Image in README.md file with Github](https://youtu.be/wVHJtL-y7P0) ## Other Sections As Needed Sections specific to this repo, but not found in all repos, should go here. ## Documentation Further documentation for this module is available on the [Islandora 8 documentation site](https://islandora.github.io/documentation/). ## Troubleshooting/Issues Having problems or solved a problem? Check out the Islandora google groups for a solution. - [Islandora Group](https://groups.google.com/forum/?hl=en fromgroups#!forum/islandora) - [Islandora Dev Group](https://groups.google.com/forum/?hl=en fromgroups#!forum/islandora-dev) ## FAQ Q. Is this normal? A. Yes. This is normal. Why ... ## Maintainers/Sponsors Current maintainers: - [Maintainer Name](https://github.com/maintainer_github) - [Another Maintainer](https://github.com/maintainer_github) This project has been sponsored by: - Some really awesome sponsor ## Development If you would like to contribute, please get involved by attending our weekly [Tech Call](https://github.com/Islandora/documentation/wiki). We love to hear from you! If you would like to contribute code to the project, you need to be covered by an Islandora Foundation [Contributor License Agreement](http://islandora.ca/sites/default/files/islandora_cla.pdf) or [Corporate Contributor License Agreement](http://islandora.ca/sites/default/files/islandora_ccla.pdf). Please see the [Contributors](http://islandora.ca/resources/contributors) pages on Islandora.ca for more information. We recommend using the [islandora-playbook](https://github.com/Islandora-Devops/islandora-playbook) to get started. If you want to pull down the submodules for development, don't forget to run `git submodule update --init --recursive` after cloning. Also include any Travis gotcha's here. ## License [Name](link). GPLv2 for Drupal modules. MIT for other modules.","title":"Readme template"},{"location":"islandora/drupal-bundle-configurations/","text":"Drupal Bundle Configurations In Islandora 8, content models are primarily created using content types (also known as node bundles) and media bundles. Bundles are defined by YAML configuration files. To create new content models , one would create the needed content types and media bundles via UI, then export the yml files related for those bundles using Configuration Synchronization ( http://localhost:8000/admin/config/development/configuration ) or Features . An understanding about the structure of a bundle and various configuration files used to define it helps in creating and updating it. Content types and media bundles can be thought of as web forms consisting of fields. Drupal provides widgets to define the behavior of a field and field storage to define how the data is stored in the database. Drupal provides various display modes to show the forms to user when they are editing (Manage form display) or viewing (Manage display). A content model is packaged as a module for installation. All yml files are put in config/install folder of the module. Note that not all content models would contain media bundles. The following files define the bundles themselves. It contains some metadata about the bundle and lists its dependencies. node.type.your_content_type.yml media_entity.bundle.your_media_bundle.yml The following files define the fields attached to the bundle forms. There must be one config file for each field in your bundle, except for the default drupal fields. field.field.node.your_content_type.field_name1.yml field.field.node.your_content_type.field_name2.yml ... field.field.media.your_media_bundle.field_name1.yml field.field.media.your_media_bundle.field_name2.yml If the new bundle contains new fields, then field storage configurations for the newly created fields would be needed as well. Note that if you reused existing fields, storage definitions should not be defined again. Storage config contains information about the number of values allowed for that field (cardinality). field.storage.node.field_new_name3.yml field.storage.media.field__new_name3.yml There is a configuration file for each combination of bundle / display mode when managing form displays. Usually, form displays will have default and inline modes. core.entity_form_display.media.your_media_bundle.default.yml core.entity_form_display.media.your_media_bundle.inline.yml --- core.entity_form_display.node.your_content_type.default.yml core.entity_form_display.node.your_content_type.inline.yml There is a configuration file for each combination of bundle / display mode when managing displays. Usually, displays will have default and teaser modes for content types and default and content modes for media bundles. core.entity_view_display.media.your_media_bundle.default.yml core.entity_view_display.media.your_media_bundle.content.yml --- core.entity_view_display.node.your_content_type.default.yml core.entity_view_display.node.your_content_type.teaser.yml In addition, Islandora needs a RDF mapping to express the content in RDF and to sync to fedora. There will be one RDF mapping per bundle. rdf.mapping.media.your_media_bundle.yml rdf.mapping.node.your_content_type.yml","title":"Drupal bundle configurations"},{"location":"islandora/drupal-bundle-configurations/#drupal-bundle-configurations","text":"In Islandora 8, content models are primarily created using content types (also known as node bundles) and media bundles. Bundles are defined by YAML configuration files. To create new content models , one would create the needed content types and media bundles via UI, then export the yml files related for those bundles using Configuration Synchronization ( http://localhost:8000/admin/config/development/configuration ) or Features . An understanding about the structure of a bundle and various configuration files used to define it helps in creating and updating it. Content types and media bundles can be thought of as web forms consisting of fields. Drupal provides widgets to define the behavior of a field and field storage to define how the data is stored in the database. Drupal provides various display modes to show the forms to user when they are editing (Manage form display) or viewing (Manage display). A content model is packaged as a module for installation. All yml files are put in config/install folder of the module. Note that not all content models would contain media bundles. The following files define the bundles themselves. It contains some metadata about the bundle and lists its dependencies. node.type.your_content_type.yml media_entity.bundle.your_media_bundle.yml The following files define the fields attached to the bundle forms. There must be one config file for each field in your bundle, except for the default drupal fields. field.field.node.your_content_type.field_name1.yml field.field.node.your_content_type.field_name2.yml ... field.field.media.your_media_bundle.field_name1.yml field.field.media.your_media_bundle.field_name2.yml If the new bundle contains new fields, then field storage configurations for the newly created fields would be needed as well. Note that if you reused existing fields, storage definitions should not be defined again. Storage config contains information about the number of values allowed for that field (cardinality). field.storage.node.field_new_name3.yml field.storage.media.field__new_name3.yml There is a configuration file for each combination of bundle / display mode when managing form displays. Usually, form displays will have default and inline modes. core.entity_form_display.media.your_media_bundle.default.yml core.entity_form_display.media.your_media_bundle.inline.yml --- core.entity_form_display.node.your_content_type.default.yml core.entity_form_display.node.your_content_type.inline.yml There is a configuration file for each combination of bundle / display mode when managing displays. Usually, displays will have default and teaser modes for content types and default and content modes for media bundles. core.entity_view_display.media.your_media_bundle.default.yml core.entity_view_display.media.your_media_bundle.content.yml --- core.entity_view_display.node.your_content_type.default.yml core.entity_view_display.node.your_content_type.teaser.yml In addition, Islandora needs a RDF mapping to express the content in RDF and to sync to fedora. There will be one RDF mapping per bundle. rdf.mapping.media.your_media_bundle.yml rdf.mapping.node.your_content_type.yml","title":"Drupal Bundle Configurations"},{"location":"islandora/rdf-mapping/","text":"RDF Generation Summary In Islandora, the JSON-LD Module transforms nodes (or media, or taxonomy terms) into the RDF that is synced into Fedora and the Triplestore. It uses RDF mappings, a concept defined by the RDF Module , and exposes them through the REST API at ?_format=jsonld . Background A quick overview of JSON-LD, the RDF module, and the REST API. The JSON-LD Syntax JSON-LD is a syntax which can be used to express RDF (like Turtle, or RDF XML), that is written in JSON, because devs like JSON and it's web-friendly. The JSON-LD syntax was designed for including Linked Data within HTML of web pages (similar to microdata or RDFa). Instead of nesting the RDF predicates within existing HTML tags as RDFa does, JSON-LD lets you put a solid blob of Linked Data inside a script tag. JSON-LD can also function as a standalone document, which is how we're using it. RDF (Drupal Module) The RDF Module is part of Drupal Core, but has no official documentation. The RDF Module embeds RDFa, a form of linked data, within the Drupal-generated HTML when you load the web page for a node, media, or taxonomy term. Official line is that this will allow Google to provide \"rich snippets\" such as star-ratings, contact info, and business hours. As an example of Drupal-provided RDFa: h1 class= page-header span property= schema:title My cat /span /h1 The property=\"schema:title\" is markup generated by Drupal's RDF module that identifies the value \"My cat\" as the schema.org title of this page. A node's fields (such as field_tags ) and properties (such as author ) can be mapped to RDF according to a bundle-specific \"mapping\" that is stored within Drupal. In Drupal8-ese, RDF mappings are configuration entities. Drupal doesn't have a good UI for editing RDF mappings, but you can create, read, and update them as YAML files using Drupal's Configuration Synchronization interface (see section below on How to Edit an RDF Mapping).. REST API The pattern of using ?_format= to get a different representation of content is provided by the RESTful Web Services (rest) module. It allows other services to interact with Drupal entities through HTTP requests ( GET , POST , PATCH , and DELETE ). Which operations are allowed, and with what formats (such as xml , json , and jsonld ) is configured at admin/config/services/rest/ . Note that only jsonld uses RDF mappings; the json and xml formats expose a structured object based on how Drupal sees the entity. Access to these alternate formats throught the REST API corresponds to permissions on the entity, so anyone with access content permission can view the JSON-LD version of that content. This is new as of Drupal 8.2 . For more information on interacting with Drupal entities via REST requests, see An Introduction to RESTful Web Services in Drupal 8 . JSON-LD Module Using the RDF mapping configurations provided by the RDF module, the JSON-LD Module exposes the RDF-mapped entity in JSON-LD, through the REST API, at node/[nid]?_format=jsonld (for nodes; for media and terms, at media/[mid]?_format=jsonld and taxonomy/term/[tid]?_format=jsonld ). The JSON-LD module will only work with mappings that include a value under types (which maps to rdf:type - see below, under Structure of an RDF Mapping). The JSON-LD module provides a hook so other modules can alter the entity before it gets mapped. The islandora module uses this hook to trigger any \"Map URI to Predicate\" and \"Alter JSON-LD Type\" reactions that are configured in Contexts. islandora_defaults provides the two Contexts - \"All Media\" and \"Content\" - that configure these to occur on Media and Repository Item nodes. The JSON-LD module adds RDF datatypes to the RDF values, and includes a mapping of Drupal field types to RDF datatypes. The JSON-LD module provides a hook to alter its Drupal field type to RDF datatype mapping. The JSON-LD module has a configuration option that can cause the ?_format=jsonld to be part of, or not part of, the URIs of Drupal objects. On an out-of-the-box claw-playbook, this string is stripped, but by default on a fresh install of the jsonld module, it is not. RDF Mappings In an out-of-the-box claw-playbook, the RDF mappings that exist were loaded from config files, and correspond to the rdf.mapping.[...].yml files located in: [drupal modules directory]/islandora/modules/islandora_core_feature/config/install/ (media and taxonomy terms) [drupal modules directory]/islandora_defaults/config/install/ ( repository_item and the islandora_access vocabulary) [drupal modules directory]/controlled_access_terms/modules/controlled_access_terms_defaults/config/install/ (the default corporate_body , family , geo_location , person , resource_type and subject vocabularies) [drupal web root]/core/profiles/standard/config/install/ (articles, pages, comments, and tags). Once loaded by modules, configuration .yml files are not live so editing them will not change the existing configuration . However, for modules that are Features, it is possible to re-import the changed configuration files at admin/config/development/features (todo: link to further reading on Features). How to edit an RDF Mapping Once loaded, RDF mappings can be customized for the needs of a particular site through Drupal's Configuration Synchronization UI at admin/config/development/configuration . They can be exported, modified, and re-imported one-at-a-time by choosing the \"Single Item\" option on the Export/Import tabs. You can also create new RDF mappings (e.g. for a custom content type) and load them through this interface, by copying an existing mapping and changing the appropriate values. Contributed module for RDF Mappings A custom module rdfui exists, and is installed-but-not-enabled on boxes provisioned by the claw-playbook. We don't use it because it is very rudimentary and limited to the schema.org vocabulary. We have an open ticket to develop a UI to support RDF mappings to any ontology. Contributions welcome. A number of namespaces such as ldp , ebucore , pcdm , are premis are registered in islandora.module using hook_rdf_namespaces() . To register your own namespaces, you will need to create a custom module that implements that hook. If you import a configuration that uses a namespace that is not registered, bad things will happen silently. Structure of an RDF Mapping Below is an example of an RDF mapping as a .yml (YAML) file. It is the current version of the RDF mapping of the Repository Item ( islandora_object ) bundle, provided by islandora_defaults and exportable as rdf.mapping.node.islandora_object.yml ). The top level key types specifies the rdf:type of the resource or content model. field_model , a required field of Islandora objects, also gets mapped to rdf:type through an arcane back-end process. The top level key fieldMappings specifies fields attached to that bundle and their RDF property mappings. One field can be mapped to more than one RDF property. It is a simple flat list. datatype_callback : [needs documentation] mapping_type: rel : [needs documentation] Sample RDF Mapping langcode: en status: true dependencies: config: - node.type.islandora_object enforced: module: - islandora_defaults module: - node id: node.islandora_object targetEntityType: node bundle: islandora_object types: - 'pcdm:Object' fieldMappings: field_alternative_title: properties: - 'dc:alternative' field_edtf_date: properties: - 'dc:date' datatype_callback: callable: 'Drupal\\controlled_access_terms\\EDTFConverter::dateIso8601Value' field_edtf_date_created: properties: - 'dc:created' datatype_callback: callable: 'Drupal\\controlled_access_terms\\EDTFConverter::dateIso8601Value' field_edtf_date_issued: properties: - 'dc:issued' datatype_callback: callable: 'Drupal\\controlled_access_terms\\EDTFConverter::dateIso8601Value' field_description: properties: - 'dc:description' field_extent: properties: - 'dc:extent' field_identifier: properties: - 'dc:identifier' field_member_of: properties: - 'pcdm:memberOf' mapping_type: rel field_resource_type: properties: - 'dc:type' mapping_type: rel field_rights: properties: - 'dc:rights' field_subject: properties: - 'dc:subject' mapping_type: rel field_weight: properties: - 'co:index' title: properties: - 'dc:title' created: properties: - 'schema:dateCreated' datatype_callback: callable: 'Drupal\\rdf\\CommonDataConverter::dateIso8601Value' changed: properties: - 'schema:dateModified' datatype_callback: callable: 'Drupal\\rdf\\CommonDataConverter::dateIso8601Value' uid: properties: - 'schema:author' mapping_type: rel Sample JSON-LD { @graph :[ { @id : http:\\/\\/future.islandora.ca\\/node\\/8 , @type :[ http:\\/\\/pcdm.org\\/models#Object ], http:\\/\\/purl.org\\/dc\\/terms\\/title :[ { @value : lasmomias de uninpahu , @language : fa } ], http:\\/\\/schema.org\\/author :[ { @id : http:\\/\\/future.islandora.ca\\/en\\/user\\/1 } ], http:\\/\\/schema.org\\/dateCreated :[ { @value : 2019-06-04T14:32:05+00:00 , @type : http:\\/\\/www.w3.org\\/2001\\/XMLSchema#dateTime } ], http:\\/\\/schema.org\\/dateModified :[ { @value : 2019-06-04T17:02:51+00:00 , @type : http:\\/\\/www.w3.org\\/2001\\/XMLSchema#dateTime } ], http:\\/\\/purl.org\\/dc\\/terms\\/description :[ { @value : mpermmbklmh , @language : fa } ], http:\\/\\/purl.org\\/dc\\/terms\\/created :[ { @value : 2015-10-15 , @type : http:\\/\\/www.w3.org\\/2001\\/XMLSchema#string }, { @value : 2015-10-15 , @type : http:\\/\\/www.w3.org\\/2001\\/XMLSchema#date } ], http:\\/\\/purl.org\\/dc\\/terms\\/extent :[ { @value : 1 item , @type : http:\\/\\/www.w3.org\\/2001\\/XMLSchema#string } ], http:\\/\\/pcdm.org\\/models#memberOf :[ { @id : http:\\/\\/future.islandora.ca\\/node\\/7 } ], http:\\/\\/purl.org\\/dc\\/terms\\/type :[ { @id : http:\\/\\/future.islandora.ca\\/taxonomy\\/term\\/3 } ], http:\\/\\/purl.org\\/dc\\/terms\\/subject :[ { @id : http:\\/\\/future.islandora.ca\\/taxonomy\\/term\\/27 } ] }, { @id : http:\\/\\/future.islandora.ca\\/en\\/user\\/1 , @type :[ http:\\/\\/schema.org\\/Person ] }, { @id : http:\\/\\/future.islandora.ca\\/node\\/7 , @type :[ http:\\/\\/pcdm.org\\/models#Object ] }, { @id : http:\\/\\/future.islandora.ca\\/taxonomy\\/term\\/3 , @type :[ http:\\/\\/schema.org\\/Thing ] }, { @id : http:\\/\\/future.islandora.ca\\/taxonomy\\/term\\/27 , @type :[ http:\\/\\/schema.org\\/Thing ] } ] }","title":"RDF Generation"},{"location":"islandora/rdf-mapping/#rdf-generation","text":"","title":"RDF Generation"},{"location":"islandora/rdf-mapping/#summary","text":"In Islandora, the JSON-LD Module transforms nodes (or media, or taxonomy terms) into the RDF that is synced into Fedora and the Triplestore. It uses RDF mappings, a concept defined by the RDF Module , and exposes them through the REST API at ?_format=jsonld .","title":"Summary"},{"location":"islandora/rdf-mapping/#background","text":"A quick overview of JSON-LD, the RDF module, and the REST API.","title":"Background"},{"location":"islandora/rdf-mapping/#the-json-ld-syntax","text":"JSON-LD is a syntax which can be used to express RDF (like Turtle, or RDF XML), that is written in JSON, because devs like JSON and it's web-friendly. The JSON-LD syntax was designed for including Linked Data within HTML of web pages (similar to microdata or RDFa). Instead of nesting the RDF predicates within existing HTML tags as RDFa does, JSON-LD lets you put a solid blob of Linked Data inside a script tag. JSON-LD can also function as a standalone document, which is how we're using it.","title":"The JSON-LD Syntax"},{"location":"islandora/rdf-mapping/#rdf-drupal-module","text":"The RDF Module is part of Drupal Core, but has no official documentation. The RDF Module embeds RDFa, a form of linked data, within the Drupal-generated HTML when you load the web page for a node, media, or taxonomy term. Official line is that this will allow Google to provide \"rich snippets\" such as star-ratings, contact info, and business hours. As an example of Drupal-provided RDFa: h1 class= page-header span property= schema:title My cat /span /h1 The property=\"schema:title\" is markup generated by Drupal's RDF module that identifies the value \"My cat\" as the schema.org title of this page. A node's fields (such as field_tags ) and properties (such as author ) can be mapped to RDF according to a bundle-specific \"mapping\" that is stored within Drupal. In Drupal8-ese, RDF mappings are configuration entities. Drupal doesn't have a good UI for editing RDF mappings, but you can create, read, and update them as YAML files using Drupal's Configuration Synchronization interface (see section below on How to Edit an RDF Mapping)..","title":"RDF (Drupal Module)"},{"location":"islandora/rdf-mapping/#rest-api","text":"The pattern of using ?_format= to get a different representation of content is provided by the RESTful Web Services (rest) module. It allows other services to interact with Drupal entities through HTTP requests ( GET , POST , PATCH , and DELETE ). Which operations are allowed, and with what formats (such as xml , json , and jsonld ) is configured at admin/config/services/rest/ . Note that only jsonld uses RDF mappings; the json and xml formats expose a structured object based on how Drupal sees the entity. Access to these alternate formats throught the REST API corresponds to permissions on the entity, so anyone with access content permission can view the JSON-LD version of that content. This is new as of Drupal 8.2 . For more information on interacting with Drupal entities via REST requests, see An Introduction to RESTful Web Services in Drupal 8 .","title":"REST API"},{"location":"islandora/rdf-mapping/#json-ld-module","text":"Using the RDF mapping configurations provided by the RDF module, the JSON-LD Module exposes the RDF-mapped entity in JSON-LD, through the REST API, at node/[nid]?_format=jsonld (for nodes; for media and terms, at media/[mid]?_format=jsonld and taxonomy/term/[tid]?_format=jsonld ). The JSON-LD module will only work with mappings that include a value under types (which maps to rdf:type - see below, under Structure of an RDF Mapping). The JSON-LD module provides a hook so other modules can alter the entity before it gets mapped. The islandora module uses this hook to trigger any \"Map URI to Predicate\" and \"Alter JSON-LD Type\" reactions that are configured in Contexts. islandora_defaults provides the two Contexts - \"All Media\" and \"Content\" - that configure these to occur on Media and Repository Item nodes. The JSON-LD module adds RDF datatypes to the RDF values, and includes a mapping of Drupal field types to RDF datatypes. The JSON-LD module provides a hook to alter its Drupal field type to RDF datatype mapping. The JSON-LD module has a configuration option that can cause the ?_format=jsonld to be part of, or not part of, the URIs of Drupal objects. On an out-of-the-box claw-playbook, this string is stripped, but by default on a fresh install of the jsonld module, it is not.","title":"JSON-LD Module"},{"location":"islandora/rdf-mapping/#rdf-mappings","text":"In an out-of-the-box claw-playbook, the RDF mappings that exist were loaded from config files, and correspond to the rdf.mapping.[...].yml files located in: [drupal modules directory]/islandora/modules/islandora_core_feature/config/install/ (media and taxonomy terms) [drupal modules directory]/islandora_defaults/config/install/ ( repository_item and the islandora_access vocabulary) [drupal modules directory]/controlled_access_terms/modules/controlled_access_terms_defaults/config/install/ (the default corporate_body , family , geo_location , person , resource_type and subject vocabularies) [drupal web root]/core/profiles/standard/config/install/ (articles, pages, comments, and tags). Once loaded by modules, configuration .yml files are not live so editing them will not change the existing configuration . However, for modules that are Features, it is possible to re-import the changed configuration files at admin/config/development/features (todo: link to further reading on Features).","title":"RDF Mappings"},{"location":"islandora/rdf-mapping/#how-to-edit-an-rdf-mapping","text":"Once loaded, RDF mappings can be customized for the needs of a particular site through Drupal's Configuration Synchronization UI at admin/config/development/configuration . They can be exported, modified, and re-imported one-at-a-time by choosing the \"Single Item\" option on the Export/Import tabs. You can also create new RDF mappings (e.g. for a custom content type) and load them through this interface, by copying an existing mapping and changing the appropriate values. Contributed module for RDF Mappings A custom module rdfui exists, and is installed-but-not-enabled on boxes provisioned by the claw-playbook. We don't use it because it is very rudimentary and limited to the schema.org vocabulary. We have an open ticket to develop a UI to support RDF mappings to any ontology. Contributions welcome. A number of namespaces such as ldp , ebucore , pcdm , are premis are registered in islandora.module using hook_rdf_namespaces() . To register your own namespaces, you will need to create a custom module that implements that hook. If you import a configuration that uses a namespace that is not registered, bad things will happen silently.","title":"How to edit an RDF Mapping"},{"location":"islandora/rdf-mapping/#structure-of-an-rdf-mapping","text":"Below is an example of an RDF mapping as a .yml (YAML) file. It is the current version of the RDF mapping of the Repository Item ( islandora_object ) bundle, provided by islandora_defaults and exportable as rdf.mapping.node.islandora_object.yml ). The top level key types specifies the rdf:type of the resource or content model. field_model , a required field of Islandora objects, also gets mapped to rdf:type through an arcane back-end process. The top level key fieldMappings specifies fields attached to that bundle and their RDF property mappings. One field can be mapped to more than one RDF property. It is a simple flat list. datatype_callback : [needs documentation] mapping_type: rel : [needs documentation]","title":"Structure of an RDF Mapping"},{"location":"islandora/rdf-mapping/#sample-rdf-mapping","text":"langcode: en status: true dependencies: config: - node.type.islandora_object enforced: module: - islandora_defaults module: - node id: node.islandora_object targetEntityType: node bundle: islandora_object types: - 'pcdm:Object' fieldMappings: field_alternative_title: properties: - 'dc:alternative' field_edtf_date: properties: - 'dc:date' datatype_callback: callable: 'Drupal\\controlled_access_terms\\EDTFConverter::dateIso8601Value' field_edtf_date_created: properties: - 'dc:created' datatype_callback: callable: 'Drupal\\controlled_access_terms\\EDTFConverter::dateIso8601Value' field_edtf_date_issued: properties: - 'dc:issued' datatype_callback: callable: 'Drupal\\controlled_access_terms\\EDTFConverter::dateIso8601Value' field_description: properties: - 'dc:description' field_extent: properties: - 'dc:extent' field_identifier: properties: - 'dc:identifier' field_member_of: properties: - 'pcdm:memberOf' mapping_type: rel field_resource_type: properties: - 'dc:type' mapping_type: rel field_rights: properties: - 'dc:rights' field_subject: properties: - 'dc:subject' mapping_type: rel field_weight: properties: - 'co:index' title: properties: - 'dc:title' created: properties: - 'schema:dateCreated' datatype_callback: callable: 'Drupal\\rdf\\CommonDataConverter::dateIso8601Value' changed: properties: - 'schema:dateModified' datatype_callback: callable: 'Drupal\\rdf\\CommonDataConverter::dateIso8601Value' uid: properties: - 'schema:author' mapping_type: rel","title":"Sample RDF Mapping"},{"location":"islandora/rdf-mapping/#sample-json-ld","text":"{ @graph :[ { @id : http:\\/\\/future.islandora.ca\\/node\\/8 , @type :[ http:\\/\\/pcdm.org\\/models#Object ], http:\\/\\/purl.org\\/dc\\/terms\\/title :[ { @value : lasmomias de uninpahu , @language : fa } ], http:\\/\\/schema.org\\/author :[ { @id : http:\\/\\/future.islandora.ca\\/en\\/user\\/1 } ], http:\\/\\/schema.org\\/dateCreated :[ { @value : 2019-06-04T14:32:05+00:00 , @type : http:\\/\\/www.w3.org\\/2001\\/XMLSchema#dateTime } ], http:\\/\\/schema.org\\/dateModified :[ { @value : 2019-06-04T17:02:51+00:00 , @type : http:\\/\\/www.w3.org\\/2001\\/XMLSchema#dateTime } ], http:\\/\\/purl.org\\/dc\\/terms\\/description :[ { @value : mpermmbklmh , @language : fa } ], http:\\/\\/purl.org\\/dc\\/terms\\/created :[ { @value : 2015-10-15 , @type : http:\\/\\/www.w3.org\\/2001\\/XMLSchema#string }, { @value : 2015-10-15 , @type : http:\\/\\/www.w3.org\\/2001\\/XMLSchema#date } ], http:\\/\\/purl.org\\/dc\\/terms\\/extent :[ { @value : 1 item , @type : http:\\/\\/www.w3.org\\/2001\\/XMLSchema#string } ], http:\\/\\/pcdm.org\\/models#memberOf :[ { @id : http:\\/\\/future.islandora.ca\\/node\\/7 } ], http:\\/\\/purl.org\\/dc\\/terms\\/type :[ { @id : http:\\/\\/future.islandora.ca\\/taxonomy\\/term\\/3 } ], http:\\/\\/purl.org\\/dc\\/terms\\/subject :[ { @id : http:\\/\\/future.islandora.ca\\/taxonomy\\/term\\/27 } ] }, { @id : http:\\/\\/future.islandora.ca\\/en\\/user\\/1 , @type :[ http:\\/\\/schema.org\\/Person ] }, { @id : http:\\/\\/future.islandora.ca\\/node\\/7 , @type :[ http:\\/\\/pcdm.org\\/models#Object ] }, { @id : http:\\/\\/future.islandora.ca\\/taxonomy\\/term\\/3 , @type :[ http:\\/\\/schema.org\\/Thing ] }, { @id : http:\\/\\/future.islandora.ca\\/taxonomy\\/term\\/27 , @type :[ http:\\/\\/schema.org\\/Thing ] } ] }","title":"Sample JSON-LD"},{"location":"migration/fedora-namespace-predicates/","text":"Fedora 3.x namespace RELS-EXT predicates $ grep -R \"FEDORA_RELS_EXT_URI\" Islandora-7.x Islandora isMemberOfCollection isMemberOf Image Annotation isAnnotationOf Compound isConstituentOf isPartOf","title":"Fedora 3.x namespace RELS-EXT predicates"},{"location":"migration/fedora-namespace-predicates/#fedora-3x-namespace-rels-ext-predicates","text":"$ grep -R \"FEDORA_RELS_EXT_URI\" Islandora-7.x","title":"Fedora 3.x namespace RELS-EXT predicates"},{"location":"migration/fedora-namespace-predicates/#islandora","text":"isMemberOfCollection isMemberOf","title":"Islandora"},{"location":"migration/fedora-namespace-predicates/#image-annotation","text":"isAnnotationOf","title":"Image Annotation"},{"location":"migration/fedora-namespace-predicates/#compound","text":"isConstituentOf isPartOf","title":"Compound"},{"location":"migration/islandora-namespace-predicates/","text":"Islandora namespace RELS-EXT predicates $ grep -R \"ISLANDORA_RELS_EXT_URI\" Islandora-7.x Book isPageOf isSequenceNumber isPageNumber isSection Image Annotation targetedBy targets hasColor hasURN strokeWidth isEntity isAnnotationType OCR hasLanguage generate_ocr Book Batch book-batched email-admin-when-ingested Newspaper isPageOf isSequenceNumber dateIssued XACML isViewableByRole isManageableByRole isViewableByUser isManageableByUser Paged Content hasLanguage isPageOf isSequenceNumber isPageNumber isSection Compound isSequenceNumberOf$escaped_pid","title":"Islandora namespace RELS-EXT predicates"},{"location":"migration/islandora-namespace-predicates/#islandora-namespace-rels-ext-predicates","text":"$ grep -R \"ISLANDORA_RELS_EXT_URI\" Islandora-7.x","title":"Islandora namespace RELS-EXT predicates"},{"location":"migration/islandora-namespace-predicates/#book","text":"isPageOf isSequenceNumber isPageNumber isSection","title":"Book"},{"location":"migration/islandora-namespace-predicates/#image-annotation","text":"targetedBy targets hasColor hasURN strokeWidth isEntity isAnnotationType","title":"Image Annotation"},{"location":"migration/islandora-namespace-predicates/#ocr","text":"hasLanguage generate_ocr","title":"OCR"},{"location":"migration/islandora-namespace-predicates/#book-batch","text":"book-batched email-admin-when-ingested","title":"Book Batch"},{"location":"migration/islandora-namespace-predicates/#newspaper","text":"isPageOf isSequenceNumber dateIssued","title":"Newspaper"},{"location":"migration/islandora-namespace-predicates/#xacml","text":"isViewableByRole isManageableByRole isViewableByUser isManageableByUser","title":"XACML"},{"location":"migration/islandora-namespace-predicates/#paged-content","text":"hasLanguage isPageOf isSequenceNumber isPageNumber isSection","title":"Paged Content"},{"location":"migration/islandora-namespace-predicates/#compound","text":"isSequenceNumberOf$escaped_pid","title":"Compound"},{"location":"migration/migration/","text":"fcrepo3 Object properties to fcrepo4 fcrepo 3 fcrepo4 Example PID fedora3model:PID\u2020 yul:328697 state fedoraaccess:objState Active label fedora3model:label\u2020 Elvis Presley createDate premis:hasDateCreatedByApplication 2015-03-16T20:11:06.683Z lastModifiedDate metadataModification 2015-03-16T20:11:06.683Z ownerId fedora3model:ownerId\u2020 nruest \u2020 The fedora3model namespace is not a published namespace. It is a representation of the fcrepo3 namespace info:fedora/fedora-system:def/model . \u2021 Not yet implemented fcrepo3 Datastream properties to fcrepo4 fcrepo3 fcrepo4 Example DSID dcterms:identifier OBJ Label dcterms:title\u2021 ASC19109.tif MIME Type ebucore:hasMimeType\u2020 image/tiff State fedoraaccess:objState Active Created premis:hasDateCreatedByApplication 2015-03-16T20:11:06.683Z Versionable fedora:hasVersions\u2021 true Format URI premis:formatDesignation\u2021 info:pronom/fmt/156 Alternate IDs dcterms:identifier\u2021 Access URL dcterms:identifier\u2021 Checksum cryptofunc: hashalgorithm \u2021 cryptofunc:sha1 \"c91342b705b15cb4f6ac5362cc6a47d9425aec86\" \u2020 The fedora3model namespace is not a published namespace. It is a representation of the fcrepo3 namespace info:fedora/fedora-system:def/model . \u2021 Not yet implemented fcrepo3 RELS-EXT to fcrepo4 Mapping fcrepo3 Example fcrepo4 Example fedora:isMemberOfCollection rdf:resource=\"info:fedora/yul:F0433\" fedora:hasParent fedora-model:hasModel rdf:resource=\"info:fedora/islandora:sp_large_image_cmodel\" rdf:type islandora:largeImage islandora:inheritXacmlFrom rdf:resource=\"info:fedora/yul:F0433\" islandora:hasLanguage fra dcterms:language fra islandora:isPageOf rdf:resource=\"info:fedora/yul:336566\" islandora:isSequenceNumber 213 islandora:isPageNumber 213 islandora:isSection 1 fedora:isConstituentOf rdf:resource=\"info:fedora/yul:271119\" fedora:hasParent islandora:isSequenceNumberOfyul_271119 1 islandora:dateIssued 1945-10-31 islandora:isSequenceNumber 2023 islandora:isMemberOf islandora:sp_large_image_cmodel fedora:hasParent fedora:isAnnotationOf rdf:resource=\"info:fedora/islandora:96 islandora:targetedBy admin islandora:isAnnotationType my type islandora:hasURN urn:uuid:C691142D-FCC0-0001-F6B3-1390128014A5 islandora:targets info:fedora/islandora:96 islandora:isViewableByUser nruest islandora:isViewableByRole islandora creator islandora:isManageableByUser nruest islandora:isManageableByRole islandora administrator Samples Large Image object rdf:RDF xmlns:rdf= http://www.w3.org/1999/02/22-rdf-syntax-ns# xmlns:fedora= info:fedora/fedora-system:def/relations-external# xmlns:fedora-model= info:fedora/fedora-system:def/model# xmlns:islandora= http://islandora.ca/ontology/relsext# rdf:Description rdf:about= info:fedora/yul:328697 fedora:isMemberOfCollection rdf:resource= info:fedora/yul:F0433 /fedora:isMemberOfCollection fedora-model:hasModel rdf:resource= info:fedora/islandora:sp_large_image_cmodel /fedora-model:hasModel islandora:inheritXacmlFrom rdf:resource= info:fedora/yul:F0433 /islandora:inheritXacmlFrom /rdf:Description /rdf:RDF Page object rdf:RDF xmlns:rdf= http://www.w3.org/1999/02/22-rdf-syntax-ns# xmlns:fedora= info:fedora/fedora-system:def/relations-external# xmlns:fedora-model= info:fedora/fedora-system:def/model# xmlns:islandora= http://islandora.ca/ontology/relsext# rdf:Description rdf:about= info:fedora/yul:336779 fedora-model:hasModel rdf:resource= info:fedora/islandora:pageCModel /fedora-model:hasModel islandora:hasLanguage fra /islandora:hasLanguage islandora:isPageOf rdf:resource= info:fedora/yul:336566 /islandora:isPageOf islandora:isSequenceNumber 213 /islandora:isSequenceNumber islandora:isPageNumber 213 /islandora:isPageNumber islandora:isSection 1 /islandora:isSection fedora:isMemberOf rdf:resource= info:fedora/yul:336566 /fedora:isMemberOf islandora:inheritXacmlFrom rdf:resource= info:fedora/yul:336566 /islandora:inheritXacmlFrom /rdf:Description /rdf:RDF Compound object (child) rdf:RDF xmlns:fedora= info:fedora/fedora-system:def/relations-external# xmlns:fedora-model= info:fedora/fedora-system:def/model# xmlns:islandora= http://islandora.ca/ontology/relsext# xmlns:rdf= http://www.w3.org/1999/02/22-rdf-syntax-ns# rdf:Description rdf:about= info:fedora/yul:271117 fedora:isMemberOfCollection rdf:resource= info:fedora/yul:F0375 /fedora:isMemberOfCollection fedora-model:hasModel rdf:resource= info:fedora/islandora:sp_large_image_cmodel /fedora-model:hasModel islandora:inheritXacmlFrom rdf:resource= info:fedora/yul:F0375 /islandora:inheritXacmlFrom fedora:isConstituentOf rdf:resource= info:fedora/yul:271119 /fedora:isConstituentOf islandora:isSequenceNumberOfyul_271119 1 /islandora:isSequenceNumberOfyul_271119 /rdf:Description /rdf:RDF Newspaper object rdf:RDF rdf:Description rdf:about= info:fedora/uofm:1243378 fedora-model:hasModel rdf:resource= info:fedora/islandora:newspaperCModel / fedora:isMemberOfCollection rdf:resource= info:fedora/uofm:libraries / /rdf:Description /rdf:RDF Newspaper issue object rdf:RDF rdf:Description rdf:about= info:fedora/uofm:1351347 fedora:isMemberOf rdf:resource= info:fedora/uofm:1243378 / fedora-model:hasModel rdf:resource= info:fedora/islandora:newspaperIssueCModel / islandora:dateIssued 1945-10-31 /islandora:dateIssued islandora:isSequenceNumber 2023 /islandora:isSequenceNumber /rdf:Description /rdf:RDF Newspaper page object rdf:RDF rdf:Description rdf:about= info:fedora/uofm:1351348 fedora-model:hasModel rdf:resource= info:fedora/islandora:newspaperPageCModel / fedora:isMemberOf rdf:resource= info:fedora/uofm:1351347 / islandora:isPageOf rdf:resource= info:fedora/uofm:1351347 / islandora:isSequenceNumber 1 /islandora:isSequenceNumber islandora:isPageNumber 1 /islandora:isPageNumber /rdf:Description /rdf:RDF Audit log migration auditTrail mapping fcrepo3 event fcrepo4 Event Type addDatastream premis:ing\u2021 modifyDatastreamByReference audit:contentModification/metadataModification\u2021 modifyObject audit:resourceModification\u2021 modifyObject (checksum validation) premis:validation\u2021 modifyDatastreamByValue audit:contentModification/metadataModification\u2021 purgeDatastream audit:contentRemoval\u2021 \u2020 The fedora3model namespace is not a published namespace. It is a representation of the fcrepo3 namespace info:fedora/fedora-system:def/model . \u2021 Not yet implemented Examples : addDatastream audit:record ID= AUDREC1 audit:process type= Fedora API-M / audit:action addDatastream /audit:action audit:componentID TECHMD_FITS /audit:componentID audit:responsibility joanna /audit:responsibility audit:date 2013-06-21T14:54:27.396Z /audit:date audit:justification Copied datastream from yul:61282. /audit:justification /audit:record modifyDatastreamByReference audit:record ID= AUDREC4 audit:process type= Fedora API-M / audit:action modifyDatastreamByReference /audit:action audit:componentID TN /audit:componentID audit:responsibility fedoraAdmin /audit:responsibility audit:date 2013-06-22T05:14:34.443Z /audit:date audit:justification /audit:justification /audit:record modifyObject audit:record ID= AUDREC5 audit:process type= Fedora API-M / audit:action modifyObject /audit:action audit:componentID /audit:componentID audit:responsibility joanna /audit:responsibility audit:date 2013-07-02T14:31:59.699Z /audit:date audit:justification /audit:justification /audit:record modifyObject (checksum validation) audit:record ID= AUDREC23 audit:process type= Fedora API-M / audit:action modifyObject /audit:action audit:componentID /audit:componentID audit:responsibility anonymous /audit:responsibility audit:date 2014-01-22T21:07:43.502Z /audit:date audit:justification PREMIS:file=yul:96031+FULL_TEXT+FULL_TEXT.0; PREMIS:eventType=fixity check; PREMIS:eventOutcome=SHA-1 checksum validated. /audit:justification /audit:record modifyDatastreamByValue audit:record ID= AUDREC16 audit:process type= Fedora API-M / audit:action modifyDatastreamByValue /audit:action audit:componentID RELS-EXT /audit:componentID audit:responsibility nruest /audit:responsibility audit:date 2013-11-27T15:42:08.823Z /audit:date audit:justification /audit:justification /audit:record purgeDatastream audit:record ID= AUDREC15 audit:process type= Fedora API-M / audit:action purgeDatastream /audit:action audit:componentID MKV /audit:componentID audit:responsibility fedoraAdmin /audit:responsibility audit:date 2015-04-08T14:37:54.963Z /audit:date audit:justification Purged datastream (ID=MKV), versions ranging from the beginning of time to the end of time. This resulted in the permanent removal of 1 datastream version(s) (2015-02-19T21:01:56.235Z) and all associated audit records. /audit:justification Diagrams Example Islandora (Large Image Object), PCDM, and Fedora 4 structure","title":"Migration"},{"location":"migration/migration/#fcrepo3-object-properties-to-fcrepo4","text":"fcrepo 3 fcrepo4 Example PID fedora3model:PID\u2020 yul:328697 state fedoraaccess:objState Active label fedora3model:label\u2020 Elvis Presley createDate premis:hasDateCreatedByApplication 2015-03-16T20:11:06.683Z lastModifiedDate metadataModification 2015-03-16T20:11:06.683Z ownerId fedora3model:ownerId\u2020 nruest \u2020 The fedora3model namespace is not a published namespace. It is a representation of the fcrepo3 namespace info:fedora/fedora-system:def/model . \u2021 Not yet implemented","title":"fcrepo3 Object properties to fcrepo4"},{"location":"migration/migration/#fcrepo3-datastream-properties-to-fcrepo4","text":"fcrepo3 fcrepo4 Example DSID dcterms:identifier OBJ Label dcterms:title\u2021 ASC19109.tif MIME Type ebucore:hasMimeType\u2020 image/tiff State fedoraaccess:objState Active Created premis:hasDateCreatedByApplication 2015-03-16T20:11:06.683Z Versionable fedora:hasVersions\u2021 true Format URI premis:formatDesignation\u2021 info:pronom/fmt/156 Alternate IDs dcterms:identifier\u2021 Access URL dcterms:identifier\u2021 Checksum cryptofunc: hashalgorithm \u2021 cryptofunc:sha1 \"c91342b705b15cb4f6ac5362cc6a47d9425aec86\" \u2020 The fedora3model namespace is not a published namespace. It is a representation of the fcrepo3 namespace info:fedora/fedora-system:def/model . \u2021 Not yet implemented","title":"fcrepo3 Datastream properties to fcrepo4"},{"location":"migration/migration/#fcrepo3-rels-ext-to-fcrepo4-mapping","text":"fcrepo3 Example fcrepo4 Example fedora:isMemberOfCollection rdf:resource=\"info:fedora/yul:F0433\" fedora:hasParent fedora-model:hasModel rdf:resource=\"info:fedora/islandora:sp_large_image_cmodel\" rdf:type islandora:largeImage islandora:inheritXacmlFrom rdf:resource=\"info:fedora/yul:F0433\" islandora:hasLanguage fra dcterms:language fra islandora:isPageOf rdf:resource=\"info:fedora/yul:336566\" islandora:isSequenceNumber 213 islandora:isPageNumber 213 islandora:isSection 1 fedora:isConstituentOf rdf:resource=\"info:fedora/yul:271119\" fedora:hasParent islandora:isSequenceNumberOfyul_271119 1 islandora:dateIssued 1945-10-31 islandora:isSequenceNumber 2023 islandora:isMemberOf islandora:sp_large_image_cmodel fedora:hasParent fedora:isAnnotationOf rdf:resource=\"info:fedora/islandora:96 islandora:targetedBy admin islandora:isAnnotationType my type islandora:hasURN urn:uuid:C691142D-FCC0-0001-F6B3-1390128014A5 islandora:targets info:fedora/islandora:96 islandora:isViewableByUser nruest islandora:isViewableByRole islandora creator islandora:isManageableByUser nruest islandora:isManageableByRole islandora administrator Samples Large Image object rdf:RDF xmlns:rdf= http://www.w3.org/1999/02/22-rdf-syntax-ns# xmlns:fedora= info:fedora/fedora-system:def/relations-external# xmlns:fedora-model= info:fedora/fedora-system:def/model# xmlns:islandora= http://islandora.ca/ontology/relsext# rdf:Description rdf:about= info:fedora/yul:328697 fedora:isMemberOfCollection rdf:resource= info:fedora/yul:F0433 /fedora:isMemberOfCollection fedora-model:hasModel rdf:resource= info:fedora/islandora:sp_large_image_cmodel /fedora-model:hasModel islandora:inheritXacmlFrom rdf:resource= info:fedora/yul:F0433 /islandora:inheritXacmlFrom /rdf:Description /rdf:RDF Page object rdf:RDF xmlns:rdf= http://www.w3.org/1999/02/22-rdf-syntax-ns# xmlns:fedora= info:fedora/fedora-system:def/relations-external# xmlns:fedora-model= info:fedora/fedora-system:def/model# xmlns:islandora= http://islandora.ca/ontology/relsext# rdf:Description rdf:about= info:fedora/yul:336779 fedora-model:hasModel rdf:resource= info:fedora/islandora:pageCModel /fedora-model:hasModel islandora:hasLanguage fra /islandora:hasLanguage islandora:isPageOf rdf:resource= info:fedora/yul:336566 /islandora:isPageOf islandora:isSequenceNumber 213 /islandora:isSequenceNumber islandora:isPageNumber 213 /islandora:isPageNumber islandora:isSection 1 /islandora:isSection fedora:isMemberOf rdf:resource= info:fedora/yul:336566 /fedora:isMemberOf islandora:inheritXacmlFrom rdf:resource= info:fedora/yul:336566 /islandora:inheritXacmlFrom /rdf:Description /rdf:RDF Compound object (child) rdf:RDF xmlns:fedora= info:fedora/fedora-system:def/relations-external# xmlns:fedora-model= info:fedora/fedora-system:def/model# xmlns:islandora= http://islandora.ca/ontology/relsext# xmlns:rdf= http://www.w3.org/1999/02/22-rdf-syntax-ns# rdf:Description rdf:about= info:fedora/yul:271117 fedora:isMemberOfCollection rdf:resource= info:fedora/yul:F0375 /fedora:isMemberOfCollection fedora-model:hasModel rdf:resource= info:fedora/islandora:sp_large_image_cmodel /fedora-model:hasModel islandora:inheritXacmlFrom rdf:resource= info:fedora/yul:F0375 /islandora:inheritXacmlFrom fedora:isConstituentOf rdf:resource= info:fedora/yul:271119 /fedora:isConstituentOf islandora:isSequenceNumberOfyul_271119 1 /islandora:isSequenceNumberOfyul_271119 /rdf:Description /rdf:RDF Newspaper object rdf:RDF rdf:Description rdf:about= info:fedora/uofm:1243378 fedora-model:hasModel rdf:resource= info:fedora/islandora:newspaperCModel / fedora:isMemberOfCollection rdf:resource= info:fedora/uofm:libraries / /rdf:Description /rdf:RDF Newspaper issue object rdf:RDF rdf:Description rdf:about= info:fedora/uofm:1351347 fedora:isMemberOf rdf:resource= info:fedora/uofm:1243378 / fedora-model:hasModel rdf:resource= info:fedora/islandora:newspaperIssueCModel / islandora:dateIssued 1945-10-31 /islandora:dateIssued islandora:isSequenceNumber 2023 /islandora:isSequenceNumber /rdf:Description /rdf:RDF Newspaper page object rdf:RDF rdf:Description rdf:about= info:fedora/uofm:1351348 fedora-model:hasModel rdf:resource= info:fedora/islandora:newspaperPageCModel / fedora:isMemberOf rdf:resource= info:fedora/uofm:1351347 / islandora:isPageOf rdf:resource= info:fedora/uofm:1351347 / islandora:isSequenceNumber 1 /islandora:isSequenceNumber islandora:isPageNumber 1 /islandora:isPageNumber /rdf:Description /rdf:RDF","title":"fcrepo3 RELS-EXT to fcrepo4 Mapping"},{"location":"migration/migration/#audit-log-migration","text":"auditTrail mapping fcrepo3 event fcrepo4 Event Type addDatastream premis:ing\u2021 modifyDatastreamByReference audit:contentModification/metadataModification\u2021 modifyObject audit:resourceModification\u2021 modifyObject (checksum validation) premis:validation\u2021 modifyDatastreamByValue audit:contentModification/metadataModification\u2021 purgeDatastream audit:contentRemoval\u2021 \u2020 The fedora3model namespace is not a published namespace. It is a representation of the fcrepo3 namespace info:fedora/fedora-system:def/model . \u2021 Not yet implemented Examples : addDatastream audit:record ID= AUDREC1 audit:process type= Fedora API-M / audit:action addDatastream /audit:action audit:componentID TECHMD_FITS /audit:componentID audit:responsibility joanna /audit:responsibility audit:date 2013-06-21T14:54:27.396Z /audit:date audit:justification Copied datastream from yul:61282. /audit:justification /audit:record modifyDatastreamByReference audit:record ID= AUDREC4 audit:process type= Fedora API-M / audit:action modifyDatastreamByReference /audit:action audit:componentID TN /audit:componentID audit:responsibility fedoraAdmin /audit:responsibility audit:date 2013-06-22T05:14:34.443Z /audit:date audit:justification /audit:justification /audit:record modifyObject audit:record ID= AUDREC5 audit:process type= Fedora API-M / audit:action modifyObject /audit:action audit:componentID /audit:componentID audit:responsibility joanna /audit:responsibility audit:date 2013-07-02T14:31:59.699Z /audit:date audit:justification /audit:justification /audit:record modifyObject (checksum validation) audit:record ID= AUDREC23 audit:process type= Fedora API-M / audit:action modifyObject /audit:action audit:componentID /audit:componentID audit:responsibility anonymous /audit:responsibility audit:date 2014-01-22T21:07:43.502Z /audit:date audit:justification PREMIS:file=yul:96031+FULL_TEXT+FULL_TEXT.0; PREMIS:eventType=fixity check; PREMIS:eventOutcome=SHA-1 checksum validated. /audit:justification /audit:record modifyDatastreamByValue audit:record ID= AUDREC16 audit:process type= Fedora API-M / audit:action modifyDatastreamByValue /audit:action audit:componentID RELS-EXT /audit:componentID audit:responsibility nruest /audit:responsibility audit:date 2013-11-27T15:42:08.823Z /audit:date audit:justification /audit:justification /audit:record purgeDatastream audit:record ID= AUDREC15 audit:process type= Fedora API-M / audit:action purgeDatastream /audit:action audit:componentID MKV /audit:componentID audit:responsibility fedoraAdmin /audit:responsibility audit:date 2015-04-08T14:37:54.963Z /audit:date audit:justification Purged datastream (ID=MKV), versions ranging from the beginning of time to the end of time. This resulted in the permanent removal of 1 datastream version(s) (2015-02-19T21:01:56.235Z) and all associated audit records. /audit:justification","title":"Audit log migration"},{"location":"migration/migration/#diagrams","text":"Example Islandora (Large Image Object), PCDM, and Fedora 4 structure","title":"Diagrams"},{"location":"mvp/mvp_doc/","text":"Islandora 8 MVP Motivation The Islandora 8 project is currently transitioning from a prototype into a competitive product, and has had a requirements change from integration with Drupal 7 to Drupal 8. In order to aid in that transition, we are defining the minimum viable product. This will defend against scope creep, give clearly defined goals for community members to work towards, and present the point at which the development team feels the software is ready to be tested out in small installations. Needless to say, since this is a minimum product, a lot of parts of the previous prototype are either going to get replaced by an existing project to ease the maintenance load, or be removed altogether until time and resources allow other development. High Level Features These are what are considered the minimum requirements for a functional Islandora 8 that is worthy of a 1.0.0 release. Content modeled in Drupal as Entities using PCDM 1.0 REST API exposed for Drupal Entities Support for collections, images, books, and pages The ability to control metadata mappings between Drupal and RDF Provide RDF based default descriptive metadata profile in Drupal The ability to export/import JSON-LD Automatic backup of Drupal content in Fedora 4 Ability to restore/bootstrap a Drupal site from a properly structured Fedora 4 repository The ability to index and search resources with Apache Solr The ability to restrict access to collections and/or individual resources across all representations (Drupal, Fedora, Solr, etc\u2026) Asynchronous derivative generation Vagrant environment for development purposes, which will serve as a starting point for more complicated, distributed installs Architecture Overview Islandora is composed of four broad categories of technologies. On one end, there is the administrative interface, which users and other clients will interact with. On the other is a repository, which will hold binary data and RDF triples. In between the two are connectors, which are small pieces of software that react to events from either administrative interface or the repository. These connectors will utilize microservices -- small utilities exposed as web services either internally or out on the internet at large. Administrative Interface Drupal 8 Drupal 8 provides a content management system (CMS for short) that allows end users the ability to create, edit, publish, and present digital content. Clients will interact with Drupal 8 via a browser or through a http client (such as cURL ) in order to manipulate digital content. With each write operation, messages will be emitted to an event stream for processing by connectors. SQL DB Drupal 8 requires a MySQL (or drop-in replacement) or Postgres database. Search Engine Existing Drupal 8 modules for Apache Solr or Elastic Search will be utilized to provide full text search. Microservices A microservice is a small web service with functionality related to a single problem, even if it exposes just a single function. It can be deployed and configured independently of any other service, even having its own database if necessary. It can even be something that we don\u2019t directly maintain or control ourselves. ID Mapping Service Identifiers between Fedora and Drupal need to be aligned so we can trace our way from one end of the system to the other. Implementing it as a microservice decouples this functionality from the rest of the codebase, allowing it to change or be pluggable with different mapping functions. It will utilize its own database. The ID indexing connector will be its primary client, updating the registry of IDs in response to repository events. Image Conversion Service Image conversion is a common operation in a content repository. Thumbnails, lower resolution copies for everyday access, and JP2s for use with IIIF image servers need to be generated when preservation masters are added or updated. This can be easily implemented by exposing ImageMagick\u2019s convert command as a microservice. Text Extraction Service Text extraction on PDFs or images of written text can be utilized to provide searching capabilities on content of a book or document. Ghostscript can be used on text based PDF\u2019s. Images will require an OCR utility like Tesseract . FITS Web Service The FITS web service is an already existing project that extracts technical metadata and produces FITS xml files. Repository Fedora Fedora 4 houses binary content along with RDF triples for metadata about repository content. It also conforms to the LDP specification, allowing for manipulation of relationships through HTTP operations. API-X API-X allows Islandora to extend the Fedora 4 API. Microservices are registered in API-X and then \u2018bound\u2019 to repository content. A proxy sitting in front of Fedora exposes microservices as functions on repository content, which all HTTP requests must be routed through. For example, suppose Islandora is running the FITS web service described above. Then let\u2019s say we \u2018bind\u2019 it to all binaries in Fedora, with an identifier of \u2018fits\u2019. If we have a binary file at http://fedora-host.com/fcrepo/rest/binaries/example , then instead of writing code to retrieve the content and forward it to our FITS service, we simply visit the proxy at http://apix-host.com/fcrepo/rest/binaries/example/fits . Since services can be described, and that information is made available to interested clients, other applications can make informed decisions about what services are available for particular resources. Triplestore RDF content is indexed in a SPARQL 1.1 compliant triplestore. Connectors Connectors are small programs that listen to the event streams of either the Fedora repository or Drupal. In response to events, they perform actions, often bridging two pieces of technology together (like indexing a triplestore, hence \u2018connectors\u2019). Apache Camel is a natural fit for these types of programs. Connectors will often delegate larger chunks of work to microservices, either bound to content through API-X or used stand-alone. They are primarily concerned with guaranteeing that events are responded to in a idempotent fashion. Due to the nature of asynchronous messaging, certain guarantees, such as timeliness of delivery, cannot be made. So connectors may need to retry a couple of times, or know to ignore a message that\u2019s delivered late or applied twice. This is why it\u2019s important that operations are idempotent. ID Indexer A connector will listen to Fedora events and index unique IDs contained in RDF using the ID Mapping microservice. The predicate used to notate unique IDs can be controlled through configuration. Triplestore Indexer A connector will listen to Fedora events and index RDF in a SPARQL 1.1 triplestore. This is provided by the Fedora community as part of the fcrepo-camel-toolbox project. Sync A sub-project of Alpaca that provides two connectors for keeping information between Fedora and Drupal in sync. One, which indexes content in Fedora from Drupal events, is always running. The other, which indexes content in Drupal based on state in Fedora, is manually triggered through a re-indexing process like other fcrepo-camel-toolbox connectors. Alpaca Alpaca responds to creation and update events for binary files and creates derivative files based on the microservices it finds available for that type of binary in API-X. Derivatives are then ingested into Drupal, with Sync making sure they get flushed back to Fedora. Request Flows Here are the proposed flows for all the different types of requests you can make against repository objects. Read a Resource Suppose a client views a resource in Islandora through their browser. A request is made to Drupal, which looks up the resource in an SQL database, and its representation is returned to the user. Create a Resource Suppose a client submits a form to create a new Resource, or provides a json-ld or binary representation to an entity REST endpoint. The supplied representation is used to create an entity in Drupal. In response to the entity being saved, an event is emitted with supplied representation as the body. The response is then sent back to the client. If using a browser, the client should be redirected to the newly created resource. Meanwhile, Sync will receive the creation event, and ingest the supplied representation in Fedora. Fedora will then emit a creation event. The ID Mapping connector will react, retrieving the Fedora representation and extracting an ID out of the RDF. That ID will be indexed in the ID Mapping microservice. The triple store connector will also react, retrieving RDF and indexing it in the triple store. If the node created was a preservation master, then Alpaca will respond by inspecting the list of derivative generation services bound as extensions on the preservation master in API-X. Each will be invoked, with the new resource getting ingested into Drupal. The process repeats itself again, with new events being emitted for the new entities getting created in Drupal. Sync responds and ingests the derivatives into Fedora. Fedora emits the creation events, but since none are a preservation master, Alpaca does not respond and the cycle is broken. Update a Resource Suppose a client submits a form to update a new Resource, or provides a json-ld or binary representation to an entity REST endpoint. In response to the entity being saved, an event is emitted with supplied representation as the body. The response is then sent back to the client. Meanwhile, Sync will receive the update event, and apply it against the representation in Fedora. Fedora will then emit an update event. The triple store connector will also react, retrieving RDF and indexing it in the triple store. If a binary of a presentation master was updated, then Alpaca will respond by inspecting the list of derivative generation services bound as extensions on the preservation master in API-X. Each will be invoked, with the new resource overwriting its predecessor in Drupal. The process repeats itself again, with new events being emitted for the derivative entities getting updated in Drupal. Sync responds and ingests the derivatives into Fedora. Fedora emits the creation events, but since none are a preservation master, Alpaca does not respond and the cycle is broken. Delete a Resource Suppose a client deletes a resource through the browser or API. In response to the entity being deleted, an event is emitted. The response is then sent back to the client. Meanwhile, Sync will receive the delete event, and remove the corresponding resource in Fedora. The ID Mapping connector will respond to the delete event by removing the resource\u2019s entry. The triple store connector will also respond, deleting all triples with subject of the resource. Content Modeling in Fedora Descriptive metadata will be RDF properties, and a default dcterms descriptive metadata application profile will be created. Technical metadata will be RDF properties, and follow the Hydra/Islandora led technical metadata application profile . Here are Turtle snippets representing the default collection, object, and file types. Collection a pcdm:Collection . dc:title \u201cCollection Title\u201d . dc:description \u201cCollection description\u201d . \u2026 other descriptive metadata \u2026 Image a pcdm:Object, schema:ImageObject . pcdm:memberOf someCollection dc:title \u201cImage Title\u201d . dc:description \u201cImage description\u201d . \u2026 other descriptive metadata \u2026 Image Preservation Master File a pcdmuse:PreservationMasterFile . pcdm:fileOf someImage ebucore:hasMimeType \u201cimage/jpeg\u201d \u2026 other technical metadata \u2026 Image Service File a pcdmuse:ServiceFile . pcdm:fileOf someImage ebucore:hasMimeType \u201cimage/jpeg\u201d \u2026 other technical metadata \u2026 Image Thumbnail File a pcdmuse:ThumbnailImage . pcdm:fileOf someImage ebucore:hasMimeType \u201cimage/png\u201d \u2026 other technical metadata \u2026 Book a pcdm:Object, schema:Book . pcdm:memberOf someCollection iana:first firstPageProxy iana:last lastPageProxy dc:title \u201cBook Title\u201d . dc:description \u201cBook description\u201d . \u2026 other descriptive metadata \u2026 Page a pcdm:Object, schema:ImageObject . pcdm:memberOf someBook dc:title \u201cPage Title\u201d . dc:description \u201cPage description\u201d . \u2026 other descriptive metadata \u2026 Page Proxy a ore:Proxy ore:proxyFor somePage ore:proxyIn someBook iana:prev prevPageProxy iana:next nextPageProxy Page Preservation Master File a pcdmuse:PreservationMasterFile . pcdm:fileOf somePage ebucore:hasMimeType \u201cimage/tiff\u201d \u2026 other technical metadata \u2026 Page Intermediate File a pcdmuse:IntermediateFile . pcdm:fileOf somePage ebucore:hasMimeType \u201cimage/jp2\u201d \u2026 other technical metadata \u2026 Page Service File a pcdmuse:ServiceFile . pcdm:fileOf somePage ebucore:hasMimeType \u201cimage/jpeg\u201d \u2026 other technical metadata \u2026 Page Thumbnail File a pcdmuse:ThumbnailImage . pcdm:fileOf somePage ebucore:hasMimeType \u201cimage/png\u201d \u2026 other technical metadata \u2026 Drupal 8 Objects will be modeled using content entities in Drupal 8. The content entities store their metadata as Drupal fields, which are mapped to RDF using an rdf mapping . An RDF mapping not only allows metadata to be transformed into json-ld, but it also controls which properties from Drupal get preserved in Fedora. Files will be modeled using media entities . Media entities attempt to provide the base storage component for the Drupal 8. They can model any type of media, including local files, YouTube videos, Tweets, Instagram photos, etc\u2026 Ingests and edits can be done for an entire graph of entities using inline entity forms . Although flushing back to Fedora happens at the per-Resource level, using inline entity forms makes the named graph the default unit of work for a repository architect. Here\u2019s an example of what an ingest form could look like using inline entity forms: Here\u2019s a list of the entities required to meet our goals. Each of these entities must have basic RESTful CRUD operations exposed for clients. RdfResource NonRdfResource Proxy Object File Collection Image Page Book Individual entities and named graphs can be imported and exported in json-ld format using json-ld contexts .","title":"Islandora 8 MVP"},{"location":"mvp/mvp_doc/#islandora-8-mvp","text":"","title":"Islandora 8 MVP"},{"location":"mvp/mvp_doc/#motivation","text":"The Islandora 8 project is currently transitioning from a prototype into a competitive product, and has had a requirements change from integration with Drupal 7 to Drupal 8. In order to aid in that transition, we are defining the minimum viable product. This will defend against scope creep, give clearly defined goals for community members to work towards, and present the point at which the development team feels the software is ready to be tested out in small installations. Needless to say, since this is a minimum product, a lot of parts of the previous prototype are either going to get replaced by an existing project to ease the maintenance load, or be removed altogether until time and resources allow other development.","title":"Motivation"},{"location":"mvp/mvp_doc/#high-level-features","text":"These are what are considered the minimum requirements for a functional Islandora 8 that is worthy of a 1.0.0 release. Content modeled in Drupal as Entities using PCDM 1.0 REST API exposed for Drupal Entities Support for collections, images, books, and pages The ability to control metadata mappings between Drupal and RDF Provide RDF based default descriptive metadata profile in Drupal The ability to export/import JSON-LD Automatic backup of Drupal content in Fedora 4 Ability to restore/bootstrap a Drupal site from a properly structured Fedora 4 repository The ability to index and search resources with Apache Solr The ability to restrict access to collections and/or individual resources across all representations (Drupal, Fedora, Solr, etc\u2026) Asynchronous derivative generation Vagrant environment for development purposes, which will serve as a starting point for more complicated, distributed installs","title":"High Level Features"},{"location":"mvp/mvp_doc/#architecture","text":"","title":"Architecture"},{"location":"mvp/mvp_doc/#overview","text":"Islandora is composed of four broad categories of technologies. On one end, there is the administrative interface, which users and other clients will interact with. On the other is a repository, which will hold binary data and RDF triples. In between the two are connectors, which are small pieces of software that react to events from either administrative interface or the repository. These connectors will utilize microservices -- small utilities exposed as web services either internally or out on the internet at large.","title":"Overview"},{"location":"mvp/mvp_doc/#administrative-interface","text":"","title":"Administrative Interface"},{"location":"mvp/mvp_doc/#drupal-8","text":"Drupal 8 provides a content management system (CMS for short) that allows end users the ability to create, edit, publish, and present digital content. Clients will interact with Drupal 8 via a browser or through a http client (such as cURL ) in order to manipulate digital content. With each write operation, messages will be emitted to an event stream for processing by connectors.","title":"Drupal 8"},{"location":"mvp/mvp_doc/#sql-db","text":"Drupal 8 requires a MySQL (or drop-in replacement) or Postgres database.","title":"SQL DB"},{"location":"mvp/mvp_doc/#search-engine","text":"Existing Drupal 8 modules for Apache Solr or Elastic Search will be utilized to provide full text search.","title":"Search Engine"},{"location":"mvp/mvp_doc/#microservices","text":"A microservice is a small web service with functionality related to a single problem, even if it exposes just a single function. It can be deployed and configured independently of any other service, even having its own database if necessary. It can even be something that we don\u2019t directly maintain or control ourselves.","title":"Microservices"},{"location":"mvp/mvp_doc/#id-mapping-service","text":"Identifiers between Fedora and Drupal need to be aligned so we can trace our way from one end of the system to the other. Implementing it as a microservice decouples this functionality from the rest of the codebase, allowing it to change or be pluggable with different mapping functions. It will utilize its own database. The ID indexing connector will be its primary client, updating the registry of IDs in response to repository events.","title":"ID Mapping Service"},{"location":"mvp/mvp_doc/#image-conversion-service","text":"Image conversion is a common operation in a content repository. Thumbnails, lower resolution copies for everyday access, and JP2s for use with IIIF image servers need to be generated when preservation masters are added or updated. This can be easily implemented by exposing ImageMagick\u2019s convert command as a microservice.","title":"Image Conversion Service"},{"location":"mvp/mvp_doc/#text-extraction-service","text":"Text extraction on PDFs or images of written text can be utilized to provide searching capabilities on content of a book or document. Ghostscript can be used on text based PDF\u2019s. Images will require an OCR utility like Tesseract .","title":"Text Extraction Service"},{"location":"mvp/mvp_doc/#fits-web-service","text":"The FITS web service is an already existing project that extracts technical metadata and produces FITS xml files.","title":"FITS Web Service"},{"location":"mvp/mvp_doc/#repository","text":"","title":"Repository"},{"location":"mvp/mvp_doc/#fedora","text":"Fedora 4 houses binary content along with RDF triples for metadata about repository content. It also conforms to the LDP specification, allowing for manipulation of relationships through HTTP operations.","title":"Fedora"},{"location":"mvp/mvp_doc/#api-x","text":"API-X allows Islandora to extend the Fedora 4 API. Microservices are registered in API-X and then \u2018bound\u2019 to repository content. A proxy sitting in front of Fedora exposes microservices as functions on repository content, which all HTTP requests must be routed through. For example, suppose Islandora is running the FITS web service described above. Then let\u2019s say we \u2018bind\u2019 it to all binaries in Fedora, with an identifier of \u2018fits\u2019. If we have a binary file at http://fedora-host.com/fcrepo/rest/binaries/example , then instead of writing code to retrieve the content and forward it to our FITS service, we simply visit the proxy at http://apix-host.com/fcrepo/rest/binaries/example/fits . Since services can be described, and that information is made available to interested clients, other applications can make informed decisions about what services are available for particular resources.","title":"API-X"},{"location":"mvp/mvp_doc/#triplestore","text":"RDF content is indexed in a SPARQL 1.1 compliant triplestore.","title":"Triplestore"},{"location":"mvp/mvp_doc/#connectors","text":"Connectors are small programs that listen to the event streams of either the Fedora repository or Drupal. In response to events, they perform actions, often bridging two pieces of technology together (like indexing a triplestore, hence \u2018connectors\u2019). Apache Camel is a natural fit for these types of programs. Connectors will often delegate larger chunks of work to microservices, either bound to content through API-X or used stand-alone. They are primarily concerned with guaranteeing that events are responded to in a idempotent fashion. Due to the nature of asynchronous messaging, certain guarantees, such as timeliness of delivery, cannot be made. So connectors may need to retry a couple of times, or know to ignore a message that\u2019s delivered late or applied twice. This is why it\u2019s important that operations are idempotent.","title":"Connectors"},{"location":"mvp/mvp_doc/#id-indexer","text":"A connector will listen to Fedora events and index unique IDs contained in RDF using the ID Mapping microservice. The predicate used to notate unique IDs can be controlled through configuration.","title":"ID Indexer"},{"location":"mvp/mvp_doc/#triplestore-indexer","text":"A connector will listen to Fedora events and index RDF in a SPARQL 1.1 triplestore. This is provided by the Fedora community as part of the fcrepo-camel-toolbox project.","title":"Triplestore Indexer"},{"location":"mvp/mvp_doc/#sync","text":"A sub-project of Alpaca that provides two connectors for keeping information between Fedora and Drupal in sync. One, which indexes content in Fedora from Drupal events, is always running. The other, which indexes content in Drupal based on state in Fedora, is manually triggered through a re-indexing process like other fcrepo-camel-toolbox connectors.","title":"Sync"},{"location":"mvp/mvp_doc/#alpaca","text":"Alpaca responds to creation and update events for binary files and creates derivative files based on the microservices it finds available for that type of binary in API-X. Derivatives are then ingested into Drupal, with Sync making sure they get flushed back to Fedora.","title":"Alpaca"},{"location":"mvp/mvp_doc/#request-flows","text":"Here are the proposed flows for all the different types of requests you can make against repository objects.","title":"Request Flows"},{"location":"mvp/mvp_doc/#read-a-resource","text":"Suppose a client views a resource in Islandora through their browser. A request is made to Drupal, which looks up the resource in an SQL database, and its representation is returned to the user.","title":"Read a Resource"},{"location":"mvp/mvp_doc/#create-a-resource","text":"Suppose a client submits a form to create a new Resource, or provides a json-ld or binary representation to an entity REST endpoint. The supplied representation is used to create an entity in Drupal. In response to the entity being saved, an event is emitted with supplied representation as the body. The response is then sent back to the client. If using a browser, the client should be redirected to the newly created resource. Meanwhile, Sync will receive the creation event, and ingest the supplied representation in Fedora. Fedora will then emit a creation event. The ID Mapping connector will react, retrieving the Fedora representation and extracting an ID out of the RDF. That ID will be indexed in the ID Mapping microservice. The triple store connector will also react, retrieving RDF and indexing it in the triple store. If the node created was a preservation master, then Alpaca will respond by inspecting the list of derivative generation services bound as extensions on the preservation master in API-X. Each will be invoked, with the new resource getting ingested into Drupal. The process repeats itself again, with new events being emitted for the new entities getting created in Drupal. Sync responds and ingests the derivatives into Fedora. Fedora emits the creation events, but since none are a preservation master, Alpaca does not respond and the cycle is broken.","title":"Create a Resource"},{"location":"mvp/mvp_doc/#update-a-resource","text":"Suppose a client submits a form to update a new Resource, or provides a json-ld or binary representation to an entity REST endpoint. In response to the entity being saved, an event is emitted with supplied representation as the body. The response is then sent back to the client. Meanwhile, Sync will receive the update event, and apply it against the representation in Fedora. Fedora will then emit an update event. The triple store connector will also react, retrieving RDF and indexing it in the triple store. If a binary of a presentation master was updated, then Alpaca will respond by inspecting the list of derivative generation services bound as extensions on the preservation master in API-X. Each will be invoked, with the new resource overwriting its predecessor in Drupal. The process repeats itself again, with new events being emitted for the derivative entities getting updated in Drupal. Sync responds and ingests the derivatives into Fedora. Fedora emits the creation events, but since none are a preservation master, Alpaca does not respond and the cycle is broken.","title":"Update a Resource"},{"location":"mvp/mvp_doc/#delete-a-resource","text":"Suppose a client deletes a resource through the browser or API. In response to the entity being deleted, an event is emitted. The response is then sent back to the client. Meanwhile, Sync will receive the delete event, and remove the corresponding resource in Fedora. The ID Mapping connector will respond to the delete event by removing the resource\u2019s entry. The triple store connector will also respond, deleting all triples with subject of the resource.","title":"Delete a Resource"},{"location":"mvp/mvp_doc/#content-modeling-in-fedora","text":"Descriptive metadata will be RDF properties, and a default dcterms descriptive metadata application profile will be created. Technical metadata will be RDF properties, and follow the Hydra/Islandora led technical metadata application profile . Here are Turtle snippets representing the default collection, object, and file types.","title":"Content Modeling in Fedora"},{"location":"mvp/mvp_doc/#collection","text":"a pcdm:Collection . dc:title \u201cCollection Title\u201d . dc:description \u201cCollection description\u201d . \u2026 other descriptive metadata \u2026","title":"Collection"},{"location":"mvp/mvp_doc/#image","text":"a pcdm:Object, schema:ImageObject . pcdm:memberOf someCollection dc:title \u201cImage Title\u201d . dc:description \u201cImage description\u201d . \u2026 other descriptive metadata \u2026","title":"Image"},{"location":"mvp/mvp_doc/#image-preservation-master-file","text":"a pcdmuse:PreservationMasterFile . pcdm:fileOf someImage ebucore:hasMimeType \u201cimage/jpeg\u201d \u2026 other technical metadata \u2026","title":"Image Preservation Master File"},{"location":"mvp/mvp_doc/#image-service-file","text":"a pcdmuse:ServiceFile . pcdm:fileOf someImage ebucore:hasMimeType \u201cimage/jpeg\u201d \u2026 other technical metadata \u2026","title":"Image Service File"},{"location":"mvp/mvp_doc/#image-thumbnail-file","text":"a pcdmuse:ThumbnailImage . pcdm:fileOf someImage ebucore:hasMimeType \u201cimage/png\u201d \u2026 other technical metadata \u2026","title":"Image Thumbnail File"},{"location":"mvp/mvp_doc/#book","text":"a pcdm:Object, schema:Book . pcdm:memberOf someCollection iana:first firstPageProxy iana:last lastPageProxy dc:title \u201cBook Title\u201d . dc:description \u201cBook description\u201d . \u2026 other descriptive metadata \u2026","title":"Book"},{"location":"mvp/mvp_doc/#page","text":"a pcdm:Object, schema:ImageObject . pcdm:memberOf someBook dc:title \u201cPage Title\u201d . dc:description \u201cPage description\u201d . \u2026 other descriptive metadata \u2026","title":"Page"},{"location":"mvp/mvp_doc/#page-proxy","text":"a ore:Proxy ore:proxyFor somePage ore:proxyIn someBook iana:prev prevPageProxy iana:next nextPageProxy","title":"Page Proxy"},{"location":"mvp/mvp_doc/#page-preservation-master-file","text":"a pcdmuse:PreservationMasterFile . pcdm:fileOf somePage ebucore:hasMimeType \u201cimage/tiff\u201d \u2026 other technical metadata \u2026","title":"Page Preservation Master File"},{"location":"mvp/mvp_doc/#page-intermediate-file","text":"a pcdmuse:IntermediateFile . pcdm:fileOf somePage ebucore:hasMimeType \u201cimage/jp2\u201d \u2026 other technical metadata \u2026","title":"Page Intermediate File"},{"location":"mvp/mvp_doc/#page-service-file","text":"a pcdmuse:ServiceFile . pcdm:fileOf somePage ebucore:hasMimeType \u201cimage/jpeg\u201d \u2026 other technical metadata \u2026","title":"Page Service File"},{"location":"mvp/mvp_doc/#page-thumbnail-file","text":"a pcdmuse:ThumbnailImage . pcdm:fileOf somePage ebucore:hasMimeType \u201cimage/png\u201d \u2026 other technical metadata \u2026","title":"Page Thumbnail File"},{"location":"mvp/mvp_doc/#drupal-8_1","text":"Objects will be modeled using content entities in Drupal 8. The content entities store their metadata as Drupal fields, which are mapped to RDF using an rdf mapping . An RDF mapping not only allows metadata to be transformed into json-ld, but it also controls which properties from Drupal get preserved in Fedora. Files will be modeled using media entities . Media entities attempt to provide the base storage component for the Drupal 8. They can model any type of media, including local files, YouTube videos, Tweets, Instagram photos, etc\u2026 Ingests and edits can be done for an entire graph of entities using inline entity forms . Although flushing back to Fedora happens at the per-Resource level, using inline entity forms makes the named graph the default unit of work for a repository architect. Here\u2019s an example of what an ingest form could look like using inline entity forms: Here\u2019s a list of the entities required to meet our goals. Each of these entities must have basic RESTful CRUD operations exposed for clients. RdfResource NonRdfResource Proxy Object File Collection Image Page Book Individual entities and named graphs can be imported and exported in json-ld format using json-ld contexts .","title":"Drupal 8"},{"location":"technical-documentation/adding_format_jsonld/","text":"By default, Islandora deploys with the jsonld module and Milliner microservice set to strip Drupal's Symfony-style _format query parameter. This means that when your content is indexed in Fedora, the triplestore, etc... it's URI will be something like http://localhost:8000/node/1 and not http://localhost:8000/node/1?_format=jsonld . If you are using a very early version of Islandora 8 (pre-release), then you may have URIs with _format=jsonld at the end of them. If you update to newer code, you will need to ensure that your site is configured to add ?_format=jsonld back to the URLs if you want to maintain consistency. Go to admin/config/search/jsonld and confirm the 'Remove jsonld parameter from @ids' checkbox is unchecked. Add strip_format_jsonld: false to /var/www/html/Crayfish/Milliner/cfg/config.yaml If you are using claw-playbook and are provisioning new environments for your older Islandora 8, you'll want to lock down the variables in your inventory that control this config. crayfish_milliner_strip_format_jsonld: true webserver_app_jsonld_remove_format: 1","title":"Adding back ?_format=jsonld"},{"location":"technical-documentation/checking-coding-standards/","text":"Checking Code Style Before opening a pull request, you should check your code style. If you are using the Vagrant , you can run phpcs within the Drupal installation directory (on the Vagrant, that is /var/www/html/drupal ) or from within the web directory ( /var/www/html/drupal/web ) as follows: from within Drupal's root directory: ./vendor/bin/phpcs --standard=./vendor/drupal/coder/coder_sniffer/Drupal modules/contrib/my_module , where modules/contrib/my_module is the relative or full path to the PHP file you want to check. from within Drupal's web directory: ../vendor/bin/phpcs --standard=../vendor/drupal/coder/coder_sniffer/Drupal yourfile , where yourfile is the relative or full path to the PHP file you want to check. In both cases: the path to the coding standard file can be relative to where you are running it from, e.g. when in web : --standard=../vendor/drupal/coder/coder_sniffer/Drupal you can specify a single file to check, or a directory path; in the latter case, all files in that directory will be checked. Islandora 8 runs phpcs in its Travis continuous integration environment, and there, it specifies which files to ignore and which files to check. It is a good idea for developers to specify the same options when running phpcs locally, prior to opening a pull request. For example (running phpcs from the within Drupal's web directory), you should use the following --ignore and --extensions options: ../vendor/bin/phpcs --standard=../vendor/drupal/coder/coder_sniffer/Drupal --ignore=*.md --extensions=php,module,inc,install,test,profile,theme,css,info modules/contrib/my_module","title":"Checking Code Style"},{"location":"technical-documentation/checking-coding-standards/#checking-code-style","text":"Before opening a pull request, you should check your code style. If you are using the Vagrant , you can run phpcs within the Drupal installation directory (on the Vagrant, that is /var/www/html/drupal ) or from within the web directory ( /var/www/html/drupal/web ) as follows: from within Drupal's root directory: ./vendor/bin/phpcs --standard=./vendor/drupal/coder/coder_sniffer/Drupal modules/contrib/my_module , where modules/contrib/my_module is the relative or full path to the PHP file you want to check. from within Drupal's web directory: ../vendor/bin/phpcs --standard=../vendor/drupal/coder/coder_sniffer/Drupal yourfile , where yourfile is the relative or full path to the PHP file you want to check. In both cases: the path to the coding standard file can be relative to where you are running it from, e.g. when in web : --standard=../vendor/drupal/coder/coder_sniffer/Drupal you can specify a single file to check, or a directory path; in the latter case, all files in that directory will be checked. Islandora 8 runs phpcs in its Travis continuous integration environment, and there, it specifies which files to ignore and which files to check. It is a good idea for developers to specify the same options when running phpcs locally, prior to opening a pull request. For example (running phpcs from the within Drupal's web directory), you should use the following --ignore and --extensions options: ../vendor/bin/phpcs --standard=../vendor/drupal/coder/coder_sniffer/Drupal --ignore=*.md --extensions=php,module,inc,install,test,profile,theme,css,info modules/contrib/my_module","title":"Checking Code Style"},{"location":"technical-documentation/docs-build/","text":"Introduction This documentation is built using mkdocs , a static site generator that is geared towards building project documentation. The documentation is created in the Markdown format, and it all resides in the docs directory in the repository. The organization of the documentation is controlled by the mkdocs.yml in the root of the repository. Prerequisites You will need to have mkdocs installed locally, as well as the mkdocs theme. Install mkdocs : sudo -H pip install mkdocs Install material theme: sudo -H pip install mkdocs-material Build and Deploy documentation Make sure you have all the submodules: git submodule update --init --recursive Documentation is build by running to the following command in the root of the repository: mkdocs build --clean This command will create a static site folder in the root of the repository. You can preview any changes you have made to the documentation by running the following command: mkdocs serve And then visiting http://localhost:8111 in your browser. To deploy documentation to GitHub Pages, issue the following command: mkdocs gh-deploy --clean","title":"How to Build Documentation"},{"location":"technical-documentation/docs-build/#introduction","text":"This documentation is built using mkdocs , a static site generator that is geared towards building project documentation. The documentation is created in the Markdown format, and it all resides in the docs directory in the repository. The organization of the documentation is controlled by the mkdocs.yml in the root of the repository.","title":"Introduction"},{"location":"technical-documentation/docs-build/#prerequisites","text":"You will need to have mkdocs installed locally, as well as the mkdocs theme. Install mkdocs : sudo -H pip install mkdocs Install material theme: sudo -H pip install mkdocs-material","title":"Prerequisites"},{"location":"technical-documentation/docs-build/#build-and-deploy-documentation","text":"Make sure you have all the submodules: git submodule update --init --recursive Documentation is build by running to the following command in the root of the repository: mkdocs build --clean This command will create a static site folder in the root of the repository. You can preview any changes you have made to the documentation by running the following command: mkdocs serve And then visiting http://localhost:8111 in your browser. To deploy documentation to GitHub Pages, issue the following command: mkdocs gh-deploy --clean","title":"Build and Deploy documentation"},{"location":"technical-documentation/docs_style_guide/","text":"Documentation Style Guide Do's Submit documentation formatted in Markdown format. -- Please add Markdown headings to the content sections. Use a GitHub Pull Request to submit documentation. Use the \"bold/emphasis\" style in Markdown for UI elements that users will interact with. For example, a button label for a button that must be pressed should be made bold in Markdown. Use the \"italics\" style in Markdown for UI elements that have a label or title if you need to reference them in the documentation. For example, a title of a screen or page that will visit should be made italic in Markdown. Don'ts Do not leave any \"trailing spaces\" at the end of lines of content. Do not use \"curly\" quotes and apostrophes, use only \"straight\" quotes and apostrophes.","title":"Documentation Style Guide"},{"location":"technical-documentation/docs_style_guide/#documentation-style-guide","text":"","title":"Documentation Style Guide"},{"location":"technical-documentation/docs_style_guide/#dos","text":"Submit documentation formatted in Markdown format. -- Please add Markdown headings to the content sections. Use a GitHub Pull Request to submit documentation. Use the \"bold/emphasis\" style in Markdown for UI elements that users will interact with. For example, a button label for a button that must be pressed should be made bold in Markdown. Use the \"italics\" style in Markdown for UI elements that have a label or title if you need to reference them in the documentation. For example, a title of a screen or page that will visit should be made italic in Markdown.","title":"Do's"},{"location":"technical-documentation/docs_style_guide/#donts","text":"Do not leave any \"trailing spaces\" at the end of lines of content. Do not use \"curly\" quotes and apostrophes, use only \"straight\" quotes and apostrophes.","title":"Don'ts"},{"location":"technical-documentation/drupal-project/","text":"Introduction Islandora 8 makes use of drupal-project , a composer template for Drupal projects. We augment it with Islandora specific changes, and need to occasionally pull in upstream changes. The process below outlines how we will do it in a consistent manner. Pull in upstream changes Clone a fork of our fork to your or your institution's GitHub organization: git clone fork Add the drupal-composer repository as a remote: git remote add upstream https://github.com/drupal-composer/drupal-project.git Fetch everything: git fetch --all Create a branch to pull in changes that is based off the Islandora 8.x-1.x branch: git checkout -b sync-upstream Rebase upstream changes: git rebase upstream/8.x (fix any merge conflicts, and then git rebase --continue ) Push to your fork: git push origin sync-upstream Create pull request","title":"Introduction"},{"location":"technical-documentation/drupal-project/#introduction","text":"Islandora 8 makes use of drupal-project , a composer template for Drupal projects. We augment it with Islandora specific changes, and need to occasionally pull in upstream changes. The process below outlines how we will do it in a consistent manner.","title":"Introduction"},{"location":"technical-documentation/drupal-project/#pull-in-upstream-changes","text":"Clone a fork of our fork to your or your institution's GitHub organization: git clone fork Add the drupal-composer repository as a remote: git remote add upstream https://github.com/drupal-composer/drupal-project.git Fetch everything: git fetch --all Create a branch to pull in changes that is based off the Islandora 8.x-1.x branch: git checkout -b sync-upstream Rebase upstream changes: git rebase upstream/8.x (fix any merge conflicts, and then git rebase --continue ) Push to your fork: git push origin sync-upstream Create pull request","title":"Pull in upstream changes"},{"location":"technical-documentation/flysystem/","text":"Flysystem Islandora uses Flysystem and the associated Drupal module to persist binary files to Fedora instead of keeping a copy in both Drupal and Fedora. Background \" Flysystem is a filesystem abstraction library for PHP\" which allows applications to read from and write to a variety of data source beyond the local file system, such as an SFTP server , Amazon S3 , and Zip files provided an Adapter is available to support it. Flysystem Adapters extend a single class implementing League\\Flysystem\\FilesystemInterface although some separate adapter traits for common actions and properties, such as the StreamedCopyTrait, are available. The Drupal Flysystem module extends Flysystem to work within the Drupal filesystem structure. Drupal flysystem plugins include a Flysystem adapter (if not provided by default or in another library) and a class implementing Drupal\\flysystem\\Plugin\\FlysystemPluginInterface which instantiates the Flysystem adapter based on the Drupal site's configuration. The Drupal Flysystem module uses flysystem stream wrappers to define filesystem descriptors which are configured in the site's settings.php file. The configurations including the filesystem prefix, adapter (driver), and any adapter-specific configurations such as API endpoints and authorization information. Islandora's Implementation The Plugin and Adapter Islandora 8 implements a Flysystem adapter and a Drupal Flysystem plugin . The Flysystem adapter acts as an intermediary between the Flysystem filesystem API and Fedora, translating requests and responses between them. The adapter interacts with Fedora using an instance of the Chullo Fedora API it receives from the Drupal Flysystem plugin. The Drupal Flysystem plugin's main responsibility is to instantiate the Chullo Fedora API object with the proper authentication and pass it to the Flysystem adapter. To authenticate with Fedora the plugin adds a handler to the Chullo's Guzzle client which adds a JWT authentication header to each request. The Fedora Flysystem adapter does not use Gemini to map the relationship between Drupal URIs and Fedora URIs, so they are indexed separately using the \"files_in_fedora\" Context which triggers the \"Index Fedora File in Gemini\" and \"Delete Fedora File in Gemini\" actions as appropriate. Configuration The fedora file system is configured in the site's settings.php file. An example configuration can be seen in the claw-playbook web server role's drupal tasks : $settings['flysystem'] = [ 'fedora' = [ 'driver' = 'fedora', 'config' = [ 'root' = 'http://localhost:8080/fcrepo/rest/', ], ], ]; The configuration array's top-level key is the name of the Drupal stream wrapper, which also serves as the filesystem prefix. Any Drupal file path using \"fedora://\" will use this Flysystem adapter. Drupal will translate this prefix to the site's domain plus \"_flystem/fedora/\". For example, using the default configuration provided by the claw-playbook, a file stored at \"fedora://test.tif\" will persist to Fedora with the URI \"http://localhost:8080/fcrepo/rest/test.tif\" and will be accessible from the Drupal URL \"http://localhost:8000/_flysystem/fedora/test.tif\". The 'driver' value 'fedora' corresponds to the plugin's machine name . The 'config' section contains all the adapter-specific configurations. In this case, the only thing configured for the site is the Fedora REST end-point. (Change this value to match your own Fedora's location, if needed.) The JWT is configured separately. Other examples of Drupal Flysystem configurations can be seen in the module's README . Islandora is configured to have all Media use the Fedora file system by default in the islandora_core_feature. For example, the field storage uri_scheme setting for field_media_image (and the other media types) is \"fedora\". This can also be viewed in the UI on the field's \"Field settings\" page; e.g. http://localhost:8000/admin/structure/media/manage/image/fields/media.image.field_media_image/storage , look for \"Upload destination\" and see that \"Flysystem: fedora\" is selected. However, there are methods for saving files that can explicitly set a different filesystem than the default. Migrations can explicitly set which file system a file is saved to and Islandora can emit events that also specify which file system a derivative should be saved to. Derivatives As hinted in the previous section, Islandora, by default saves derivatives to the Drupal public file system. For example, if I upload a Tiff to a repository item as a File Media with the term \"Original File\", the \"Image Original File\" ( image_original_file ) Context is triggered. This fires the 'image_generate_a_service_file_from_an_original_file' action which emits an event using the 'public' scheme (file system) . To make Islandora save future derivatives to Fedora instead of to Drupal, change the corresponding action's \"File system\" setting ('scheme' in the corresponding config file) to 'fedora' instead of 'public'.","title":"Flysystem"},{"location":"technical-documentation/flysystem/#flysystem","text":"Islandora uses Flysystem and the associated Drupal module to persist binary files to Fedora instead of keeping a copy in both Drupal and Fedora.","title":"Flysystem"},{"location":"technical-documentation/flysystem/#background","text":"\" Flysystem is a filesystem abstraction library for PHP\" which allows applications to read from and write to a variety of data source beyond the local file system, such as an SFTP server , Amazon S3 , and Zip files provided an Adapter is available to support it. Flysystem Adapters extend a single class implementing League\\Flysystem\\FilesystemInterface although some separate adapter traits for common actions and properties, such as the StreamedCopyTrait, are available. The Drupal Flysystem module extends Flysystem to work within the Drupal filesystem structure. Drupal flysystem plugins include a Flysystem adapter (if not provided by default or in another library) and a class implementing Drupal\\flysystem\\Plugin\\FlysystemPluginInterface which instantiates the Flysystem adapter based on the Drupal site's configuration. The Drupal Flysystem module uses flysystem stream wrappers to define filesystem descriptors which are configured in the site's settings.php file. The configurations including the filesystem prefix, adapter (driver), and any adapter-specific configurations such as API endpoints and authorization information.","title":"Background"},{"location":"technical-documentation/flysystem/#islandoras-implementation","text":"","title":"Islandora's Implementation"},{"location":"technical-documentation/flysystem/#the-plugin-and-adapter","text":"Islandora 8 implements a Flysystem adapter and a Drupal Flysystem plugin . The Flysystem adapter acts as an intermediary between the Flysystem filesystem API and Fedora, translating requests and responses between them. The adapter interacts with Fedora using an instance of the Chullo Fedora API it receives from the Drupal Flysystem plugin. The Drupal Flysystem plugin's main responsibility is to instantiate the Chullo Fedora API object with the proper authentication and pass it to the Flysystem adapter. To authenticate with Fedora the plugin adds a handler to the Chullo's Guzzle client which adds a JWT authentication header to each request. The Fedora Flysystem adapter does not use Gemini to map the relationship between Drupal URIs and Fedora URIs, so they are indexed separately using the \"files_in_fedora\" Context which triggers the \"Index Fedora File in Gemini\" and \"Delete Fedora File in Gemini\" actions as appropriate.","title":"The Plugin and Adapter"},{"location":"technical-documentation/flysystem/#configuration","text":"The fedora file system is configured in the site's settings.php file. An example configuration can be seen in the claw-playbook web server role's drupal tasks : $settings['flysystem'] = [ 'fedora' = [ 'driver' = 'fedora', 'config' = [ 'root' = 'http://localhost:8080/fcrepo/rest/', ], ], ]; The configuration array's top-level key is the name of the Drupal stream wrapper, which also serves as the filesystem prefix. Any Drupal file path using \"fedora://\" will use this Flysystem adapter. Drupal will translate this prefix to the site's domain plus \"_flystem/fedora/\". For example, using the default configuration provided by the claw-playbook, a file stored at \"fedora://test.tif\" will persist to Fedora with the URI \"http://localhost:8080/fcrepo/rest/test.tif\" and will be accessible from the Drupal URL \"http://localhost:8000/_flysystem/fedora/test.tif\". The 'driver' value 'fedora' corresponds to the plugin's machine name . The 'config' section contains all the adapter-specific configurations. In this case, the only thing configured for the site is the Fedora REST end-point. (Change this value to match your own Fedora's location, if needed.) The JWT is configured separately. Other examples of Drupal Flysystem configurations can be seen in the module's README . Islandora is configured to have all Media use the Fedora file system by default in the islandora_core_feature. For example, the field storage uri_scheme setting for field_media_image (and the other media types) is \"fedora\". This can also be viewed in the UI on the field's \"Field settings\" page; e.g. http://localhost:8000/admin/structure/media/manage/image/fields/media.image.field_media_image/storage , look for \"Upload destination\" and see that \"Flysystem: fedora\" is selected. However, there are methods for saving files that can explicitly set a different filesystem than the default. Migrations can explicitly set which file system a file is saved to and Islandora can emit events that also specify which file system a derivative should be saved to.","title":"Configuration"},{"location":"technical-documentation/flysystem/#derivatives","text":"As hinted in the previous section, Islandora, by default saves derivatives to the Drupal public file system. For example, if I upload a Tiff to a repository item as a File Media with the term \"Original File\", the \"Image Original File\" ( image_original_file ) Context is triggered. This fires the 'image_generate_a_service_file_from_an_original_file' action which emits an event using the 'public' scheme (file system) . To make Islandora save future derivatives to Fedora instead of to Drupal, change the corresponding action's \"File system\" setting ('scheme' in the corresponding config file) to 'fedora' instead of 'public'.","title":"Derivatives"},{"location":"technical-documentation/install-enable-drupal-modules/","text":"Downloading and Enabling Drupal Modules and Themes Islandora 8 can make use of majority of the Drupal 8 modules and themes . Common use cases have been documented in the Islandora 8 Cookbook . There are several ways to download and install Drupal modules. Please refer to this guide on Drupal.org. Composer is the recommended method to install and update drupal modules and themes in Islandora 8. In the Islandora 8 playbook , you can add a Drupal module's or theme's machine name to the drupal_composer_dependencies variable here . To enable the Drupal module or theme, add the module machine name to the drupal_enable_modules variable as well. For modules that require additional steps, additional tasks may need to be added to the Ansible playbook. Re-provisioning your instance via Ansible will install the module.","title":"Installing Modules"},{"location":"technical-documentation/install-enable-drupal-modules/#downloading-and-enabling-drupal-modules-and-themes","text":"Islandora 8 can make use of majority of the Drupal 8 modules and themes . Common use cases have been documented in the Islandora 8 Cookbook . There are several ways to download and install Drupal modules. Please refer to this guide on Drupal.org. Composer is the recommended method to install and update drupal modules and themes in Islandora 8. In the Islandora 8 playbook , you can add a Drupal module's or theme's machine name to the drupal_composer_dependencies variable here . To enable the Drupal module or theme, add the module machine name to the drupal_enable_modules variable as well. For modules that require additional steps, additional tasks may need to be added to the Ansible playbook. Re-provisioning your instance via Ansible will install the module.","title":"Downloading and Enabling Drupal Modules and Themes"},{"location":"technical-documentation/jwt/","text":"Islandora uses JWT tokens to authenticate communication between its components. RSA private public key pair is used to sign and verify JWT tokens. The process of issuing JWT tokens using RSA private key is handled by the Drupal jwt module. The private public RSA pair needed by JWT authentication mechanism is generated in the web server. By default, claw playbook places the keys in /opt/islandora/auth . Crayfish and Tomcat/Karaf need the public key to verify the JWT token. By default, they are put in the following locations: /var/www/html/Crayfish/public.key , /etc/tomcat8/public.key . If you are deploying Crayfish and Karaf/Tomcat components to different servers, ensure that web server public.key files are in the expected locations. Note that the connection need to be over SSL or an encrypted channel for this communication to be secure. Otherwise, a third party can capture your token and get access to your servers. The JWT tokens expiration time is configurable via Islandora core settings: http://localhost:8000/admin/config/islandora/core . Currently it is recommend to set the JWT Expiry to the maximum expected time for a job, including batch jobs.","title":"JWT Authentication"},{"location":"technical-documentation/migrate-7x/","text":"For tools to migrate into Islandora 8 from an existing Islandora 7 instance, please see migrate_7x_claw","title":"Islandora 7"},{"location":"technical-documentation/migrate-csv/","text":"For a full tutorial on migrating from CSV, including sample content, please see migrate_islandora_csv","title":"CSV"},{"location":"technical-documentation/ppa-documentation/","text":"Updating a deb and adding it to LYRASIS PPA Background Ubuntu removed JPEG2000 support from ImageMagick since Vivid Vervet's 8:6.8.9.9-5 version. The PPA that we have created adds JPEG2000 support back into ImageMagick for Ubuntu 16.04 and 18.04. More information on why JPEG2000 support was removed can be found here , and more information on openjpeg in Ubuntu can be found here . Prerequisites Review the Ubuntu Packaging Guide . Key items needed are in the Getting Set Up section : Basic packaging software: sudo apt install gnupg pbuilder ubuntu-dev-tools apt-file Make sure you have your GPG, if you do not, follow the instructions in the guide. Setup pbuilder : pbuilder-dist bionic create Configure your shell with some exports for debuild : export DEBFULLNAME=\"Bob Dobbs\" export DEBEMAIL=\"subgenius@example.com\" Contact Jonathan Green to get setup on the LYRASIS PPA team . Patching source imagemagick is used an example. If you need to only change or patch the actual source code, then you will need to use quilt . More information on using quilt can be found in the Patches to Packages section . If you are only change dependencies, or information in the debian directory of a package, quilt is not required, and if used will cause build failures . Create a directory to work in: mkdir imagemagick-bionic-jp2 cd imagemagick-bionic-jp2 Pull down the source: pull-lp-source imagemagick bionic cd imagemagick-6.9.7.4+dfsg Edit files as needed Document the fix: dch ( Make sure to change UNRELEASED to the Ubuntu release name. For example: bionic ) Build the package: debuild -S Example Patch Index: imagemagick-6.9.7.4+dfsg/debian/control =================================================================== --- imagemagick-6.9.7.4+dfsg.orig/debian/control +++ imagemagick-6.9.7.4+dfsg/debian/control @@ -26,8 +26,7 @@ Build-Depends: debhelper ( = 10), libx11-dev, libxext-dev, libxt-dev, # for plugins ghostscript, libdjvulibre-dev, libexif-dev, - libjpeg-dev, -# libopenjp2-7-dev, Needed for JPEG2000 but not in main see MIR #711061 + libjpeg-dev, libopenjp2-7-dev, libopenexr-dev, libperl-dev, libpng-dev, libtiff-dev, libwmf-dev, # libgraphviz-dev, incompatible license against fftw @@ -273,8 +272,7 @@ Depends: libmagickcore-6-headers (= ${so libmagickcore-6.q16-3 (= ${binary:Version}), libmagickcore-6.q16-3-extra (= ${binary:Version}), libbz2-dev, libdjvulibre-dev, - libexif-dev, libfreetype6-dev, libjpeg-dev, -# libopenjp2-7-dev, Needed for JPEG2000 but not in main see MIR #711061 + libexif-dev, libfreetype6-dev, libjpeg-dev, libopenjp2-7-dev, liblcms2-dev, liblqr-1-0-dev, libltdl-dev, libopenexr-dev, libpng-dev, librsvg2-dev, libtiff-dev, libwmf-dev, libx11-dev, libxext-dev, libxml2-dev, libxt-dev, zlib1g-dev, @@ -483,8 +481,7 @@ Depends: libmagickcore-6-headers (= ${so libmagickcore-6.q16hdri-3 (= ${binary:Version}), libmagickcore-6.q16hdri-3-extra (= ${binary:Version}), libbz2-dev, libdjvulibre-dev, - libexif-dev, libfreetype6-dev, libjpeg-dev, -# libopenjp2-7-dev, Needed for JPEG2000 but not in main see MIR #711061 + libexif-dev, libfreetype6-dev, libjpeg-dev, libopenjp2-7-dev, liblcms2-dev, liblqr-1-0-dev, libltdl-dev, libopenexr-dev, libpng-dev, librsvg2-dev, libtiff-dev, libwmf-dev, libx11-dev, libxext-dev, libxml2-dev, libxt-dev, zlib1g-dev, Index: imagemagick-6.9.7.4+dfsg/debian/control.d/noquantum.in =================================================================== --- imagemagick-6.9.7.4+dfsg.orig/debian/control.d/noquantum.in +++ imagemagick-6.9.7.4+dfsg/debian/control.d/noquantum.in @@ -26,8 +26,7 @@ Build-Depends: debhelper ( = 10), libx11-dev, libxext-dev, libxt-dev, # for plugins ghostscript, libdjvulibre-dev, libexif-dev, - libjpeg-dev, -# libopenjp2-7-dev, Needed for JPEG2000 but not in main see MIR #711061 + libjpeg-dev, libopenjp2-7-dev, libopenexr-dev, libperl-dev, libpng-dev, libtiff-dev, libwmf-dev, # libgraphviz-dev, incompatible license against fftw Index: imagemagick-6.9.7.4+dfsg/debian/control.d/quantum.in =================================================================== --- imagemagick-6.9.7.4+dfsg.orig/debian/control.d/quantum.in +++ imagemagick-6.9.7.4+dfsg/debian/control.d/quantum.in @@ -78,8 +78,7 @@ Depends: libmagickcore-${IMVERSION}-head libmagickcore-${IMVERSION}.${QUANTUMDEPTH}-${CORESOVERSION} (= ${binary:Version}), libmagickcore-${IMVERSION}.${QUANTUMDEPTH}-${CORESOVERSION}-extra (= ${binary:Version}), libbz2-dev, libdjvulibre-dev, - libexif-dev, libfreetype6-dev, libjpeg-dev, -# libopenjp2-7-dev, Needed for JPEG2000 but not in main see MIR #711061 + libexif-dev, libfreetype6-dev, libjpeg-dev, libopenjp2-7-dev, liblcms2-dev, liblqr-1-0-dev, libltdl-dev, libopenexr-dev, libpng-dev, librsvg2-dev, libtiff-dev, libwmf-dev, libx11-dev, libxext-dev, libxml2-dev, libxt-dev, zlib1g-dev, Index: imagemagick-6.9.7.4+dfsg/debian/rules =================================================================== --- imagemagick-6.9.7.4+dfsg.orig/debian/rules +++ imagemagick-6.9.7.4+dfsg/debian/rules @@ -98,7 +98,7 @@ STATIC_CONFIGURE_OPTIONS := \\ --with-gs-font-dir=/usr/share/fonts/type1/gsfonts \\ --with-magick-plus-plus \\ --with-djvu \\ - --with-openjp2 \\ + --with-openjp2 \\ --with-wmf \\ --without-gvc \\ --enable-shared \\ Uploading to LYRASIS PPA Once the package is built successfully, you'll upload the changes file to Launchpad. For example: dput ppa:lyrasis/imagemagick-jp2 imagemagick_6.9.7.4+dfsg-16ubuntu6.8_source.changes After the package is successfully uploaded to the PPA, you'll receive an email from Launchpad. Something like this: Accepted: OK: imagemagick_6.9.7.4+dfsg.orig.tar.xz OK: imagemagick_6.9.7.4+dfsg-16ubuntu6.8.debian.tar.xz OK: imagemagick_6.9.7.4+dfsg-16ubuntu6.8.dsc - Component: main Section: graphics imagemagick (8:6.9.7.4+dfsg-16ubuntu6.8) bionic; urgency=medium * Add jp2 support. And you will see it in the interface for the Lyrasis PPA:","title":"Updating a `deb` and adding it to Lyrasis PPA"},{"location":"technical-documentation/ppa-documentation/#updating-a-deb-and-adding-it-to-lyrasis-ppa","text":"","title":"Updating a deb and adding it to LYRASIS PPA"},{"location":"technical-documentation/ppa-documentation/#background","text":"Ubuntu removed JPEG2000 support from ImageMagick since Vivid Vervet's 8:6.8.9.9-5 version. The PPA that we have created adds JPEG2000 support back into ImageMagick for Ubuntu 16.04 and 18.04. More information on why JPEG2000 support was removed can be found here , and more information on openjpeg in Ubuntu can be found here .","title":"Background"},{"location":"technical-documentation/ppa-documentation/#prerequisites","text":"Review the Ubuntu Packaging Guide . Key items needed are in the Getting Set Up section : Basic packaging software: sudo apt install gnupg pbuilder ubuntu-dev-tools apt-file Make sure you have your GPG, if you do not, follow the instructions in the guide. Setup pbuilder : pbuilder-dist bionic create Configure your shell with some exports for debuild : export DEBFULLNAME=\"Bob Dobbs\" export DEBEMAIL=\"subgenius@example.com\" Contact Jonathan Green to get setup on the LYRASIS PPA team .","title":"Prerequisites"},{"location":"technical-documentation/ppa-documentation/#patching-source","text":"imagemagick is used an example. If you need to only change or patch the actual source code, then you will need to use quilt . More information on using quilt can be found in the Patches to Packages section . If you are only change dependencies, or information in the debian directory of a package, quilt is not required, and if used will cause build failures . Create a directory to work in: mkdir imagemagick-bionic-jp2 cd imagemagick-bionic-jp2 Pull down the source: pull-lp-source imagemagick bionic cd imagemagick-6.9.7.4+dfsg Edit files as needed Document the fix: dch ( Make sure to change UNRELEASED to the Ubuntu release name. For example: bionic ) Build the package: debuild -S","title":"Patching source"},{"location":"technical-documentation/ppa-documentation/#example-patch","text":"Index: imagemagick-6.9.7.4+dfsg/debian/control =================================================================== --- imagemagick-6.9.7.4+dfsg.orig/debian/control +++ imagemagick-6.9.7.4+dfsg/debian/control @@ -26,8 +26,7 @@ Build-Depends: debhelper ( = 10), libx11-dev, libxext-dev, libxt-dev, # for plugins ghostscript, libdjvulibre-dev, libexif-dev, - libjpeg-dev, -# libopenjp2-7-dev, Needed for JPEG2000 but not in main see MIR #711061 + libjpeg-dev, libopenjp2-7-dev, libopenexr-dev, libperl-dev, libpng-dev, libtiff-dev, libwmf-dev, # libgraphviz-dev, incompatible license against fftw @@ -273,8 +272,7 @@ Depends: libmagickcore-6-headers (= ${so libmagickcore-6.q16-3 (= ${binary:Version}), libmagickcore-6.q16-3-extra (= ${binary:Version}), libbz2-dev, libdjvulibre-dev, - libexif-dev, libfreetype6-dev, libjpeg-dev, -# libopenjp2-7-dev, Needed for JPEG2000 but not in main see MIR #711061 + libexif-dev, libfreetype6-dev, libjpeg-dev, libopenjp2-7-dev, liblcms2-dev, liblqr-1-0-dev, libltdl-dev, libopenexr-dev, libpng-dev, librsvg2-dev, libtiff-dev, libwmf-dev, libx11-dev, libxext-dev, libxml2-dev, libxt-dev, zlib1g-dev, @@ -483,8 +481,7 @@ Depends: libmagickcore-6-headers (= ${so libmagickcore-6.q16hdri-3 (= ${binary:Version}), libmagickcore-6.q16hdri-3-extra (= ${binary:Version}), libbz2-dev, libdjvulibre-dev, - libexif-dev, libfreetype6-dev, libjpeg-dev, -# libopenjp2-7-dev, Needed for JPEG2000 but not in main see MIR #711061 + libexif-dev, libfreetype6-dev, libjpeg-dev, libopenjp2-7-dev, liblcms2-dev, liblqr-1-0-dev, libltdl-dev, libopenexr-dev, libpng-dev, librsvg2-dev, libtiff-dev, libwmf-dev, libx11-dev, libxext-dev, libxml2-dev, libxt-dev, zlib1g-dev, Index: imagemagick-6.9.7.4+dfsg/debian/control.d/noquantum.in =================================================================== --- imagemagick-6.9.7.4+dfsg.orig/debian/control.d/noquantum.in +++ imagemagick-6.9.7.4+dfsg/debian/control.d/noquantum.in @@ -26,8 +26,7 @@ Build-Depends: debhelper ( = 10), libx11-dev, libxext-dev, libxt-dev, # for plugins ghostscript, libdjvulibre-dev, libexif-dev, - libjpeg-dev, -# libopenjp2-7-dev, Needed for JPEG2000 but not in main see MIR #711061 + libjpeg-dev, libopenjp2-7-dev, libopenexr-dev, libperl-dev, libpng-dev, libtiff-dev, libwmf-dev, # libgraphviz-dev, incompatible license against fftw Index: imagemagick-6.9.7.4+dfsg/debian/control.d/quantum.in =================================================================== --- imagemagick-6.9.7.4+dfsg.orig/debian/control.d/quantum.in +++ imagemagick-6.9.7.4+dfsg/debian/control.d/quantum.in @@ -78,8 +78,7 @@ Depends: libmagickcore-${IMVERSION}-head libmagickcore-${IMVERSION}.${QUANTUMDEPTH}-${CORESOVERSION} (= ${binary:Version}), libmagickcore-${IMVERSION}.${QUANTUMDEPTH}-${CORESOVERSION}-extra (= ${binary:Version}), libbz2-dev, libdjvulibre-dev, - libexif-dev, libfreetype6-dev, libjpeg-dev, -# libopenjp2-7-dev, Needed for JPEG2000 but not in main see MIR #711061 + libexif-dev, libfreetype6-dev, libjpeg-dev, libopenjp2-7-dev, liblcms2-dev, liblqr-1-0-dev, libltdl-dev, libopenexr-dev, libpng-dev, librsvg2-dev, libtiff-dev, libwmf-dev, libx11-dev, libxext-dev, libxml2-dev, libxt-dev, zlib1g-dev, Index: imagemagick-6.9.7.4+dfsg/debian/rules =================================================================== --- imagemagick-6.9.7.4+dfsg.orig/debian/rules +++ imagemagick-6.9.7.4+dfsg/debian/rules @@ -98,7 +98,7 @@ STATIC_CONFIGURE_OPTIONS := \\ --with-gs-font-dir=/usr/share/fonts/type1/gsfonts \\ --with-magick-plus-plus \\ --with-djvu \\ - --with-openjp2 \\ + --with-openjp2 \\ --with-wmf \\ --without-gvc \\ --enable-shared \\","title":"Example Patch"},{"location":"technical-documentation/ppa-documentation/#uploading-to-lyrasis-ppa","text":"Once the package is built successfully, you'll upload the changes file to Launchpad. For example: dput ppa:lyrasis/imagemagick-jp2 imagemagick_6.9.7.4+dfsg-16ubuntu6.8_source.changes After the package is successfully uploaded to the PPA, you'll receive an email from Launchpad. Something like this: Accepted: OK: imagemagick_6.9.7.4+dfsg.orig.tar.xz OK: imagemagick_6.9.7.4+dfsg-16ubuntu6.8.debian.tar.xz OK: imagemagick_6.9.7.4+dfsg-16ubuntu6.8.dsc - Component: main Section: graphics imagemagick (8:6.9.7.4+dfsg-16ubuntu6.8) bionic; urgency=medium * Add jp2 support. And you will see it in the interface for the Lyrasis PPA:","title":"Uploading to LYRASIS PPA"},{"location":"technical-documentation/resizing_vm/","text":"Resize vagrant machine To expand virtual machine's harddrive for testing of larger files. Once the VM has started, you'll need to halt the VM, download and run the script, tell it what size (in MB) and then start the VM. The last step vagrant ssh --command \"sudo resize2fs /dev/sda1\" is a check. It should return there was nothing to do. If you already provisioned you VM you can skip the 2 steps with provisioning in them. # Skip this if you VM is already provisioned. $ vagrant up --no-provision -- Exclude if already running and provisioned. $ vagrant halt # Download and run. This will default to the correct name (just press enter) then give the size. # Example: `350000` is equal to 350GB $ wget https://gist.githubusercontent.com/DonRichards/6dc6c81ae9fc22cba8d7a57b90ab1509/raw/98cd6daeafe86c8e830495f9b46eb04e590f4b4f/expand_disk.py $ chmod +x expand_disk.py $ python expand_disk.py $ vagrant up --no-provision # This step isn't needed but acts as a check to verify it worked. $ vagrant ssh --command sudo resize2fs /dev/sda1 # Skip this if you VM is already provisioned. $ vagrant provision -- Exclude if already provisioned. Troubleshooting expand_disk.py You may need to remove the \"resized\" version. Assuming your VM location is ~/VirtualBox\\ VMs $ rm -rf ~/VirtualBox\\ VMs/Islandora\\ CLAW\\ Ansible_resized","title":"Resizing vm"},{"location":"technical-documentation/resizing_vm/#resize-vagrant-machine","text":"To expand virtual machine's harddrive for testing of larger files. Once the VM has started, you'll need to halt the VM, download and run the script, tell it what size (in MB) and then start the VM. The last step vagrant ssh --command \"sudo resize2fs /dev/sda1\" is a check. It should return there was nothing to do. If you already provisioned you VM you can skip the 2 steps with provisioning in them. # Skip this if you VM is already provisioned. $ vagrant up --no-provision -- Exclude if already running and provisioned. $ vagrant halt # Download and run. This will default to the correct name (just press enter) then give the size. # Example: `350000` is equal to 350GB $ wget https://gist.githubusercontent.com/DonRichards/6dc6c81ae9fc22cba8d7a57b90ab1509/raw/98cd6daeafe86c8e830495f9b46eb04e590f4b4f/expand_disk.py $ chmod +x expand_disk.py $ python expand_disk.py $ vagrant up --no-provision # This step isn't needed but acts as a check to verify it worked. $ vagrant ssh --command sudo resize2fs /dev/sda1 # Skip this if you VM is already provisioned. $ vagrant provision -- Exclude if already provisioned.","title":"Resize vagrant machine"},{"location":"technical-documentation/resizing_vm/#troubleshooting-expand_diskpy","text":"You may need to remove the \"resized\" version. Assuming your VM location is ~/VirtualBox\\ VMs $ rm -rf ~/VirtualBox\\ VMs/Islandora\\ CLAW\\ Ansible_resized","title":"Troubleshooting expand_disk.py"},{"location":"technical-documentation/rest-create/","text":"Creating resources, media and files - POST/PUT Requests Authorization Content Files and Media Authorization You will need to use one of the configured authorization methods to create content, media and/or files. These are defined under Authorization on the overview. Content (Nodes) The above setup shows that you can perform a POST request against a node at the /node endpoint with a body in the JSON format. To create a node you need to provide two elements in your message body. The node type and any required field values. For the islandora_demo included Repository Item these are: A type - this tells Drupal what content type we are creating A title - this is a required field of all nodes. A model - this is a required by Islandora to tell the type of object (i.e. Image, Audio, Collection) A good way to make your first POST request is to perform a GET request against an existing node and erase all the extra content. You can find more information about GET requests here Again we are using the json format. For example curl -X GET 'http://localhost:8000/node/3?_format=json Look for the type element type : [ { target_id : islandora_object , target_type : node_type , target_uuid : 62189bec-3ef3-4196-b847-b17e5ce61fd5 } ] In our example \"islandora_object\" is the type of the default \"Repository Item\", if you have created a new type you will have a different target_id. You will not need the target_uuid . Next look for the title element title : [ { value : An example Islandora object } ] Lastly look for the field_model element field_model : [ { target_id : 24, target_type : taxonomy_term , target_uuid : e7560b68-e95a-4e76-9671-2a3041cd9800 , url : \\\\/taxonomy\\\\/term\\\\/24 } ] You can find the models by browsing the taxonomy terms available at http://localhost:8000/admin/structure/taxonomy/manage/islandora_models/overview In my example installation 24 is an \"Image\", but let's create a collection which is 23. Note : Taxonomy terms may vary between instances and you should verify the correct number for your installation. So the body of the request will be: { type : [ { target_id : islandora_object , target_type : node_type } ], title : [ { value : Created a collection with POST } ], field_model : [ { target_id : 23, target_type : taxonomy_term } ] } Note : You must include an appropriate Content-type header for the format you're requesting Other Note : You must include some authentication credentials to say who you are and so Drupal can check if you are allowed to create this object. Otherwise you will receive a 401 Unauthorized response. If you do provide credentials but don't have permission, you will receive a 403 Forbidden response. You can find more information about Authorization here For example: curl -i -X POST -u admin:islandora -H Content-type: application/json --data '{ type :[{ target_id : islandora_object , target_type : node_type }], title :[{ value : Created a collection with POST }], field_model :[{ target_id :23, target_type : taxonomy_term }]}' 'http://localhost:8000/node?_format=json' HTTP/1.1 201 Created Date: Tue, 05 Mar 2019 18:07:00 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Location: http://localhost:8000/node/3 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 1564 Content-Type: application/json { nid :[{ value :3}], uuid :[{ value : 3f618cdc-3f2a-4e77-b932-9ff1d461a57a }], vid :[{ value :3}], langcode :[{ value : en }], type :[{ target_id : islandora_object , target_type : node_type , target_uuid : 62189bec-3ef3-4196-b847-b17e5ce61fd5 }], revision_timestamp :[{ value : 2019-03-05T18:07:00+00:00 , format : Y-m-d\\\\TH:i:sP }], revision_uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], revision_log :[], status :[{ value :true}], title :[{ value : Created a collection with POST }], uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], created :[{ value : 2019-03-05T18:07:00+00:00 , format : Y-m-d\\\\TH:i:sP }], changed :[{ value : 2019-03-05T18:07:00+00:00 , format : Y-m-d\\\\TH:i:sP }], promote :[{ value :true}], sticky :[{ value :false}], default_langcode :[{ value :true}], revision_translation_affected :[{ value :true}], content_translation_source :[{ value : und }], content_translation_outdated :[{ value :false}], field_access_terms :[], field_alternative_title :[], field_description :[], field_display_hints :[], field_edtf_date :[], field_edtf_date_created :[], field_edtf_date_issued :[], field_extent :[{ value : 1 item }], field_identifier :[], field_linked_agent :[], field_member_of :[], field_model :[{ target_id :23, target_type : taxonomy_term , target_uuid : 6a3b293d-4617-417b-99d2-23d75b57f7c2 , url : \\/taxonomy\\/term\\/23 }], field_pid :[], field_resource_type :[], field_rights :[], field_subject :[]} The parts of the above request are: -i - return the response headers -X POST - send a POST request -u admin:islandora - use these basic authentication credentials -H\"Content-type: application/json\" - send the content-type header --data {...} - send the request body (seen above) 'http://localhost:8000/node?_format=json' - the endpoint of the request Files and Media Drupal is supposed to have a way to upload files, but this seems to require the use of an X-CSRF-Token, which can only be retrieved using Cookie authentication and even then does not allow you to upload. Consequently there is a REST endpoint not listed in the REST UI, because it is not configurable and is part of the Islandora 8 system. This endpoint is available at http://localhost:8000/node/{node id}/media/{media type}/{media use} It only accepts PUT requests. If the media and file don't exist they are created, if they exist the file is updated with the new body. The node and taxonomy term are used to search (via an entity query ) for a media. If this media exists the body of the file is replaced with the new content, otherwise a new file is created to hold the contents. The tokens to this URI are as follows: node id : The numeric ID of the node you wish to link this media/file to. media type : The media type name you wish to create (i.e. image, file, audio) media use : The numeric ID of the media use taxonomy term to set for this media You can find the media use taxonomy terms at http://localhost:8000/admin/structure/taxonomy/manage/islandora_media_use/overview So the body of the request is the actual binary file to upload. For example: With a local file called my-image.png that I wanted to link to a node with ID 3 . I am using the taxonomy term \"Original file\", which on my machine is 16 curl -i -X PUT -u admin:islandora -H Content-type: image/png --data-binary @my-image.png -H Content-Location: public://images/my-image.png 'http://localhost:8000/node/3/media/image/16' HTTP/1.1 100 Continue HTTP/1.1 201 Created Date: Tue, 05 Mar 2019 22:01:39 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private Location: http://localhost:8000/media/4 X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 0 Content-Type: text/html; charset=UTF-8 The parts of the above request are: -i - return the response headers -X PUT - send a PUT request -u admin:islandora - use these basic authentication credentials -H\"Content-type: image/png\" - send the content-type header --data-binary \"@my-image.png\" - send the contents of the file located at my-image.png as binary -H\"Content-Location: public://images/my-image.png\" - store the file in the public scheme (ie. in Drupal) at the path images/my-image.png , to store the file in Fedora use the fedora// scheme (ie. fedora://images/my-image.png) 'http://localhost:8000/node/3/media/image/16' - the endpoint of the request specifying the node, media type and taxonomy term.","title":"POST/PUT"},{"location":"technical-documentation/rest-create/#creating-resources-media-and-files-postput-requests","text":"Authorization Content Files and Media","title":"Creating resources, media and files - POST/PUT Requests"},{"location":"technical-documentation/rest-create/#authorization","text":"You will need to use one of the configured authorization methods to create content, media and/or files. These are defined under Authorization on the overview.","title":"Authorization"},{"location":"technical-documentation/rest-create/#content-nodes","text":"The above setup shows that you can perform a POST request against a node at the /node endpoint with a body in the JSON format. To create a node you need to provide two elements in your message body. The node type and any required field values. For the islandora_demo included Repository Item these are: A type - this tells Drupal what content type we are creating A title - this is a required field of all nodes. A model - this is a required by Islandora to tell the type of object (i.e. Image, Audio, Collection) A good way to make your first POST request is to perform a GET request against an existing node and erase all the extra content. You can find more information about GET requests here Again we are using the json format. For example curl -X GET 'http://localhost:8000/node/3?_format=json Look for the type element type : [ { target_id : islandora_object , target_type : node_type , target_uuid : 62189bec-3ef3-4196-b847-b17e5ce61fd5 } ] In our example \"islandora_object\" is the type of the default \"Repository Item\", if you have created a new type you will have a different target_id. You will not need the target_uuid . Next look for the title element title : [ { value : An example Islandora object } ] Lastly look for the field_model element field_model : [ { target_id : 24, target_type : taxonomy_term , target_uuid : e7560b68-e95a-4e76-9671-2a3041cd9800 , url : \\\\/taxonomy\\\\/term\\\\/24 } ] You can find the models by browsing the taxonomy terms available at http://localhost:8000/admin/structure/taxonomy/manage/islandora_models/overview In my example installation 24 is an \"Image\", but let's create a collection which is 23. Note : Taxonomy terms may vary between instances and you should verify the correct number for your installation. So the body of the request will be: { type : [ { target_id : islandora_object , target_type : node_type } ], title : [ { value : Created a collection with POST } ], field_model : [ { target_id : 23, target_type : taxonomy_term } ] } Note : You must include an appropriate Content-type header for the format you're requesting Other Note : You must include some authentication credentials to say who you are and so Drupal can check if you are allowed to create this object. Otherwise you will receive a 401 Unauthorized response. If you do provide credentials but don't have permission, you will receive a 403 Forbidden response. You can find more information about Authorization here For example: curl -i -X POST -u admin:islandora -H Content-type: application/json --data '{ type :[{ target_id : islandora_object , target_type : node_type }], title :[{ value : Created a collection with POST }], field_model :[{ target_id :23, target_type : taxonomy_term }]}' 'http://localhost:8000/node?_format=json' HTTP/1.1 201 Created Date: Tue, 05 Mar 2019 18:07:00 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Location: http://localhost:8000/node/3 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 1564 Content-Type: application/json { nid :[{ value :3}], uuid :[{ value : 3f618cdc-3f2a-4e77-b932-9ff1d461a57a }], vid :[{ value :3}], langcode :[{ value : en }], type :[{ target_id : islandora_object , target_type : node_type , target_uuid : 62189bec-3ef3-4196-b847-b17e5ce61fd5 }], revision_timestamp :[{ value : 2019-03-05T18:07:00+00:00 , format : Y-m-d\\\\TH:i:sP }], revision_uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], revision_log :[], status :[{ value :true}], title :[{ value : Created a collection with POST }], uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], created :[{ value : 2019-03-05T18:07:00+00:00 , format : Y-m-d\\\\TH:i:sP }], changed :[{ value : 2019-03-05T18:07:00+00:00 , format : Y-m-d\\\\TH:i:sP }], promote :[{ value :true}], sticky :[{ value :false}], default_langcode :[{ value :true}], revision_translation_affected :[{ value :true}], content_translation_source :[{ value : und }], content_translation_outdated :[{ value :false}], field_access_terms :[], field_alternative_title :[], field_description :[], field_display_hints :[], field_edtf_date :[], field_edtf_date_created :[], field_edtf_date_issued :[], field_extent :[{ value : 1 item }], field_identifier :[], field_linked_agent :[], field_member_of :[], field_model :[{ target_id :23, target_type : taxonomy_term , target_uuid : 6a3b293d-4617-417b-99d2-23d75b57f7c2 , url : \\/taxonomy\\/term\\/23 }], field_pid :[], field_resource_type :[], field_rights :[], field_subject :[]} The parts of the above request are: -i - return the response headers -X POST - send a POST request -u admin:islandora - use these basic authentication credentials -H\"Content-type: application/json\" - send the content-type header --data {...} - send the request body (seen above) 'http://localhost:8000/node?_format=json' - the endpoint of the request","title":"Content (Nodes)"},{"location":"technical-documentation/rest-create/#files-and-media","text":"Drupal is supposed to have a way to upload files, but this seems to require the use of an X-CSRF-Token, which can only be retrieved using Cookie authentication and even then does not allow you to upload. Consequently there is a REST endpoint not listed in the REST UI, because it is not configurable and is part of the Islandora 8 system. This endpoint is available at http://localhost:8000/node/{node id}/media/{media type}/{media use} It only accepts PUT requests. If the media and file don't exist they are created, if they exist the file is updated with the new body. The node and taxonomy term are used to search (via an entity query ) for a media. If this media exists the body of the file is replaced with the new content, otherwise a new file is created to hold the contents. The tokens to this URI are as follows: node id : The numeric ID of the node you wish to link this media/file to. media type : The media type name you wish to create (i.e. image, file, audio) media use : The numeric ID of the media use taxonomy term to set for this media You can find the media use taxonomy terms at http://localhost:8000/admin/structure/taxonomy/manage/islandora_media_use/overview So the body of the request is the actual binary file to upload. For example: With a local file called my-image.png that I wanted to link to a node with ID 3 . I am using the taxonomy term \"Original file\", which on my machine is 16 curl -i -X PUT -u admin:islandora -H Content-type: image/png --data-binary @my-image.png -H Content-Location: public://images/my-image.png 'http://localhost:8000/node/3/media/image/16' HTTP/1.1 100 Continue HTTP/1.1 201 Created Date: Tue, 05 Mar 2019 22:01:39 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private Location: http://localhost:8000/media/4 X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 0 Content-Type: text/html; charset=UTF-8 The parts of the above request are: -i - return the response headers -X PUT - send a PUT request -u admin:islandora - use these basic authentication credentials -H\"Content-type: image/png\" - send the content-type header --data-binary \"@my-image.png\" - send the contents of the file located at my-image.png as binary -H\"Content-Location: public://images/my-image.png\" - store the file in the public scheme (ie. in Drupal) at the path images/my-image.png , to store the file in Fedora use the fedora// scheme (ie. fedora://images/my-image.png) 'http://localhost:8000/node/3/media/image/16' - the endpoint of the request specifying the node, media type and taxonomy term.","title":"Files and Media"},{"location":"technical-documentation/rest-delete/","text":"Removing resources, media and files - DELETE Requests Deleting is as easy as getting resources and more difficult than creating resources. If you can perform a GET request then you have the information required to perform a DELETE request. Check out the examples below. Authorization Content Media Files Authorization If you have restricted access to view your content, you will need to use one of the configured authorization methods to access your content, media and/or files. These are defined under Authorization on the overview. Content (Nodes) You will need your node id , you can find more information in the GET documentation. A delete is simply the same request as a GET but sending a DELETE http verb. Our example node has a node id of 2 curl -i -u admin:islandora -X GET 'http://localhost:8000/node/2?_format=json' HTTP/1.1 200 OK Date: Fri, 15 Mar 2019 15:02:00 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private Link: http://localhost:8000/node/2 ; rel= canonical Link: http://localhost:8000/node/2/delete ; rel= https://drupal.org/link-relations/delete-form Link: http://localhost:8000/admin/content/node/delete?node=2 ; rel= https://drupal.org/link-relations/delete-multiple-form Link: http://localhost:8000/node/2/edit ; rel= edit-form Link: http://localhost:8000/node/2/revisions ; rel= version-history Link: http://localhost:8000/node/2 ; rel= https://drupal.org/link-relations/revision Link: http://localhost:8000/node?node=2 ; rel= https://drupal.org/link-relations/create Link: http://purl.org/dc/dcmitype/Collection ; rel= tag ; title= Collection Link: http://localhost:8000/node/2?_format=jsonld ; rel= alternate ; type= application/ld+json X-Drupal-Dynamic-Cache: MISS X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 1564 Content-Type: application/json { nid :[{ value :2}], uuid :[{ value : 413135a6-0bd1-4d6b-8bcb-059cf7784d83 }], vid :[{ value :2}], langcode :[{ value : en }], type :[{ target_id : islandora_object , target_type : node_type , target_uuid : 62189bec-3ef3-4196-b847-b17e5ce61fd5 }], revision_timestamp :[{ value : 2019-03-05T18:04:43+00:00 , format : Y-m-d\\\\TH:i:sP }], revision_uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], revision_log :[], status :[{ value :true}], title :[{ value : Created a collection with POST }], uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], created :[{ value : 2019-03-05T18:04:43+00:00 , format : Y-m-d\\\\TH:i:sP }], changed :[{ value : 2019-03-05T18:04:43+00:00 , format : Y-m-d\\\\TH:i:sP }], promote :[{ value :true}], sticky :[{ value :false}], default_langcode :[{ value :true}], revision_translation_affected :[{ value :true}], content_translation_source :[{ value : und }], content_translation_outdated :[{ value :false}], field_access_terms :[], field_alternative_title :[], field_description :[], field_display_hints :[], field_edtf_date :[], field_edtf_date_created :[], field_edtf_date_issued :[], field_extent :[{ value : 1 item }], field_identifier :[], field_linked_agent :[], field_member_of :[], field_model :[{ target_id :23, target_type : taxonomy_term , target_uuid : 6a3b293d-4617-417b-99d2-23d75b57f7c2 , url : \\/taxonomy\\/term\\/23 }], field_pid :[], field_resource_type :[], field_rights :[], field_subject :[]}% Then we switch GET to DELETE curl -i -u admin:islandora -X DELETE 'http://localhost:8000/node/2?_format=json' HTTP/1.1 204 No Content Date: Fri, 15 Mar 2019 15:02:30 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Type: text/html; charset=UTF-8 All subsequent requests to the above URI will return a 404 Not Found status code. curl -i -u admin:islandora -X GET 'http://localhost:8000/node/2?_format=json' HTTP/1.1 404 Not Found Date: Fri, 15 Mar 2019 15:12:58 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 149 Content-Type: application/json { message : The \\u0022node\\u0022 parameter was not converted for the path \\u0022\\/node\\/{node}\\u0022 (route name: \\u0022rest.entity.node.GET\\u0022) } Media You will need a media id as used in GET documentation. A delete is simply the same request as a GET but sending a DELETE http verb. With a media id of 1 for our example, I'll perform a GET curl -i -u admin:islandora -X GET 'http://localhost:8000/media/1?_format=json' HTTP/1.1 200 OK Date: Fri, 15 Mar 2019 14:53:54 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private Link: http://localhost:8000/media/add ; rel= https://drupal.org/link-relations/add-page Link: http://localhost:8000/media/add/image ; rel= https://drupal.org/link-relations/add-form Link: http://localhost:8000/media/1 ; rel= canonical Link: http://localhost:8000/admin/content/media ; rel= collection Link: http://localhost:8000/media/1/delete ; rel= https://drupal.org/link-relations/delete-form Link: http://localhost:8000/media/delete?media=1 ; rel= https://drupal.org/link-relations/delete-multiple-form Link: http://localhost:8000/media/1/edit ; rel= edit-form Link: http://localhost:8000/media/1 ; rel= https://drupal.org/link-relations/revision Link: http://localhost:8000/node/1 ; rel= related ; title= Media of Link: http://pcdm.org/use#OriginalFile ; rel= tag ; title= Original File Link: http://localhost:8000/media/1?_format=jsonld ; rel= alternate ; type= application/ld+json Link: http://localhost:8000/media/1/source ; rel= edit-media Link: http://localhost:8000/_flysystem/fedora/2019-03/Louis_Riel.jpg ; rel= describes ; type= image/jpeg X-Drupal-Dynamic-Cache: HIT X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 1937 Content-Type: application/json { mid :[{ value :1}], uuid :[{ value : d8893926-ddb7-4125-b2da-30428af0fe3d }], vid :[{ value :1}], langcode :[{ value : en }], bundle :[{ target_id : image , target_type : media_type , target_uuid : 3860e653-201b-4509-89dd-628c446d81cb }], revision_created :[{ value : 2019-03-01T19:43:46+00:00 , format : Y-m-d\\\\TH:i:sP }], revision_user :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], revision_log_message :[], status :[{ value :true}], name :[{ value : An image }], thumbnail :[{ target_id :2, alt : A portrait of Louis Riel , title :null, width :800, height :1333, target_type : file , target_uuid : b0625129-c592-463a-93c3-3eff7cd3567e , url : http:\\/\\/localhost:8000\\/_flysystem\\/fedora\\/2019-03\\/Louis_Riel.jpg }], uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], created :[{ value : 2019-03-01T19:43:22+00:00 , format : Y-m-d\\\\TH:i:sP }], changed :[{ value : 2019-03-01T19:43:46+00:00 , format : Y-m-d\\\\TH:i:sP }], default_langcode :[{ value :true}], revision_translation_affected :[{ value :true}], content_translation_source :[{ value : und }], content_translation_outdated :[{ value :false}], field_access_terms :[], field_file_size :[{ value :166613}], field_height :[{ value :1333}], field_media_image :[{ target_id :2, alt : A portrait of Louis Riel , title : , width :800, height :1333, target_type : file , target_uuid : b0625129-c592-463a-93c3-3eff7cd3567e , url : http:\\/\\/localhost:8000\\/_flysystem\\/fedora\\/2019-03\\/Louis_Riel.jpg }], field_media_of :[{ target_id :1, target_type : node , target_uuid : 8322e36e-f8ec-4fd9-919d-52aed7b17a52 , url : \\/node\\/1 }], field_media_use :[{ target_id :16, target_type : taxonomy_term , target_uuid : 08e01ff9-eb72-42f5-ae3a-8b21ba0c0bc3 , url : \\/taxonomy\\/term\\/16 }], field_mime_type :[{ value : image\\/jpeg }], field_width :[{ value :800}]} Then we replace GET with DELETE . curl -i -u admin:islandora -X DELETE 'http://localhost:8000/media/1?_format=json' HTTP/1.1 204 No Content Date: Fri, 15 Mar 2019 14:54:55 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Type: text/html; charset=UTF-8 Subsequent requests to the media return 404 Not Found statuses. curl -i -u admin:islandora -X GET 'http://localhost:8000/media/1?_format=json' HTTP/1.1 404 Not Found Date: Fri, 15 Mar 2019 15:13:45 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 153 Content-Type: application/json { message : The \\u0022media\\u0022 parameter was not converted for the path \\u0022\\/media\\/{media}\\u0022 (route name: \\u0022rest.entity.media.GET\\u0022) } Files You'll need the file id, there is more information at the top of the GET requests for files documentation. A delete is simply the same request as a GET but sending a DELETE http verb. With a file id of 2 for our example, I can perform a test GET curl -i -u admin:islandora 'http://localhost:8000/entity/file/2?_format=json' HTTP/1.1 200 OK Date: Fri, 15 Mar 2019 14:40:40 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-Drupal-Dynamic-Cache: MISS X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 617 Content-Type: application/json { fid :[{ value :2}], uuid :[{ value : b0625129-c592-463a-93c3-3eff7cd3567e }], langcode :[{ value : en }], uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], filename :[{ value : Louis_Riel.jpg }], uri :[{ value : fedora:\\/\\/2019-03\\/Louis_Riel.jpg , url : \\/_flysystem\\/fedora\\/2019-03\\/Louis_Riel.jpg }], filemime :[{ value : image\\/jpeg }], filesize :[{ value :166613}], status :[{ value :true}], created :[{ value : 2019-03-01T19:43:35+00:00 , format : Y-m-d\\\\TH:i:sP }], changed :[{ value : 2019-03-01T19:43:46+00:00 , format : Y-m-d\\\\TH:i:sP }]} If this is the correct file, I can delete it. curl -i -u admin:islandora -X DELETE 'http://localhost:8000/entity/file/2?_format=json' HTTP/1.1 204 No Content Date: Fri, 15 Mar 2019 14:43:22 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Type: text/html; charset=UTF-8 Subsequent requests to the URI now return a 404 Not Found status. curl -i -u admin:islandora 'http://localhost:8000/entity/file/2?_format=json' HTTP/1.1 404 Not Found Date: Fri, 15 Mar 2019 14:43:33 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 157 Content-Type: application/json { message : The \\u0022file\\u0022 parameter was not converted for the path \\u0022\\/entity\\/file\\/{file}\\u0022 (route name: \\u0022rest.entity.file.GET\\u0022) }","title":"DELETE"},{"location":"technical-documentation/rest-delete/#removing-resources-media-and-files-delete-requests","text":"Deleting is as easy as getting resources and more difficult than creating resources. If you can perform a GET request then you have the information required to perform a DELETE request. Check out the examples below. Authorization Content Media Files","title":"Removing resources, media and files - DELETE Requests"},{"location":"technical-documentation/rest-delete/#authorization","text":"If you have restricted access to view your content, you will need to use one of the configured authorization methods to access your content, media and/or files. These are defined under Authorization on the overview.","title":"Authorization"},{"location":"technical-documentation/rest-delete/#content-nodes","text":"You will need your node id , you can find more information in the GET documentation. A delete is simply the same request as a GET but sending a DELETE http verb. Our example node has a node id of 2 curl -i -u admin:islandora -X GET 'http://localhost:8000/node/2?_format=json' HTTP/1.1 200 OK Date: Fri, 15 Mar 2019 15:02:00 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private Link: http://localhost:8000/node/2 ; rel= canonical Link: http://localhost:8000/node/2/delete ; rel= https://drupal.org/link-relations/delete-form Link: http://localhost:8000/admin/content/node/delete?node=2 ; rel= https://drupal.org/link-relations/delete-multiple-form Link: http://localhost:8000/node/2/edit ; rel= edit-form Link: http://localhost:8000/node/2/revisions ; rel= version-history Link: http://localhost:8000/node/2 ; rel= https://drupal.org/link-relations/revision Link: http://localhost:8000/node?node=2 ; rel= https://drupal.org/link-relations/create Link: http://purl.org/dc/dcmitype/Collection ; rel= tag ; title= Collection Link: http://localhost:8000/node/2?_format=jsonld ; rel= alternate ; type= application/ld+json X-Drupal-Dynamic-Cache: MISS X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 1564 Content-Type: application/json { nid :[{ value :2}], uuid :[{ value : 413135a6-0bd1-4d6b-8bcb-059cf7784d83 }], vid :[{ value :2}], langcode :[{ value : en }], type :[{ target_id : islandora_object , target_type : node_type , target_uuid : 62189bec-3ef3-4196-b847-b17e5ce61fd5 }], revision_timestamp :[{ value : 2019-03-05T18:04:43+00:00 , format : Y-m-d\\\\TH:i:sP }], revision_uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], revision_log :[], status :[{ value :true}], title :[{ value : Created a collection with POST }], uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], created :[{ value : 2019-03-05T18:04:43+00:00 , format : Y-m-d\\\\TH:i:sP }], changed :[{ value : 2019-03-05T18:04:43+00:00 , format : Y-m-d\\\\TH:i:sP }], promote :[{ value :true}], sticky :[{ value :false}], default_langcode :[{ value :true}], revision_translation_affected :[{ value :true}], content_translation_source :[{ value : und }], content_translation_outdated :[{ value :false}], field_access_terms :[], field_alternative_title :[], field_description :[], field_display_hints :[], field_edtf_date :[], field_edtf_date_created :[], field_edtf_date_issued :[], field_extent :[{ value : 1 item }], field_identifier :[], field_linked_agent :[], field_member_of :[], field_model :[{ target_id :23, target_type : taxonomy_term , target_uuid : 6a3b293d-4617-417b-99d2-23d75b57f7c2 , url : \\/taxonomy\\/term\\/23 }], field_pid :[], field_resource_type :[], field_rights :[], field_subject :[]}% Then we switch GET to DELETE curl -i -u admin:islandora -X DELETE 'http://localhost:8000/node/2?_format=json' HTTP/1.1 204 No Content Date: Fri, 15 Mar 2019 15:02:30 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Type: text/html; charset=UTF-8 All subsequent requests to the above URI will return a 404 Not Found status code. curl -i -u admin:islandora -X GET 'http://localhost:8000/node/2?_format=json' HTTP/1.1 404 Not Found Date: Fri, 15 Mar 2019 15:12:58 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 149 Content-Type: application/json { message : The \\u0022node\\u0022 parameter was not converted for the path \\u0022\\/node\\/{node}\\u0022 (route name: \\u0022rest.entity.node.GET\\u0022) }","title":"Content (Nodes)"},{"location":"technical-documentation/rest-delete/#media","text":"You will need a media id as used in GET documentation. A delete is simply the same request as a GET but sending a DELETE http verb. With a media id of 1 for our example, I'll perform a GET curl -i -u admin:islandora -X GET 'http://localhost:8000/media/1?_format=json' HTTP/1.1 200 OK Date: Fri, 15 Mar 2019 14:53:54 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private Link: http://localhost:8000/media/add ; rel= https://drupal.org/link-relations/add-page Link: http://localhost:8000/media/add/image ; rel= https://drupal.org/link-relations/add-form Link: http://localhost:8000/media/1 ; rel= canonical Link: http://localhost:8000/admin/content/media ; rel= collection Link: http://localhost:8000/media/1/delete ; rel= https://drupal.org/link-relations/delete-form Link: http://localhost:8000/media/delete?media=1 ; rel= https://drupal.org/link-relations/delete-multiple-form Link: http://localhost:8000/media/1/edit ; rel= edit-form Link: http://localhost:8000/media/1 ; rel= https://drupal.org/link-relations/revision Link: http://localhost:8000/node/1 ; rel= related ; title= Media of Link: http://pcdm.org/use#OriginalFile ; rel= tag ; title= Original File Link: http://localhost:8000/media/1?_format=jsonld ; rel= alternate ; type= application/ld+json Link: http://localhost:8000/media/1/source ; rel= edit-media Link: http://localhost:8000/_flysystem/fedora/2019-03/Louis_Riel.jpg ; rel= describes ; type= image/jpeg X-Drupal-Dynamic-Cache: HIT X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 1937 Content-Type: application/json { mid :[{ value :1}], uuid :[{ value : d8893926-ddb7-4125-b2da-30428af0fe3d }], vid :[{ value :1}], langcode :[{ value : en }], bundle :[{ target_id : image , target_type : media_type , target_uuid : 3860e653-201b-4509-89dd-628c446d81cb }], revision_created :[{ value : 2019-03-01T19:43:46+00:00 , format : Y-m-d\\\\TH:i:sP }], revision_user :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], revision_log_message :[], status :[{ value :true}], name :[{ value : An image }], thumbnail :[{ target_id :2, alt : A portrait of Louis Riel , title :null, width :800, height :1333, target_type : file , target_uuid : b0625129-c592-463a-93c3-3eff7cd3567e , url : http:\\/\\/localhost:8000\\/_flysystem\\/fedora\\/2019-03\\/Louis_Riel.jpg }], uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], created :[{ value : 2019-03-01T19:43:22+00:00 , format : Y-m-d\\\\TH:i:sP }], changed :[{ value : 2019-03-01T19:43:46+00:00 , format : Y-m-d\\\\TH:i:sP }], default_langcode :[{ value :true}], revision_translation_affected :[{ value :true}], content_translation_source :[{ value : und }], content_translation_outdated :[{ value :false}], field_access_terms :[], field_file_size :[{ value :166613}], field_height :[{ value :1333}], field_media_image :[{ target_id :2, alt : A portrait of Louis Riel , title : , width :800, height :1333, target_type : file , target_uuid : b0625129-c592-463a-93c3-3eff7cd3567e , url : http:\\/\\/localhost:8000\\/_flysystem\\/fedora\\/2019-03\\/Louis_Riel.jpg }], field_media_of :[{ target_id :1, target_type : node , target_uuid : 8322e36e-f8ec-4fd9-919d-52aed7b17a52 , url : \\/node\\/1 }], field_media_use :[{ target_id :16, target_type : taxonomy_term , target_uuid : 08e01ff9-eb72-42f5-ae3a-8b21ba0c0bc3 , url : \\/taxonomy\\/term\\/16 }], field_mime_type :[{ value : image\\/jpeg }], field_width :[{ value :800}]} Then we replace GET with DELETE . curl -i -u admin:islandora -X DELETE 'http://localhost:8000/media/1?_format=json' HTTP/1.1 204 No Content Date: Fri, 15 Mar 2019 14:54:55 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Type: text/html; charset=UTF-8 Subsequent requests to the media return 404 Not Found statuses. curl -i -u admin:islandora -X GET 'http://localhost:8000/media/1?_format=json' HTTP/1.1 404 Not Found Date: Fri, 15 Mar 2019 15:13:45 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 153 Content-Type: application/json { message : The \\u0022media\\u0022 parameter was not converted for the path \\u0022\\/media\\/{media}\\u0022 (route name: \\u0022rest.entity.media.GET\\u0022) }","title":"Media"},{"location":"technical-documentation/rest-delete/#files","text":"You'll need the file id, there is more information at the top of the GET requests for files documentation. A delete is simply the same request as a GET but sending a DELETE http verb. With a file id of 2 for our example, I can perform a test GET curl -i -u admin:islandora 'http://localhost:8000/entity/file/2?_format=json' HTTP/1.1 200 OK Date: Fri, 15 Mar 2019 14:40:40 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-Drupal-Dynamic-Cache: MISS X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 617 Content-Type: application/json { fid :[{ value :2}], uuid :[{ value : b0625129-c592-463a-93c3-3eff7cd3567e }], langcode :[{ value : en }], uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], filename :[{ value : Louis_Riel.jpg }], uri :[{ value : fedora:\\/\\/2019-03\\/Louis_Riel.jpg , url : \\/_flysystem\\/fedora\\/2019-03\\/Louis_Riel.jpg }], filemime :[{ value : image\\/jpeg }], filesize :[{ value :166613}], status :[{ value :true}], created :[{ value : 2019-03-01T19:43:35+00:00 , format : Y-m-d\\\\TH:i:sP }], changed :[{ value : 2019-03-01T19:43:46+00:00 , format : Y-m-d\\\\TH:i:sP }]} If this is the correct file, I can delete it. curl -i -u admin:islandora -X DELETE 'http://localhost:8000/entity/file/2?_format=json' HTTP/1.1 204 No Content Date: Fri, 15 Mar 2019 14:43:22 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Type: text/html; charset=UTF-8 Subsequent requests to the URI now return a 404 Not Found status. curl -i -u admin:islandora 'http://localhost:8000/entity/file/2?_format=json' HTTP/1.1 404 Not Found Date: Fri, 15 Mar 2019 14:43:33 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 157 Content-Type: application/json { message : The \\u0022file\\u0022 parameter was not converted for the path \\u0022\\/entity\\/file\\/{file}\\u0022 (route name: \\u0022rest.entity.file.GET\\u0022) }","title":"Files"},{"location":"technical-documentation/rest-get/","text":"Getting resources, media and files - GET Requests Authorization Content Media Files Authorization If you have restricted access to view your content, you will need to use one of the configured authorization methods to access your content, media and/or files. These are defined under Authorization on the overview. Content (Nodes) The above setup shows that you can perform a GET request against a node at the /node/{id} endpoint. This is the same as the URL when viewed through a web browser. For example http://localhost:8000/node/2 It also defines the formats you can access. In this example json and jsonld are available. To access a resource in a specific format use the _format= argument which is appended to the end of the URI after a ? . To get the resource located at http://localhost:8000/node/3 in JSON, you can go to http://localhost:8000/node/3?_format=json . For example: You can do this in your web browser or with a command line client like cURL. (Note: response body here has been formatted, yours will look different) vagrant@claw:~$ curl -i http://localhost:8000/node/3?_format=json HTTP/1.1 200 OK Date: Mon, 04 Mar 2019 21:53:50 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private Link: http://localhost:8000/node/3 ; rel= canonical Link: http://localhost:8000/node/3/delete ; rel= https://drupal.org/link-relations/delete-form Link: http://localhost:8000/admin/content/node/delete?node=3 ; rel= https://drupal.org/link-relations/delete-multiple-form Link: http://localhost:8000/node/3/edit ; rel= edit-form Link: http://localhost:8000/node/3/revisions ; rel= version-history Link: http://localhost:8000/node/3 ; rel= https://drupal.org/link-relations/revision Link: http://localhost:8000/node?node=3 ; rel= https://drupal.org/link-relations/create Link: http://purl.org/coar/resource_type/c_c513 ; rel= tag ; title= Image Link: http://localhost:8000/media/1 ; rel= related ; title= Original File Link: http://localhost:8000/media/2 ; rel= related ; title= Service File Link: http://localhost:8000/media/3 ; rel= related ; title= Thumbnail Image Link: http://localhost:8000/node/3?_format=jsonld ; rel= alternate ; type= application/ld+json X-Drupal-Dynamic-Cache: MISS X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) X-Drupal-Cache: MISS Content-Length: 1521 Content-Type: application/json { nid : [ { value : 1 } ], uuid : [ { value : 8322e36e-f8ec-4fd9-919d-52aed7b17a52 } ], vid : [ { value : 1 } ], langcode : [ { value : en } ], type : [ { target_id : islandora_object , target_type : node_type , target_uuid : 62189bec-3ef3-4196-b847-b17e5ce61fd5 } ], revision_timestamp : [ { value : 2019-03-01T19:43:12+00:00 , format : Y-m-d\\\\TH:i:sP } ], revision_uid : [ { target_id : 1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\\\/user\\\\/1 } ], revision_log : [], status : [ { value : true } ], title : [ { value : Custom item } ], uid : [ { target_id : 1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\\\/user\\\\/1 } ], created : [ { value : 2019-03-01T19:42:54+00:00 , format : Y-m-d\\\\TH:i:sP } ], changed : [ { value : 2019-03-01T19:43:12+00:00 , format : Y-m-d\\\\TH:i:sP } ], promote : [ { value : true } ], sticky : [ { value : false } ], default_langcode : [ { value : true } ], revision_translation_affected : [ { value : true } ], content_translation_source : [ { value : und } ], content_translation_outdated : [ { value : false } ], field_alternative_title : [], field_description : [], field_display_hints : [], field_edtf_date : [], field_edtf_date_created : [], field_edtf_date_issued : [], field_extent : [ { value : 1 item } ], field_identifier : [], field_linked_agent : [], field_member_of : [], field_model : [ { target_id : 24, target_type : taxonomy_term , target_uuid : e7560b68-e95a-4e76-9671-2a3041cd9800 , url : \\\\/taxonomy\\\\/term\\\\/24 } ], field_pid : [], field_resource_type : [], field_rights : [], field_subject : [] } Media The above steps are the same for media, it is just the URI that has changed. For media you use /media/{id} For example: curl -u admin:islandora http://localhost:8000/media/2?_format=json { mid : [ { value : 2 } ], uuid : [ { value : e75e609d-510c-4764-9280-665bb7026161 } ], vid : [ { value : 2 } ], langcode : [ { value : en } ], bundle : [ { target_id : image , target_type : media_type , target_uuid : 3860e653-201b-4509-89dd-628c446d81cb } ], revision_created : [ { value : 2019-03-01T19:43:48+00:00 , format : Y-m-d\\\\TH:i:sP } ], revision_user : [], revision_log_message : [], status : [ { value : true } ], name : [ { value : 1-Service File.jpg } ], thumbnail : [ { target_id : 3, alt : null, title : null, width : 800, height : 1333, target_type : file , target_uuid : e97ad038-dcb3-4d81-aa91-c945b2fe092c , url : http:\\\\/\\\\/localhost:8000\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg } ], uid : [ { target_id : 1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\\\/user\\\\/1 } ], created : [ { value : 2019-03-01T19:43:48+00:00 , format : Y-m-d\\\\TH:i:sP } ], changed : [ { value : 2019-03-01T19:43:48+00:00 , format : Y-m-d\\\\TH:i:sP } ], default_langcode : [ { value : true } ], revision_translation_affected : [ { value : true } ], content_translation_source : [ { value : und } ], content_translation_outdated : [ { value : false } ], field_access_terms : [], field_file_size : [ { value : 166608 } ], field_height : [ { value : 1333 } ], field_media_image : [ { target_id : 3, alt : null, title : null, width : 800, height : 1333, target_type : file , target_uuid : e97ad038-dcb3-4d81-aa91-c945b2fe092c , url : http:\\\\/\\\\/localhost:8000\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg } ], field_media_of : [ { target_id : 1, target_type : node , target_uuid : 8322e36e-f8ec-4fd9-919d-52aed7b17a52 , url : \\\\/node\\\\/1 } ], field_media_use : [ { target_id : 18, target_type : taxonomy_term , target_uuid : e8c698a7-8c15-47c4-8567-1c27f8f0c19e , url : \\\\/taxonomy\\\\/term\\\\/18 } ], field_mime_type : [ { value : image\\\\/jpeg } ], field_width : [ { value : 800 } ] } field_media_of indicates which node(s) the media is associated with. The node can be referenced using the value of the target_id key (in this example, 1) or the target_uuid key (8322e36e-f8ec-4fd9-919d-52aed7b17a52). Files Through the REST API you are accessing metadata about files, but not the actual binary object. Based on the above configuration the path for a GET request is /entity/file/{id} The file ID refers to the integer counter and not the UUID of a file. Through the UI you can go to the File listing at http://localhost:8000/admin/content/files . For the file you want to access, choose the USED IN link. That URI has the format http://localhost:8000/admin/content/files/usage/{file id} Alternatively the file ID can be found by viewing the media metadata (above section). In the above example if you look through the response from a GET request to the /media/{id} you will find a section like: field_media_image : [ { target_id : 3, alt : null, title : null, width : 800, height : 1333, target_type : file , target_uuid : e97ad038-dcb3-4d81-aa91-c945b2fe092c , url : http:\\\\/\\\\/localhost:8000\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg } ], Note : Depending on the \"type\" of file (image, video, audio, file) this field will have a different name. This has both the url which is the URI to retrieve the binary content of the file as well as the target_id which is the file ID. So we can retrieve the file with a GET request to the URI http://localhost:8000/sites/default/files/2019-03/1-Service%20File.jpg . But more importantly we can retrieve the file metadata by making a request to http://localhost:8000/entity/file/3 with one of the allowed formats For example: curl -i -X GET http://localhost:8000/entity/file/3?_format=json HTTP/1.1 200 OK Date: Tue, 05 Mar 2019 16:52:06 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-Drupal-Dynamic-Cache: MISS X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) X-Drupal-Cache: HIT Content-Length: 634 Content-Type: application/json { fid : [ { value : 3 } ], uuid : [ { value : e97ad038-dcb3-4d81-aa91-c945b2fe092c } ], langcode : [ { value : en } ], uid : [ { target_id : 1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\\\/user\\\\/1 } ], filename : [ { value : 1-Service File.jpg } ], uri : [ { value : public:\\\\/\\\\/2019-03\\\\/1-Service File.jpg , url : \\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg } ], filemime : [ { value : image\\\\/jpeg } ], filesize : [ { value : 166608 } ], status : [ { value : true } ], created : [ { value : 2019-03-01T19:43:48+00:00 , format : Y-m-d\\\\TH:i:sP } ], changed : [ { value : 2019-03-01T19:43:48+00:00 , format : Y-m-d\\\\TH:i:sP } ] } The uri: url: is the path to your file, so for the above example of \"url\": \"\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg\" . I can perform a GET against my hostname /sites/default/files/2019-03/1-Service%20File.jpg and get the contents of this file.","title":"GET"},{"location":"technical-documentation/rest-get/#getting-resources-media-and-files-get-requests","text":"Authorization Content Media Files","title":"Getting resources, media and files - GET Requests"},{"location":"technical-documentation/rest-get/#authorization","text":"If you have restricted access to view your content, you will need to use one of the configured authorization methods to access your content, media and/or files. These are defined under Authorization on the overview.","title":"Authorization"},{"location":"technical-documentation/rest-get/#content-nodes","text":"The above setup shows that you can perform a GET request against a node at the /node/{id} endpoint. This is the same as the URL when viewed through a web browser. For example http://localhost:8000/node/2 It also defines the formats you can access. In this example json and jsonld are available. To access a resource in a specific format use the _format= argument which is appended to the end of the URI after a ? . To get the resource located at http://localhost:8000/node/3 in JSON, you can go to http://localhost:8000/node/3?_format=json . For example: You can do this in your web browser or with a command line client like cURL. (Note: response body here has been formatted, yours will look different) vagrant@claw:~$ curl -i http://localhost:8000/node/3?_format=json HTTP/1.1 200 OK Date: Mon, 04 Mar 2019 21:53:50 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private Link: http://localhost:8000/node/3 ; rel= canonical Link: http://localhost:8000/node/3/delete ; rel= https://drupal.org/link-relations/delete-form Link: http://localhost:8000/admin/content/node/delete?node=3 ; rel= https://drupal.org/link-relations/delete-multiple-form Link: http://localhost:8000/node/3/edit ; rel= edit-form Link: http://localhost:8000/node/3/revisions ; rel= version-history Link: http://localhost:8000/node/3 ; rel= https://drupal.org/link-relations/revision Link: http://localhost:8000/node?node=3 ; rel= https://drupal.org/link-relations/create Link: http://purl.org/coar/resource_type/c_c513 ; rel= tag ; title= Image Link: http://localhost:8000/media/1 ; rel= related ; title= Original File Link: http://localhost:8000/media/2 ; rel= related ; title= Service File Link: http://localhost:8000/media/3 ; rel= related ; title= Thumbnail Image Link: http://localhost:8000/node/3?_format=jsonld ; rel= alternate ; type= application/ld+json X-Drupal-Dynamic-Cache: MISS X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) X-Drupal-Cache: MISS Content-Length: 1521 Content-Type: application/json { nid : [ { value : 1 } ], uuid : [ { value : 8322e36e-f8ec-4fd9-919d-52aed7b17a52 } ], vid : [ { value : 1 } ], langcode : [ { value : en } ], type : [ { target_id : islandora_object , target_type : node_type , target_uuid : 62189bec-3ef3-4196-b847-b17e5ce61fd5 } ], revision_timestamp : [ { value : 2019-03-01T19:43:12+00:00 , format : Y-m-d\\\\TH:i:sP } ], revision_uid : [ { target_id : 1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\\\/user\\\\/1 } ], revision_log : [], status : [ { value : true } ], title : [ { value : Custom item } ], uid : [ { target_id : 1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\\\/user\\\\/1 } ], created : [ { value : 2019-03-01T19:42:54+00:00 , format : Y-m-d\\\\TH:i:sP } ], changed : [ { value : 2019-03-01T19:43:12+00:00 , format : Y-m-d\\\\TH:i:sP } ], promote : [ { value : true } ], sticky : [ { value : false } ], default_langcode : [ { value : true } ], revision_translation_affected : [ { value : true } ], content_translation_source : [ { value : und } ], content_translation_outdated : [ { value : false } ], field_alternative_title : [], field_description : [], field_display_hints : [], field_edtf_date : [], field_edtf_date_created : [], field_edtf_date_issued : [], field_extent : [ { value : 1 item } ], field_identifier : [], field_linked_agent : [], field_member_of : [], field_model : [ { target_id : 24, target_type : taxonomy_term , target_uuid : e7560b68-e95a-4e76-9671-2a3041cd9800 , url : \\\\/taxonomy\\\\/term\\\\/24 } ], field_pid : [], field_resource_type : [], field_rights : [], field_subject : [] }","title":"Content (Nodes)"},{"location":"technical-documentation/rest-get/#media","text":"The above steps are the same for media, it is just the URI that has changed. For media you use /media/{id} For example: curl -u admin:islandora http://localhost:8000/media/2?_format=json { mid : [ { value : 2 } ], uuid : [ { value : e75e609d-510c-4764-9280-665bb7026161 } ], vid : [ { value : 2 } ], langcode : [ { value : en } ], bundle : [ { target_id : image , target_type : media_type , target_uuid : 3860e653-201b-4509-89dd-628c446d81cb } ], revision_created : [ { value : 2019-03-01T19:43:48+00:00 , format : Y-m-d\\\\TH:i:sP } ], revision_user : [], revision_log_message : [], status : [ { value : true } ], name : [ { value : 1-Service File.jpg } ], thumbnail : [ { target_id : 3, alt : null, title : null, width : 800, height : 1333, target_type : file , target_uuid : e97ad038-dcb3-4d81-aa91-c945b2fe092c , url : http:\\\\/\\\\/localhost:8000\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg } ], uid : [ { target_id : 1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\\\/user\\\\/1 } ], created : [ { value : 2019-03-01T19:43:48+00:00 , format : Y-m-d\\\\TH:i:sP } ], changed : [ { value : 2019-03-01T19:43:48+00:00 , format : Y-m-d\\\\TH:i:sP } ], default_langcode : [ { value : true } ], revision_translation_affected : [ { value : true } ], content_translation_source : [ { value : und } ], content_translation_outdated : [ { value : false } ], field_access_terms : [], field_file_size : [ { value : 166608 } ], field_height : [ { value : 1333 } ], field_media_image : [ { target_id : 3, alt : null, title : null, width : 800, height : 1333, target_type : file , target_uuid : e97ad038-dcb3-4d81-aa91-c945b2fe092c , url : http:\\\\/\\\\/localhost:8000\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg } ], field_media_of : [ { target_id : 1, target_type : node , target_uuid : 8322e36e-f8ec-4fd9-919d-52aed7b17a52 , url : \\\\/node\\\\/1 } ], field_media_use : [ { target_id : 18, target_type : taxonomy_term , target_uuid : e8c698a7-8c15-47c4-8567-1c27f8f0c19e , url : \\\\/taxonomy\\\\/term\\\\/18 } ], field_mime_type : [ { value : image\\\\/jpeg } ], field_width : [ { value : 800 } ] } field_media_of indicates which node(s) the media is associated with. The node can be referenced using the value of the target_id key (in this example, 1) or the target_uuid key (8322e36e-f8ec-4fd9-919d-52aed7b17a52).","title":"Media"},{"location":"technical-documentation/rest-get/#files","text":"Through the REST API you are accessing metadata about files, but not the actual binary object. Based on the above configuration the path for a GET request is /entity/file/{id} The file ID refers to the integer counter and not the UUID of a file. Through the UI you can go to the File listing at http://localhost:8000/admin/content/files . For the file you want to access, choose the USED IN link. That URI has the format http://localhost:8000/admin/content/files/usage/{file id} Alternatively the file ID can be found by viewing the media metadata (above section). In the above example if you look through the response from a GET request to the /media/{id} you will find a section like: field_media_image : [ { target_id : 3, alt : null, title : null, width : 800, height : 1333, target_type : file , target_uuid : e97ad038-dcb3-4d81-aa91-c945b2fe092c , url : http:\\\\/\\\\/localhost:8000\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg } ], Note : Depending on the \"type\" of file (image, video, audio, file) this field will have a different name. This has both the url which is the URI to retrieve the binary content of the file as well as the target_id which is the file ID. So we can retrieve the file with a GET request to the URI http://localhost:8000/sites/default/files/2019-03/1-Service%20File.jpg . But more importantly we can retrieve the file metadata by making a request to http://localhost:8000/entity/file/3 with one of the allowed formats For example: curl -i -X GET http://localhost:8000/entity/file/3?_format=json HTTP/1.1 200 OK Date: Tue, 05 Mar 2019 16:52:06 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-Drupal-Dynamic-Cache: MISS X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) X-Drupal-Cache: HIT Content-Length: 634 Content-Type: application/json { fid : [ { value : 3 } ], uuid : [ { value : e97ad038-dcb3-4d81-aa91-c945b2fe092c } ], langcode : [ { value : en } ], uid : [ { target_id : 1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\\\/user\\\\/1 } ], filename : [ { value : 1-Service File.jpg } ], uri : [ { value : public:\\\\/\\\\/2019-03\\\\/1-Service File.jpg , url : \\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg } ], filemime : [ { value : image\\\\/jpeg } ], filesize : [ { value : 166608 } ], status : [ { value : true } ], created : [ { value : 2019-03-01T19:43:48+00:00 , format : Y-m-d\\\\TH:i:sP } ], changed : [ { value : 2019-03-01T19:43:48+00:00 , format : Y-m-d\\\\TH:i:sP } ] } The uri: url: is the path to your file, so for the above example of \"url\": \"\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg\" . I can perform a GET against my hostname /sites/default/files/2019-03/1-Service%20File.jpg and get the contents of this file.","title":"Files"},{"location":"technical-documentation/rest-patch/","text":"Updating resources - PATCH request PATCH requests allow you to update resources in place via a REST call. In this case you send a few required fields and then any changed fields. PATCH requests are available for nodes and media entities, but not for files. PATCH requests are very consistent between node and media entities so we will just show one set of examples here. Our example node is at http://localhost:8000/node/3 . If you perform a GET against another node or media you can see all of the fields, some of these are calculated (change based on others, i.e. \"changed\"), some are references to other entities (nodes, media, files in Drupal. i.e. \"field_model\") and others are pure text fields (i.e. \"title\"). The fields will be different between different node types and media types, but the syntax to update them is the same. Authorization Change a text field Change an entity reference Authorization If you have restricted access to view your content, you will need to use one of the configured authorization methods to access your content, media and/or files. These are defined under Authorization on the overview. This with assume you have already created a node or media at some location. Change a text field To change the title of a node, you need to supply the new title and the node_type. The node_type is required as this defines what fields are available to the node. A successful PATCH request will return a 200 status code and the body will contain the newly updated body. curl -i -u admin:islandora -H Content-type: application/json -X PATCH -d '{ type : [{ target_id : islandora_object }], title : [{ value : Updated with a PATCH request }]}' 'http://localhost:8000/node/3?_format=json' HTTP/1.1 200 OK Date: Mon, 11 Mar 2019 17:01:23 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 1562 Content-Type: application/json { nid :[{ value :3}], uuid :[{ value : 3f618cdc-3f2a-4e77-b932-9ff1d461a57a }], vid :[{ value :3}], langcode :[{ value : en }], type :[{ target_id : islandora_object , target_type : node_type , target_uuid : 62189bec-3ef3-4196-b847-b17e5ce61fd5 }], revision_timestamp :[{ value : 2019-03-05T18:07:00+00:00 , format : Y-m-d\\\\TH:i:sP }], revision_uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], revision_log :[], status :[{ value :true}], title :[{ value : Updated with a PATCH request }], uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], created :[{ value : 2019-03-05T18:07:00+00:00 , format : Y-m-d\\\\TH:i:sP }], changed :[{ value : 2019-03-11T17:01:23+00:00 , format : Y-m-d\\\\TH:i:sP }], promote :[{ value :true}], sticky :[{ value :false}], default_langcode :[{ value :true}], revision_translation_affected :[{ value :true}], content_translation_source :[{ value : und }], content_translation_outdated :[{ value :false}], field_access_terms :[], field_alternative_title :[], field_description :[], field_display_hints :[], field_edtf_date :[], field_edtf_date_created :[], field_edtf_date_issued :[], field_extent :[{ value : 1 item }], field_identifier :[], field_linked_agent :[], field_member_of :[], field_model :[{ target_id :23, target_type : taxonomy_term , target_uuid : 6a3b293d-4617-417b-99d2-23d75b57f7c2 , url : \\/taxonomy\\/term\\/23 }], field_pid :[], field_resource_type :[], field_rights :[], field_subject :[]} Change an entity reference field This example is how to change a field that references some other entity. For this example we will use the field_model field, this is a reference to the taxonomy term that holds the \"model\" of the resource (ie. Image, Collection, Audio, Video, etc) On our example installation taxonomy term 22 is \"Binary\", so to change a node from what it was to a Binary you would do. curl -i -u admin:islandora -H Content-type: application/json -X PATCH -d '{ type : [{ target_id : islandora_object }], field_model : [{ target_id : 22, target_type : taxonomy_term }]}' 'http://localhost:8000/node/3?_format=json' HTTP/1.1 200 OK Date: Mon, 11 Mar 2019 17:51:47 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 1562 Content-Type: application/json { nid :[{ value :3}], uuid :[{ value : 3f618cdc-3f2a-4e77-b932-9ff1d461a57a }], vid :[{ value :4}], langcode :[{ value : en }], type :[{ target_id : islandora_object , target_type : node_type , target_uuid : 62189bec-3ef3-4196-b847-b17e5ce61fd5 }], revision_timestamp :[{ value : 2019-03-11T17:36:10+00:00 , format : Y-m-d\\\\TH:i:sP }], revision_uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], revision_log :[], status :[{ value :true}], title :[{ value : Updated with a PATCH request }], uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], created :[{ value : 2019-03-05T18:07:00+00:00 , format : Y-m-d\\\\TH:i:sP }], changed :[{ value : 2019-03-11T17:51:47+00:00 , format : Y-m-d\\\\TH:i:sP }], promote :[{ value :true}], sticky :[{ value :false}], default_langcode :[{ value :true}], revision_translation_affected :[{ value :true}], content_translation_source :[{ value : und }], content_translation_outdated :[{ value :false}], field_access_terms :[], field_alternative_title :[], field_description :[], field_display_hints :[], field_edtf_date :[], field_edtf_date_created :[], field_edtf_date_issued :[], field_extent :[{ value : 1 item }], field_identifier :[], field_linked_agent :[], field_member_of :[], field_model :[{ target_id :22, target_type : taxonomy_term , target_uuid : e1f167e1-124d-4db4-96ab-30641ca4e21b , url : \\/taxonomy\\/term\\/22 }], field_pid :[], field_resource_type :[], field_rights :[], field_subject :[]} To patch an object and make it part of a collection, you need the id number of the collection object. In this example node 2 will be our collection. target_type can be a confusing one, if you are ever unsure have a look at the returned values for an existing object. curl -i -u admin:islandora -H Content-type: application/json -X PATCH -d '{ type : [{ target_id : islandora_object }], field_member_of : [{ target_id : 2, target_type : node_type }]}' 'http://localhost:8000/node/3?_format=json' HTTP/1.1 200 OK Date: Mon, 11 Mar 2019 18:01:40 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 1669 Content-Type: application/json { nid :[{ value :3}], uuid :[{ value : 3f618cdc-3f2a-4e77-b932-9ff1d461a57a }], vid :[{ value :4}], langcode :[{ value : en }], type :[{ target_id : islandora_object , target_type : node_type , target_uuid : 62189bec-3ef3-4196-b847-b17e5ce61fd5 }], revision_timestamp :[{ value : 2019-03-11T17:36:10+00:00 , format : Y-m-d\\\\TH:i:sP }], revision_uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], revision_log :[], status :[{ value :true}], title :[{ value : Updated with a PATCH request }], uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], created :[{ value : 2019-03-05T18:07:00+00:00 , format : Y-m-d\\\\TH:i:sP }], changed :[{ value : 2019-03-11T18:01:40+00:00 , format : Y-m-d\\\\TH:i:sP }], promote :[{ value :true}], sticky :[{ value :false}], default_langcode :[{ value :true}], revision_translation_affected :[{ value :true}], content_translation_source :[{ value : und }], content_translation_outdated :[{ value :false}], field_access_terms :[], field_alternative_title :[], field_description :[], field_display_hints :[], field_edtf_date :[], field_edtf_date_created :[], field_edtf_date_issued :[], field_extent :[{ value : 1 item }], field_identifier :[], field_linked_agent :[], field_member_of :[{ target_id :2, target_type : node , target_uuid : 413135a6-0bd1-4d6b-8bcb-059cf7784d83 , url : \\/node\\/2 }], field_model :[{ target_id :22, target_type : taxonomy_term , target_uuid : e1f167e1-124d-4db4-96ab-30641ca4e21b , url : \\/taxonomy\\/term\\/22 }], field_pid :[], field_resource_type :[], field_rights :[], field_subject :[]}","title":"PATCH"},{"location":"technical-documentation/rest-patch/#updating-resources-patch-request","text":"PATCH requests allow you to update resources in place via a REST call. In this case you send a few required fields and then any changed fields. PATCH requests are available for nodes and media entities, but not for files. PATCH requests are very consistent between node and media entities so we will just show one set of examples here. Our example node is at http://localhost:8000/node/3 . If you perform a GET against another node or media you can see all of the fields, some of these are calculated (change based on others, i.e. \"changed\"), some are references to other entities (nodes, media, files in Drupal. i.e. \"field_model\") and others are pure text fields (i.e. \"title\"). The fields will be different between different node types and media types, but the syntax to update them is the same. Authorization Change a text field Change an entity reference","title":"Updating resources - PATCH request"},{"location":"technical-documentation/rest-patch/#authorization","text":"If you have restricted access to view your content, you will need to use one of the configured authorization methods to access your content, media and/or files. These are defined under Authorization on the overview. This with assume you have already created a node or media at some location.","title":"Authorization"},{"location":"technical-documentation/rest-patch/#change-a-text-field","text":"To change the title of a node, you need to supply the new title and the node_type. The node_type is required as this defines what fields are available to the node. A successful PATCH request will return a 200 status code and the body will contain the newly updated body. curl -i -u admin:islandora -H Content-type: application/json -X PATCH -d '{ type : [{ target_id : islandora_object }], title : [{ value : Updated with a PATCH request }]}' 'http://localhost:8000/node/3?_format=json' HTTP/1.1 200 OK Date: Mon, 11 Mar 2019 17:01:23 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 1562 Content-Type: application/json { nid :[{ value :3}], uuid :[{ value : 3f618cdc-3f2a-4e77-b932-9ff1d461a57a }], vid :[{ value :3}], langcode :[{ value : en }], type :[{ target_id : islandora_object , target_type : node_type , target_uuid : 62189bec-3ef3-4196-b847-b17e5ce61fd5 }], revision_timestamp :[{ value : 2019-03-05T18:07:00+00:00 , format : Y-m-d\\\\TH:i:sP }], revision_uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], revision_log :[], status :[{ value :true}], title :[{ value : Updated with a PATCH request }], uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], created :[{ value : 2019-03-05T18:07:00+00:00 , format : Y-m-d\\\\TH:i:sP }], changed :[{ value : 2019-03-11T17:01:23+00:00 , format : Y-m-d\\\\TH:i:sP }], promote :[{ value :true}], sticky :[{ value :false}], default_langcode :[{ value :true}], revision_translation_affected :[{ value :true}], content_translation_source :[{ value : und }], content_translation_outdated :[{ value :false}], field_access_terms :[], field_alternative_title :[], field_description :[], field_display_hints :[], field_edtf_date :[], field_edtf_date_created :[], field_edtf_date_issued :[], field_extent :[{ value : 1 item }], field_identifier :[], field_linked_agent :[], field_member_of :[], field_model :[{ target_id :23, target_type : taxonomy_term , target_uuid : 6a3b293d-4617-417b-99d2-23d75b57f7c2 , url : \\/taxonomy\\/term\\/23 }], field_pid :[], field_resource_type :[], field_rights :[], field_subject :[]}","title":"Change a text field"},{"location":"technical-documentation/rest-patch/#change-an-entity-reference-field","text":"This example is how to change a field that references some other entity. For this example we will use the field_model field, this is a reference to the taxonomy term that holds the \"model\" of the resource (ie. Image, Collection, Audio, Video, etc) On our example installation taxonomy term 22 is \"Binary\", so to change a node from what it was to a Binary you would do. curl -i -u admin:islandora -H Content-type: application/json -X PATCH -d '{ type : [{ target_id : islandora_object }], field_model : [{ target_id : 22, target_type : taxonomy_term }]}' 'http://localhost:8000/node/3?_format=json' HTTP/1.1 200 OK Date: Mon, 11 Mar 2019 17:51:47 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 1562 Content-Type: application/json { nid :[{ value :3}], uuid :[{ value : 3f618cdc-3f2a-4e77-b932-9ff1d461a57a }], vid :[{ value :4}], langcode :[{ value : en }], type :[{ target_id : islandora_object , target_type : node_type , target_uuid : 62189bec-3ef3-4196-b847-b17e5ce61fd5 }], revision_timestamp :[{ value : 2019-03-11T17:36:10+00:00 , format : Y-m-d\\\\TH:i:sP }], revision_uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], revision_log :[], status :[{ value :true}], title :[{ value : Updated with a PATCH request }], uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], created :[{ value : 2019-03-05T18:07:00+00:00 , format : Y-m-d\\\\TH:i:sP }], changed :[{ value : 2019-03-11T17:51:47+00:00 , format : Y-m-d\\\\TH:i:sP }], promote :[{ value :true}], sticky :[{ value :false}], default_langcode :[{ value :true}], revision_translation_affected :[{ value :true}], content_translation_source :[{ value : und }], content_translation_outdated :[{ value :false}], field_access_terms :[], field_alternative_title :[], field_description :[], field_display_hints :[], field_edtf_date :[], field_edtf_date_created :[], field_edtf_date_issued :[], field_extent :[{ value : 1 item }], field_identifier :[], field_linked_agent :[], field_member_of :[], field_model :[{ target_id :22, target_type : taxonomy_term , target_uuid : e1f167e1-124d-4db4-96ab-30641ca4e21b , url : \\/taxonomy\\/term\\/22 }], field_pid :[], field_resource_type :[], field_rights :[], field_subject :[]} To patch an object and make it part of a collection, you need the id number of the collection object. In this example node 2 will be our collection. target_type can be a confusing one, if you are ever unsure have a look at the returned values for an existing object. curl -i -u admin:islandora -H Content-type: application/json -X PATCH -d '{ type : [{ target_id : islandora_object }], field_member_of : [{ target_id : 2, target_type : node_type }]}' 'http://localhost:8000/node/3?_format=json' HTTP/1.1 200 OK Date: Mon, 11 Mar 2019 18:01:40 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 1669 Content-Type: application/json { nid :[{ value :3}], uuid :[{ value : 3f618cdc-3f2a-4e77-b932-9ff1d461a57a }], vid :[{ value :4}], langcode :[{ value : en }], type :[{ target_id : islandora_object , target_type : node_type , target_uuid : 62189bec-3ef3-4196-b847-b17e5ce61fd5 }], revision_timestamp :[{ value : 2019-03-11T17:36:10+00:00 , format : Y-m-d\\\\TH:i:sP }], revision_uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], revision_log :[], status :[{ value :true}], title :[{ value : Updated with a PATCH request }], uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], created :[{ value : 2019-03-05T18:07:00+00:00 , format : Y-m-d\\\\TH:i:sP }], changed :[{ value : 2019-03-11T18:01:40+00:00 , format : Y-m-d\\\\TH:i:sP }], promote :[{ value :true}], sticky :[{ value :false}], default_langcode :[{ value :true}], revision_translation_affected :[{ value :true}], content_translation_source :[{ value : und }], content_translation_outdated :[{ value :false}], field_access_terms :[], field_alternative_title :[], field_description :[], field_display_hints :[], field_edtf_date :[], field_edtf_date_created :[], field_edtf_date_issued :[], field_extent :[{ value : 1 item }], field_identifier :[], field_linked_agent :[], field_member_of :[{ target_id :2, target_type : node , target_uuid : 413135a6-0bd1-4d6b-8bcb-059cf7784d83 , url : \\/node\\/2 }], field_model :[{ target_id :22, target_type : taxonomy_term , target_uuid : e1f167e1-124d-4db4-96ab-30641ca4e21b , url : \\/taxonomy\\/term\\/22 }], field_pid :[], field_resource_type :[], field_rights :[], field_subject :[]}","title":"Change an entity reference field"},{"location":"technical-documentation/rest-signposting/","text":"Signposting Signposting is a technique used in RESTful APIs where other relevant resources are exposed to clients as Link headers in GET and HEAD requests. These Link headers follow a standard format as specified in RFC8288 . Drupal already makes use of this technique for content entities, and Islandora takes it even further by providing additional Link headers that enable the client to navigate the repository and discover additional information about various resources. Because the links are returned in response headers, they can be relied upon without having to parse the message body. This makes them consistent across all serialization formats that can be returned in a message body (XML, JSON, JSONLD, etc...). As a general precaution, link headers for Drupal entities are not exposed to users that do not have the permissions to view the entity linked in the header. So making GET and HEAD requests anonymously will yield a different set of headers than what an authenticated user would see. For example, anonymous users don't have the view media permission, so they will not see the link headers for media associated with a node. Link Headers Provided by Islandora Alternate Representations Other representations generated by different serializers available through Drupal's REST API are exposed as link headers with rel=\"alternate\" and type equal to the mimetype that will be received when dereferencing the link. For example, if an entity in Drupal has a JSONLD representation, then the link header returned in a GET or HEAD response would look like Link: http://example.org/node/1?_format=jsonld ; rel=\"alternate\"; type=\"application/ld+json\" Referenced Entities Entity reference fields are exposed as link headers with rel=\"related\" and a title equal to the entity reference field's display label. For example, if http://example.org/node/1 has an entity reference field name \"Associated Content\" that references http://example.org/node/2 , then the link header returned in a GET or HEAD response would look like Link: http://example.org/node/2 ; rel=\"related\"; title=\"Associated Content\" Referenced Taxonomy Terms Entity reference fields for taxonomy terms get special handling. The taxonomy terms used to tag content are exposed as link headers with rel=\"tag\" and a title equal to the taxonomy term's display label. If the term has an external URI in a controlled vocabulary, then that URI is provided. Otherwise, the local Drupal URI is provided. For example, if a piece of content is tagged with taxonomy/term/1 , which has a display label of \"Example Term\", then the link header returned in a GET or HEAD response would look like Link: http://example.org/taxonomy/term/1 ; rel=\"tag\"; title=\"Example Term\" If instead the term were to have the field_external_uri field with a value of http://exampletwo.org/vocab#term then the link header would look like Link: http://exampletwo.org/vocab#term ; rel=\"tag\"; title=\"Example Term\" . Associated Media Media entities belonging to nodes are exposed as link headers with rel=\"related\" and a title equal to the display label of their field_media_use taxonomy term. For example, if a media is tagged as Original File indicating that it is the initial file uploaded, the link header returned in a GET or HEAD response for a node would look like Link: http://example.org/media/1 ; rel=\"related\"; title=\"Original File\" . Source Files Files that are the source for media entities are exposed as Link headers in the GET and HEAD responses with rel=\"describes\" . The endpoint to edit the contents of the source file is also exposed using rel=\"edit-media\" . For example, if http://example.org/media/1 has the source file http://example.org/file.txt , then a GET or HEAD response would contain both Link: http://example.org/file.txt ; rel=\"describes\" Link: http://example.org/media/1/source ; rel=\"edit-media\" Examples Requesting a Node After creating a node, adding it to a Collection, uploading a file and kicking off derivatives, the link headers returned for said node would look like the following. Note that non-Link headers have been removed for brevity: vagrant@claw:~$ curl -I http://localhost:8000/node/1?_format=json HTTP/1.1 200 OK ... # These are provided by Drupal core Link: http://localhost:8000/node/1 ; rel= canonical Link: http://localhost:8000/node/1/delete ; rel= https://drupal.org/link-relations/delete-form Link: http://localhost:8000/admin/content/node/delete?node=1 ; rel= https://drupal.org/link-relations/delete-multiple-form Link: http://localhost:8000/node/1/edit ; rel= edit-form Link: http://localhost:8000/node/1/revisions ; rel= version-history Link: http://localhost:8000/node/1 ; rel= https://drupal.org/link-relations/revision Link: http://localhost:8000/node?node=1 ; rel= https://drupal.org/link-relations/create # These are provided by Islandora Link: http://localhost:8000/node/2 ; rel= related ; title= Member of Link: http://purl.org/coar/resource_type/c_c513 ; rel= tag ; title= Image Link: http://localhost:8000/media/1 ; rel= related ; title= Original File Link: http://localhost:8000/media/2 ; rel= related ; title= Service File Link: http://localhost:8000/media/3 ; rel= related ; title= Thumbnail Image Link: http://localhost:8000/node/1?_format=jsonld ; rel= alternate ; type= application/ld+json Requesting a Media If we were to inspect one of the Media associated with this node (which we would've gotten in the response above), the results would look like: vagrant@claw:~$ curl -I http://localhost:8000/media/1?_format=json HTTP/1.1 200 OK ... # These are provided by Drupal core Link: http://localhost:8000/media/add ; rel= https://drupal.org/link-relations/add-page Link: http://localhost:8000/media/add/image ; rel= https://drupal.org/link-relations/add-form Link: http://localhost:8000/media/1 ; rel= canonical Link: http://localhost:8000/admin/content/media ; rel= collection Link: http://localhost:8000/media/1/delete ; rel= https://drupal.org/link-relations/delete-form Link: http://localhost:8000/media/delete?media=1 ; rel= https://drupal.org/link-relations/delete-multiple-form Link: http://localhost:8000/media/1/edit ; rel= edit-form Link: http://localhost:8000/media/1 ; rel= https://drupal.org/link-relations/revision # These are provided by Islandora Link: http://localhost:8000/node/1 ; rel= related ; title= Media of Link: http://pcdm.org/use#OriginalFile ; rel= tag ; title= Original File Link: http://localhost:8000/media/1?_format=jsonld ; rel= alternate ; type= application/ld+json Link: http://localhost:8000/media/1/source ; rel= edit-media Link: http://localhost:8000/_flysystem/fedora/2019-03/IF-Org-Chart_0.jpg ; rel= describes ; type= image/jpeg","title":"Signposting"},{"location":"technical-documentation/rest-signposting/#signposting","text":"Signposting is a technique used in RESTful APIs where other relevant resources are exposed to clients as Link headers in GET and HEAD requests. These Link headers follow a standard format as specified in RFC8288 . Drupal already makes use of this technique for content entities, and Islandora takes it even further by providing additional Link headers that enable the client to navigate the repository and discover additional information about various resources. Because the links are returned in response headers, they can be relied upon without having to parse the message body. This makes them consistent across all serialization formats that can be returned in a message body (XML, JSON, JSONLD, etc...). As a general precaution, link headers for Drupal entities are not exposed to users that do not have the permissions to view the entity linked in the header. So making GET and HEAD requests anonymously will yield a different set of headers than what an authenticated user would see. For example, anonymous users don't have the view media permission, so they will not see the link headers for media associated with a node.","title":"Signposting"},{"location":"technical-documentation/rest-signposting/#link-headers-provided-by-islandora","text":"","title":"Link Headers Provided by Islandora"},{"location":"technical-documentation/rest-signposting/#alternate-representations","text":"Other representations generated by different serializers available through Drupal's REST API are exposed as link headers with rel=\"alternate\" and type equal to the mimetype that will be received when dereferencing the link. For example, if an entity in Drupal has a JSONLD representation, then the link header returned in a GET or HEAD response would look like Link: http://example.org/node/1?_format=jsonld ; rel=\"alternate\"; type=\"application/ld+json\"","title":"Alternate Representations"},{"location":"technical-documentation/rest-signposting/#referenced-entities","text":"Entity reference fields are exposed as link headers with rel=\"related\" and a title equal to the entity reference field's display label. For example, if http://example.org/node/1 has an entity reference field name \"Associated Content\" that references http://example.org/node/2 , then the link header returned in a GET or HEAD response would look like Link: http://example.org/node/2 ; rel=\"related\"; title=\"Associated Content\"","title":"Referenced Entities"},{"location":"technical-documentation/rest-signposting/#referenced-taxonomy-terms","text":"Entity reference fields for taxonomy terms get special handling. The taxonomy terms used to tag content are exposed as link headers with rel=\"tag\" and a title equal to the taxonomy term's display label. If the term has an external URI in a controlled vocabulary, then that URI is provided. Otherwise, the local Drupal URI is provided. For example, if a piece of content is tagged with taxonomy/term/1 , which has a display label of \"Example Term\", then the link header returned in a GET or HEAD response would look like Link: http://example.org/taxonomy/term/1 ; rel=\"tag\"; title=\"Example Term\" If instead the term were to have the field_external_uri field with a value of http://exampletwo.org/vocab#term then the link header would look like Link: http://exampletwo.org/vocab#term ; rel=\"tag\"; title=\"Example Term\" .","title":"Referenced Taxonomy Terms"},{"location":"technical-documentation/rest-signposting/#associated-media","text":"Media entities belonging to nodes are exposed as link headers with rel=\"related\" and a title equal to the display label of their field_media_use taxonomy term. For example, if a media is tagged as Original File indicating that it is the initial file uploaded, the link header returned in a GET or HEAD response for a node would look like Link: http://example.org/media/1 ; rel=\"related\"; title=\"Original File\" .","title":"Associated Media"},{"location":"technical-documentation/rest-signposting/#source-files","text":"Files that are the source for media entities are exposed as Link headers in the GET and HEAD responses with rel=\"describes\" . The endpoint to edit the contents of the source file is also exposed using rel=\"edit-media\" . For example, if http://example.org/media/1 has the source file http://example.org/file.txt , then a GET or HEAD response would contain both Link: http://example.org/file.txt ; rel=\"describes\" Link: http://example.org/media/1/source ; rel=\"edit-media\"","title":"Source Files"},{"location":"technical-documentation/rest-signposting/#examples","text":"","title":"Examples"},{"location":"technical-documentation/rest-signposting/#requesting-a-node","text":"After creating a node, adding it to a Collection, uploading a file and kicking off derivatives, the link headers returned for said node would look like the following. Note that non-Link headers have been removed for brevity: vagrant@claw:~$ curl -I http://localhost:8000/node/1?_format=json HTTP/1.1 200 OK ... # These are provided by Drupal core Link: http://localhost:8000/node/1 ; rel= canonical Link: http://localhost:8000/node/1/delete ; rel= https://drupal.org/link-relations/delete-form Link: http://localhost:8000/admin/content/node/delete?node=1 ; rel= https://drupal.org/link-relations/delete-multiple-form Link: http://localhost:8000/node/1/edit ; rel= edit-form Link: http://localhost:8000/node/1/revisions ; rel= version-history Link: http://localhost:8000/node/1 ; rel= https://drupal.org/link-relations/revision Link: http://localhost:8000/node?node=1 ; rel= https://drupal.org/link-relations/create # These are provided by Islandora Link: http://localhost:8000/node/2 ; rel= related ; title= Member of Link: http://purl.org/coar/resource_type/c_c513 ; rel= tag ; title= Image Link: http://localhost:8000/media/1 ; rel= related ; title= Original File Link: http://localhost:8000/media/2 ; rel= related ; title= Service File Link: http://localhost:8000/media/3 ; rel= related ; title= Thumbnail Image Link: http://localhost:8000/node/1?_format=jsonld ; rel= alternate ; type= application/ld+json","title":"Requesting a Node"},{"location":"technical-documentation/rest-signposting/#requesting-a-media","text":"If we were to inspect one of the Media associated with this node (which we would've gotten in the response above), the results would look like: vagrant@claw:~$ curl -I http://localhost:8000/media/1?_format=json HTTP/1.1 200 OK ... # These are provided by Drupal core Link: http://localhost:8000/media/add ; rel= https://drupal.org/link-relations/add-page Link: http://localhost:8000/media/add/image ; rel= https://drupal.org/link-relations/add-form Link: http://localhost:8000/media/1 ; rel= canonical Link: http://localhost:8000/admin/content/media ; rel= collection Link: http://localhost:8000/media/1/delete ; rel= https://drupal.org/link-relations/delete-form Link: http://localhost:8000/media/delete?media=1 ; rel= https://drupal.org/link-relations/delete-multiple-form Link: http://localhost:8000/media/1/edit ; rel= edit-form Link: http://localhost:8000/media/1 ; rel= https://drupal.org/link-relations/revision # These are provided by Islandora Link: http://localhost:8000/node/1 ; rel= related ; title= Media of Link: http://pcdm.org/use#OriginalFile ; rel= tag ; title= Original File Link: http://localhost:8000/media/1?_format=jsonld ; rel= alternate ; type= application/ld+json Link: http://localhost:8000/media/1/source ; rel= edit-media Link: http://localhost:8000/_flysystem/fedora/2019-03/IF-Org-Chart_0.jpg ; rel= describes ; type= image/jpeg","title":"Requesting a Media"},{"location":"technical-documentation/running-automated-tests/","text":"Running Automated Tests User Interface Warning Some of islandora's dependencies include deprecated code. This will cause the tests to fail when run through the GUI. To avoid this, use the command-line method with the --suppress-deprecations tag. To run automated tests via a web browser, you can to Admin Configuration Testing (http://localhost:8000/admin/config/development/testing) in the admin toolbar. From there you can browse and search for tests, select the ones you'd like to run. Pressing the blue \"Run Tests\" button will execute all tests you've selected in a batch and then display the results. Command Line Running tests from the command line utilizes the test runner script provided by Drupal core. From Drupal's web directory, the full command to run is vagrant@claw:/var/www/html/drupal/web$ sudo -u www-data php core/scripts/run-tests.sh \\ --suppress-deprecations \\ --url http://127.0.0.1:8000 \\ --verbose \\ --php `which php` \\ --module islandora Then wait - running these tests may take a while. Let's unpack it: You need to run this as the apache user for filesystem access, hence sudo -u www-data Despite having a .sh extension, you run the command with php: php core/scripts/run-tests.sh --suppress-deprecations tells the script not to count deprecation warnings as test failures --url http://127.0.0.1:8000 tells the script what base url to use for functional tests. If you are using a port other than 8000, you'll need to make sure to update this accordingly --verbose is optional, but useful if you want more feedback from failures --php `which php` tells the script where to find the php executable to use --module \"islandora\" tells the script to run all tests from the islandora module If you want to run just a single class instead of a whole module's worth, you can use the --class option instead of --module . The --class option takes the fully namespaced class name as an argument. For example, to run just the AddMediaToNodeTest : vagrant@claw:/var/www/html/drupal/web$ sudo -u www-data php core/scripts/run-tests.sh \\ --suppress-deprecations \\ --url http://127.0.0.1:8000 \\ --verbose \\ --php `which php` \\ --class Drupal\\Tests\\islandora\\Functional\\AddMediaToNodeTest","title":"Running Tests"},{"location":"technical-documentation/running-automated-tests/#running-automated-tests","text":"","title":"Running Automated Tests"},{"location":"technical-documentation/running-automated-tests/#user-interface","text":"Warning Some of islandora's dependencies include deprecated code. This will cause the tests to fail when run through the GUI. To avoid this, use the command-line method with the --suppress-deprecations tag. To run automated tests via a web browser, you can to Admin Configuration Testing (http://localhost:8000/admin/config/development/testing) in the admin toolbar. From there you can browse and search for tests, select the ones you'd like to run. Pressing the blue \"Run Tests\" button will execute all tests you've selected in a batch and then display the results.","title":"User Interface"},{"location":"technical-documentation/running-automated-tests/#command-line","text":"Running tests from the command line utilizes the test runner script provided by Drupal core. From Drupal's web directory, the full command to run is vagrant@claw:/var/www/html/drupal/web$ sudo -u www-data php core/scripts/run-tests.sh \\ --suppress-deprecations \\ --url http://127.0.0.1:8000 \\ --verbose \\ --php `which php` \\ --module islandora Then wait - running these tests may take a while. Let's unpack it: You need to run this as the apache user for filesystem access, hence sudo -u www-data Despite having a .sh extension, you run the command with php: php core/scripts/run-tests.sh --suppress-deprecations tells the script not to count deprecation warnings as test failures --url http://127.0.0.1:8000 tells the script what base url to use for functional tests. If you are using a port other than 8000, you'll need to make sure to update this accordingly --verbose is optional, but useful if you want more feedback from failures --php `which php` tells the script where to find the php executable to use --module \"islandora\" tells the script to run all tests from the islandora module If you want to run just a single class instead of a whole module's worth, you can use the --class option instead of --module . The --class option takes the fully namespaced class name as an argument. For example, to run just the AddMediaToNodeTest : vagrant@claw:/var/www/html/drupal/web$ sudo -u www-data php core/scripts/run-tests.sh \\ --suppress-deprecations \\ --url http://127.0.0.1:8000 \\ --verbose \\ --php `which php` \\ --class Drupal\\Tests\\islandora\\Functional\\AddMediaToNodeTest","title":"Command Line"},{"location":"technical-documentation/structure/","text":"Structure","title":"Structure"},{"location":"technical-documentation/structure/#structure","text":"","title":"Structure"},{"location":"technical-documentation/testing-notes/","text":"How to find things in Fedora? The map between Drupal URIs and their corresponding Fedora URIs is stored in a service called Gemini. An Islandora \"pseudo-field\" can be enabled that will display the corresponding Fedora URI on the page of a node, taxonomy term, or media object. You can also query Gemini directly. Instructions for doing that are provided below. For more information about the Gemini service, see the Gemini README . Fedora URI Pseudo-field To display the Fedora URI pseudo-field on a Drupal node, media, or taxonomy term, go to Manage Configuration Islandora and select all the bundles for which you would like the Fedora URI displayed. A valid Gemini URL is required. On the playbook , Gemini is at http://localhost:8080/gemini. Once you have selected the bundles, and cleared the cache, the new pseudo-field will appear at the bottom of all display modes. You can alter where in the display the Fedora URI field appears, by going to the \"Manage Display\" page for the bundle. For example, for a Repository Item, you'd go to http://localhost:8000/admin/structure/types/manage/islandora_object/display. In that list you should see Fedora URI which you can move around (or hide) as desired. Clearing cache may be necessary to refresh the node display. How to look up a Fedora URI through Gemini (nodes and taxonomy terms) In Gemini, each entry is keyed on the UUID assigned by Drupal (the long one, not the node id). To get the UUID of a node, or taxonomy term in Drupal, you can look in the Devel tab or in the JSON representation, e.g.: http://localhost:8000/node/2?_format=json . Then, query the Gemini REST service (using a REST client such as POSTman, or a command-line tool such as curl ) for that UUID: curl -H Authorization:Bearer islandora http://localhost:8000/gemini/[uuid_value] Alternatively, you can login to SQL, choose the gemini database, and issue a query. With the playbook's default setup: vagrant ssh mysql -uroot -pislandora gemini select fedora_uri from Gemini where drupal_uri = 'http://localhost:8000/node/[nid]?_format=jsonld'; How to look up a Fedora URI through Gemini (files)? Files in Fedora have the file URI in Gemini, and can be queried based on the UUID (accessible from the Media's json) or their URI. select fedora_uri from Gemini where drupal_uri = 'http://localhost:8000/_flysystem/fedora/2019-05/639647.jpg'; Media and Gemini Media objects aren't indexed in Gemini. Their Fedora counterparts are located at the Fedora URI of the file, appended with /fcr:metadata . This is an RDF document in Fedora that describes the binary file itself , and it contains all the information describing the file that is present in the fields of the Media. When you enable the pseudo-field on a media object, you see the URI of its Fedora counterpart, file_uri + /fcr:metadata , constructed using the Gemini mapping of its attached file. How do I search for a object in the Solr? Go to http://localhost:8983/solr/#/CLAW/query Issue a Solr query. Example ss_search_api_id: entity:node/4:en Sample Triplestore queries Go to http://localhost:8080/bigdata/#query Under namespaces ( http://localhost:8080/bigdata/#namespaces ), make sure islandora is selected. Find all triples with given object as the subject select ?p ?o where { drupal_url ?p ?o } Example: select ?p ?o where { http://localhost:8000/media/8?_format=jsonld ?p ?o } Getting objects in a collection select ?s where { ?s http://pcdm.org/models#memberOf drual_url_of_the_collection?_format=jsonld } Example: select ?s where { ?s http://pcdm.org/models#memberOf http://localhost:8000/node/7?_format=jsonld } Find all media/files belonging to a node select ?s where { ?s http://pcdm.org/models#fileOf drupal_url_of_the_object?_format=jsonld } Example: select ?s where { ?s http://pcdm.org/models#fileOf http://localhost:8000/node/4?_format=jsonld }","title":"Testing Notes"},{"location":"technical-documentation/testing-notes/#how-to-find-things-in-fedora","text":"The map between Drupal URIs and their corresponding Fedora URIs is stored in a service called Gemini. An Islandora \"pseudo-field\" can be enabled that will display the corresponding Fedora URI on the page of a node, taxonomy term, or media object. You can also query Gemini directly. Instructions for doing that are provided below. For more information about the Gemini service, see the Gemini README .","title":"How to find things in Fedora?"},{"location":"technical-documentation/testing-notes/#fedora-uri-pseudo-field","text":"To display the Fedora URI pseudo-field on a Drupal node, media, or taxonomy term, go to Manage Configuration Islandora and select all the bundles for which you would like the Fedora URI displayed. A valid Gemini URL is required. On the playbook , Gemini is at http://localhost:8080/gemini. Once you have selected the bundles, and cleared the cache, the new pseudo-field will appear at the bottom of all display modes. You can alter where in the display the Fedora URI field appears, by going to the \"Manage Display\" page for the bundle. For example, for a Repository Item, you'd go to http://localhost:8000/admin/structure/types/manage/islandora_object/display. In that list you should see Fedora URI which you can move around (or hide) as desired. Clearing cache may be necessary to refresh the node display.","title":"Fedora URI Pseudo-field"},{"location":"technical-documentation/testing-notes/#how-to-look-up-a-fedora-uri-through-gemini-nodes-and-taxonomy-terms","text":"In Gemini, each entry is keyed on the UUID assigned by Drupal (the long one, not the node id). To get the UUID of a node, or taxonomy term in Drupal, you can look in the Devel tab or in the JSON representation, e.g.: http://localhost:8000/node/2?_format=json . Then, query the Gemini REST service (using a REST client such as POSTman, or a command-line tool such as curl ) for that UUID: curl -H Authorization:Bearer islandora http://localhost:8000/gemini/[uuid_value] Alternatively, you can login to SQL, choose the gemini database, and issue a query. With the playbook's default setup: vagrant ssh mysql -uroot -pislandora gemini select fedora_uri from Gemini where drupal_uri = 'http://localhost:8000/node/[nid]?_format=jsonld';","title":"How to look up a Fedora URI through Gemini (nodes and taxonomy terms)"},{"location":"technical-documentation/testing-notes/#how-to-look-up-a-fedora-uri-through-gemini-files","text":"Files in Fedora have the file URI in Gemini, and can be queried based on the UUID (accessible from the Media's json) or their URI. select fedora_uri from Gemini where drupal_uri = 'http://localhost:8000/_flysystem/fedora/2019-05/639647.jpg';","title":"How to look up a Fedora URI through Gemini (files)?"},{"location":"technical-documentation/testing-notes/#media-and-gemini","text":"Media objects aren't indexed in Gemini. Their Fedora counterparts are located at the Fedora URI of the file, appended with /fcr:metadata . This is an RDF document in Fedora that describes the binary file itself , and it contains all the information describing the file that is present in the fields of the Media. When you enable the pseudo-field on a media object, you see the URI of its Fedora counterpart, file_uri + /fcr:metadata , constructed using the Gemini mapping of its attached file.","title":"Media and Gemini"},{"location":"technical-documentation/testing-notes/#how-do-i-search-for-a-object-in-the-solr","text":"Go to http://localhost:8983/solr/#/CLAW/query Issue a Solr query. Example ss_search_api_id: entity:node/4:en","title":"How do I search for a object in the Solr?"},{"location":"technical-documentation/testing-notes/#sample-triplestore-queries","text":"Go to http://localhost:8080/bigdata/#query Under namespaces ( http://localhost:8080/bigdata/#namespaces ), make sure islandora is selected.","title":"Sample Triplestore queries"},{"location":"technical-documentation/testing-notes/#find-all-triples-with-given-object-as-the-subject","text":"select ?p ?o where { drupal_url ?p ?o } Example: select ?p ?o where { http://localhost:8000/media/8?_format=jsonld ?p ?o }","title":"Find all triples with given object as the subject"},{"location":"technical-documentation/testing-notes/#getting-objects-in-a-collection","text":"select ?s where { ?s http://pcdm.org/models#memberOf drual_url_of_the_collection?_format=jsonld } Example: select ?s where { ?s http://pcdm.org/models#memberOf http://localhost:8000/node/7?_format=jsonld }","title":"Getting objects in a collection"},{"location":"technical-documentation/testing-notes/#find-all-mediafiles-belonging-to-a-node","text":"select ?s where { ?s http://pcdm.org/models#fileOf drupal_url_of_the_object?_format=jsonld } Example: select ?s where { ?s http://pcdm.org/models#fileOf http://localhost:8000/node/4?_format=jsonld }","title":"Find all media/files belonging to a node"},{"location":"technical-documentation/using-rest-endpoints/","text":"Islandora 8 via REST Each node, media and file in Drupal 8 has its own URI and we can GET the resources, some in a variety of formats. We can also create nodes, media and files in Drupal by using PUT and/or POST requests. We can update the field content by using a PATCH request and lastly we can DELETE a node, media or file resource. To perform these actions, you will need the RESTful Web Services module enabled. To configure your setup via the UI, you also need the RESTful UI module enabled. Then you can configure your REST services at https:// yourmachine /admin/config/services/rest This screenshot shows the setup for resources, you can see the various HTTP methods and what formats they will respond in and what authentication methods they support. Authorization Getting resources - GET Creating resources - POST/PUT Updating resources - PATCH Deleting resources - DELETE Authorization If your resources are restricted (hidden) you will need to have authorization to access them. You can specify which types of authentication are allowed for which HTTP methods. These are common to all HTTP methods against the REST API. In the above screenshot we have 3 allowed methods. 1. basic_auth 1. jwt_auth 1. cookie Basic authentication (basic_auth) To use basic authentication with a client like cURL use the -u username:password argument. For example: curl -u admin:islandora http://localhost:8000/node/3 JWT authentication (jwt_auth) By default JWTs are passed internally from Drupal to various microservices and Fedora. To use a JWT yourself you need to enable the JWT Authentication Issuer module. Once enabled this module makes a /jwt/token endpoint. You can perform a GET against this endpoint as an authenticated user to receive a JWT. For example: curl -i -u admin:islandora http://localhost:8000/jwt/token HTTP/1.1 200 OK Date: Mon, 04 Mar 2019 22:08:37 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 620 Content-Type: application/json { token : eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NTE3MzczMTcsImV4cCI6MTU1MTc0NDUxNywiZHJ1cGFsIjp7InVpZCI6IjEifSwid2ViaWQiOiIxIiwiaXNzIjoiaHR0cHM6XC9cL2xvY2FsaG9zdDo4MDAwIiwic3ViIjoiYWRtaW4iLCJyb2xlcyI6WyJhdXRoZW50aWNhdGVkIiwiYWRtaW5pc3RyYXRvciIsImZlZG9yYWFkbWluIl19.QUTrMiK_DyBxqQY4LnibLYtieEW3-MyjjQO9NSFI7bPylNm1S5ZY0uvzjDob3ckYgRN4uCyMFZO4BPytpQVA_jyeSuZyUA_10v33ItpoKyjrJ_S057iykNd_rWmxe8tT8T1fPypq_-Z7Th_PkyZWrYBqoBBVO1iVQt5txxfGWMqhxd2FgsXw6N-aR9sYOSc4UrLmFRmPP5Zk_CNIZP6NtBaM9JNr8CnWyPEFSAR75xfyH3ge5qjBqLlDS389k07pyJFB5rOT59txzLE9WLvpp9JK3oQv821Q1Bp-PMiASghXc0dBCHxM8o41BzLE88UstRA7agBAkUqG3hMpoNZqfA } You can then take the same token and re-use it. curl -H Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NTE3MzczMTcsImV4cCI6MTU1MTc0NDUxNywiZHJ1cGFsIjp7InVpZCI6IjEifSwid2ViaWQiOiIxIiwiaXNzIjoiaHR0cHM6XC9cL2xvY2FsaG9zdDo4MDAwIiwic3ViIjoiYWRtaW4iLCJyb2xlcyI6WyJhdXRoZW50aWNhdGVkIiwiYWRtaW5pc3RyYXRvciIsImZlZG9yYWFkbWluIl19.QUTrMiK_DyBxqQY4LnibLYtieEW3-MyjjQO9NSFI7bPylNm1S5ZY0uvzjDob3ckYgRN4uCyMFZO4BPytpQVA_jyeSuZyUA_10v33ItpoKyjrJ_S057iykNd_rWmxe8tT8T1fPypq_-Z7Th_PkyZWrYBqoBBVO1iVQt5txxfGWMqhxd2FgsXw6N-aR9sYOSc4UrLmFRmPP5Zk_CNIZP6NtBaM9JNr8CnWyPEFSAR75xfyH3ge5qjBqLlDS389k07pyJFB5rOT59txzLE9WLvpp9JK3oQv821Q1Bp-PMiASghXc0dBCHxM8o41BzLE88UstRA7agBAkUqG3hMpoNZqfA http://localhost:8000/node/3?_format=jsonld HTTP/1.1 200 OK Date: Mon, 04 Mar 2019 22:10:02 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private Link: http://localhost:8000/node/3 ; rel= canonical Link: http://localhost:8000/node/3/delete ; rel= https://drupal.org/link-relations/delete-form Link: http://localhost:8000/admin/content/node/delete?node=3 ; rel= https://drupal.org/link-relations/delete-multiple-form Link: http://localhost:8000/node/3/edit ; rel= edit-form Link: http://localhost:8000/node/3/revisions ; rel= version-history Link: http://localhost:8000/node/3 ; rel= https://drupal.org/link-relations/revision Link: http://localhost:8000/node?node=3 ; rel= https://drupal.org/link-relations/create Link: http://purl.org/coar/resource_type/c_c513 ; rel= tag ; title= Image Link: http://localhost:8000/media/1 ; rel= related ; title= Original File Link: http://localhost:8000/media/2 ; rel= related ; title= Service File Link: http://localhost:8000/media/3 ; rel= related ; title= Thumbnail Image Link: http://localhost:8000/node/3?_format=json ; rel= alternate ; type= application/json X-Drupal-Dynamic-Cache: HIT X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 858 Content-Type: application/ld+json { @graph : [ { @id : http:\\\\/\\\\/localhost:8000\\\\/node\\\\/3?_format=jsonld , @type : [ http:\\\\/\\\\/pcdm.org\\\\/models#Object ], http:\\\\/\\\\/purl.org\\\\/dc\\\\/terms\\\\/title : [ { @value : Custom item , @language : en } ], http:\\\\/\\\\/schema.org\\\\/author : [ { @id : http:\\\\/\\\\/localhost:8000\\\\/user\\\\/1?_format=jsonld } ], http:\\\\/\\\\/schema.org\\\\/dateCreated : [ { @value : 2019-03-01T19:42:54+00:00 , @type : http:\\\\/\\\\/www.w3.org\\\\/2001\\\\/XMLSchema#dateTime } ], http:\\\\/\\\\/schema.org\\\\/dateModified : [ { @value : 2019-03-01T19:43:12+00:00 , @type : http:\\\\/\\\\/www.w3.org\\\\/2001\\\\/XMLSchema#dateTime } ], http:\\\\/\\\\/purl.org\\\\/dc\\\\/terms\\\\/extent : [ { @value : 1 item , @type : http:\\\\/\\\\/www.w3.org\\\\/2001\\\\/XMLSchema#string } ], http:\\\\/\\\\/schema.org\\\\/sameAs : [ { @value : http:\\\\/\\\\/localhost:8000\\\\/node\\\\/1?_format=jsonld } ] }, { @id : http:\\\\/\\\\/localhost:8000\\\\/user\\\\/1?_format=jsonld , @type : [ http:\\\\/\\\\/schema.org\\\\/Person ] } ] } Cookie authentication (cookie) This allows you to use a cookie stored in your web browser when you log in to Drupal to access these REST endpoint pages. This is what allows you to access the URIs like http://localhost:8000/node/1?_format=json with your web browser.","title":"Introduction"},{"location":"technical-documentation/using-rest-endpoints/#islandora-8-via-rest","text":"Each node, media and file in Drupal 8 has its own URI and we can GET the resources, some in a variety of formats. We can also create nodes, media and files in Drupal by using PUT and/or POST requests. We can update the field content by using a PATCH request and lastly we can DELETE a node, media or file resource. To perform these actions, you will need the RESTful Web Services module enabled. To configure your setup via the UI, you also need the RESTful UI module enabled. Then you can configure your REST services at https:// yourmachine /admin/config/services/rest This screenshot shows the setup for resources, you can see the various HTTP methods and what formats they will respond in and what authentication methods they support. Authorization Getting resources - GET Creating resources - POST/PUT Updating resources - PATCH Deleting resources - DELETE","title":"Islandora 8 via REST"},{"location":"technical-documentation/using-rest-endpoints/#authorization","text":"If your resources are restricted (hidden) you will need to have authorization to access them. You can specify which types of authentication are allowed for which HTTP methods. These are common to all HTTP methods against the REST API. In the above screenshot we have 3 allowed methods. 1. basic_auth 1. jwt_auth 1. cookie","title":"Authorization"},{"location":"technical-documentation/using-rest-endpoints/#basic-authentication-basic_auth","text":"To use basic authentication with a client like cURL use the -u username:password argument. For example: curl -u admin:islandora http://localhost:8000/node/3","title":"Basic authentication (basic_auth)"},{"location":"technical-documentation/using-rest-endpoints/#jwt-authentication-jwt_auth","text":"By default JWTs are passed internally from Drupal to various microservices and Fedora. To use a JWT yourself you need to enable the JWT Authentication Issuer module. Once enabled this module makes a /jwt/token endpoint. You can perform a GET against this endpoint as an authenticated user to receive a JWT. For example: curl -i -u admin:islandora http://localhost:8000/jwt/token HTTP/1.1 200 OK Date: Mon, 04 Mar 2019 22:08:37 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 620 Content-Type: application/json { token : eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NTE3MzczMTcsImV4cCI6MTU1MTc0NDUxNywiZHJ1cGFsIjp7InVpZCI6IjEifSwid2ViaWQiOiIxIiwiaXNzIjoiaHR0cHM6XC9cL2xvY2FsaG9zdDo4MDAwIiwic3ViIjoiYWRtaW4iLCJyb2xlcyI6WyJhdXRoZW50aWNhdGVkIiwiYWRtaW5pc3RyYXRvciIsImZlZG9yYWFkbWluIl19.QUTrMiK_DyBxqQY4LnibLYtieEW3-MyjjQO9NSFI7bPylNm1S5ZY0uvzjDob3ckYgRN4uCyMFZO4BPytpQVA_jyeSuZyUA_10v33ItpoKyjrJ_S057iykNd_rWmxe8tT8T1fPypq_-Z7Th_PkyZWrYBqoBBVO1iVQt5txxfGWMqhxd2FgsXw6N-aR9sYOSc4UrLmFRmPP5Zk_CNIZP6NtBaM9JNr8CnWyPEFSAR75xfyH3ge5qjBqLlDS389k07pyJFB5rOT59txzLE9WLvpp9JK3oQv821Q1Bp-PMiASghXc0dBCHxM8o41BzLE88UstRA7agBAkUqG3hMpoNZqfA } You can then take the same token and re-use it. curl -H Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NTE3MzczMTcsImV4cCI6MTU1MTc0NDUxNywiZHJ1cGFsIjp7InVpZCI6IjEifSwid2ViaWQiOiIxIiwiaXNzIjoiaHR0cHM6XC9cL2xvY2FsaG9zdDo4MDAwIiwic3ViIjoiYWRtaW4iLCJyb2xlcyI6WyJhdXRoZW50aWNhdGVkIiwiYWRtaW5pc3RyYXRvciIsImZlZG9yYWFkbWluIl19.QUTrMiK_DyBxqQY4LnibLYtieEW3-MyjjQO9NSFI7bPylNm1S5ZY0uvzjDob3ckYgRN4uCyMFZO4BPytpQVA_jyeSuZyUA_10v33ItpoKyjrJ_S057iykNd_rWmxe8tT8T1fPypq_-Z7Th_PkyZWrYBqoBBVO1iVQt5txxfGWMqhxd2FgsXw6N-aR9sYOSc4UrLmFRmPP5Zk_CNIZP6NtBaM9JNr8CnWyPEFSAR75xfyH3ge5qjBqLlDS389k07pyJFB5rOT59txzLE9WLvpp9JK3oQv821Q1Bp-PMiASghXc0dBCHxM8o41BzLE88UstRA7agBAkUqG3hMpoNZqfA http://localhost:8000/node/3?_format=jsonld HTTP/1.1 200 OK Date: Mon, 04 Mar 2019 22:10:02 GMT Server: Apache/2.4.18 (Ubuntu) X-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1 Cache-Control: must-revalidate, no-cache, private Link: http://localhost:8000/node/3 ; rel= canonical Link: http://localhost:8000/node/3/delete ; rel= https://drupal.org/link-relations/delete-form Link: http://localhost:8000/admin/content/node/delete?node=3 ; rel= https://drupal.org/link-relations/delete-multiple-form Link: http://localhost:8000/node/3/edit ; rel= edit-form Link: http://localhost:8000/node/3/revisions ; rel= version-history Link: http://localhost:8000/node/3 ; rel= https://drupal.org/link-relations/revision Link: http://localhost:8000/node?node=3 ; rel= https://drupal.org/link-relations/create Link: http://purl.org/coar/resource_type/c_c513 ; rel= tag ; title= Image Link: http://localhost:8000/media/1 ; rel= related ; title= Original File Link: http://localhost:8000/media/2 ; rel= related ; title= Service File Link: http://localhost:8000/media/3 ; rel= related ; title= Thumbnail Image Link: http://localhost:8000/node/3?_format=json ; rel= alternate ; type= application/json X-Drupal-Dynamic-Cache: HIT X-UA-Compatible: IE=edge Content-language: en X-Content-Type-Options: nosniff X-Frame-Options: SAMEORIGIN Expires: Sun, 19 Nov 1978 05:00:00 GMT Vary: X-Generator: Drupal 8 (https://www.drupal.org) Content-Length: 858 Content-Type: application/ld+json { @graph : [ { @id : http:\\\\/\\\\/localhost:8000\\\\/node\\\\/3?_format=jsonld , @type : [ http:\\\\/\\\\/pcdm.org\\\\/models#Object ], http:\\\\/\\\\/purl.org\\\\/dc\\\\/terms\\\\/title : [ { @value : Custom item , @language : en } ], http:\\\\/\\\\/schema.org\\\\/author : [ { @id : http:\\\\/\\\\/localhost:8000\\\\/user\\\\/1?_format=jsonld } ], http:\\\\/\\\\/schema.org\\\\/dateCreated : [ { @value : 2019-03-01T19:42:54+00:00 , @type : http:\\\\/\\\\/www.w3.org\\\\/2001\\\\/XMLSchema#dateTime } ], http:\\\\/\\\\/schema.org\\\\/dateModified : [ { @value : 2019-03-01T19:43:12+00:00 , @type : http:\\\\/\\\\/www.w3.org\\\\/2001\\\\/XMLSchema#dateTime } ], http:\\\\/\\\\/purl.org\\\\/dc\\\\/terms\\\\/extent : [ { @value : 1 item , @type : http:\\\\/\\\\/www.w3.org\\\\/2001\\\\/XMLSchema#string } ], http:\\\\/\\\\/schema.org\\\\/sameAs : [ { @value : http:\\\\/\\\\/localhost:8000\\\\/node\\\\/1?_format=jsonld } ] }, { @id : http:\\\\/\\\\/localhost:8000\\\\/user\\\\/1?_format=jsonld , @type : [ http:\\\\/\\\\/schema.org\\\\/Person ] } ] }","title":"JWT authentication (jwt_auth)"},{"location":"technical-documentation/using-rest-endpoints/#cookie-authentication-cookie","text":"This allows you to use a cookie stored in your web browser when you log in to Drupal to access these REST endpoint pages. This is what allows you to access the URIs like http://localhost:8000/node/1?_format=json with your web browser.","title":"Cookie authentication (cookie)"},{"location":"technical-documentation/versioning/","text":"Versioning Policy Islandora 8 uses semantic versioning , except for Drupal modules. Components Semantic Versioning Major version . Minor version . Patch Major version ; Major changes, and breaks the API Minor version ; New features, and does not break the API Patch ; Bug fixes, and never breaks backward compatibility Example: 1.2.3 Alpaca Chullo CLAW Crayfish Crayfish Commons Syn Drupal Contrib Versioning Core Compatibility - Major . PatchLevel[-Extra] Example: 8.x-1.1 drupal-project islandora jsonld","title":"Versioning Policy"},{"location":"technical-documentation/versioning/#versioning-policy","text":"Islandora 8 uses semantic versioning , except for Drupal modules.","title":"Versioning Policy"},{"location":"technical-documentation/versioning/#components","text":"","title":"Components"},{"location":"technical-documentation/versioning/#semantic-versioning","text":"Major version . Minor version . Patch Major version ; Major changes, and breaks the API Minor version ; New features, and does not break the API Patch ; Bug fixes, and never breaks backward compatibility Example: 1.2.3 Alpaca Chullo CLAW Crayfish Crayfish Commons Syn","title":"Semantic Versioning"},{"location":"technical-documentation/versioning/#drupal-contrib-versioning","text":"Core Compatibility - Major . PatchLevel[-Extra] Example: 8.x-1.1 drupal-project islandora jsonld","title":"Drupal Contrib Versioning"},{"location":"user-documentation/access-control/","text":"","title":"Access control"},{"location":"user-documentation/collections/","text":"Collections are groups of repository content that can be described themselves. Repository content is aggregated in a collection by setting the field_member_of entity reference field to point to a collection. Generally speaking, anything can behave as a collection, and anything with field_member_of can be a member of a collection. However, collections are 'officially' designated as such by applying the \"Collection\" taxonomy term to an item's field_model field. By default, Islandora 8 has a context configured to handle collections by looking for that term. Collections and Deleting Collections and their members are independent of each other, and removing something from a collection does not delete it. Similarly, deleting a collection does not delete its members. Creating a Collection From the front page, click on Add content. This is under Tools. Then click on 'Repository Item' to give your collection the default metadata profile for Islandora 8. Fill out the form. Near the end of the form, under System, select Collection from the Model drop down list. Click Save when done. The collection has been created. Now let's add some members to this collection. Add Existing Items to a Collection To populate a collection with existing items, return to any existing content and click on its Edit tab. This brings up the form for this item. Scroll down to the bottom and the System section. In the Member of section, start typing in the name of the collection this item should belong to. Select the name of the collection you want from the autocomplete. The correct collection is now selected. Click Save when ready. To confirm, return to the collection and verify the new item appears in the collection's 'Members' block. Add a New Item as a Member of a Collection To create an item and add it as a member to a collection in one step, visit a collection and click on its Members tab. From the Members tab, you can manage the members of a collection and perform actions on them. Click on the +Add member button, and then select 'Repository Item' to give your new item a Content Type. Only content types that have the field_member_of field will be available from this list. You are taken to the creation form for a Repository Item, but if you scroll down to the System section, you should see the widget for 'Member Of' is already filled out for you with the appropriate collection. Click 'Save' at the end of the form to create the new item and add it as a member to the collection.","title":"Collections"},{"location":"user-documentation/collections/#creating-a-collection","text":"From the front page, click on Add content. This is under Tools. Then click on 'Repository Item' to give your collection the default metadata profile for Islandora 8. Fill out the form. Near the end of the form, under System, select Collection from the Model drop down list. Click Save when done. The collection has been created. Now let's add some members to this collection.","title":"Creating a Collection"},{"location":"user-documentation/collections/#add-existing-items-to-a-collection","text":"To populate a collection with existing items, return to any existing content and click on its Edit tab. This brings up the form for this item. Scroll down to the bottom and the System section. In the Member of section, start typing in the name of the collection this item should belong to. Select the name of the collection you want from the autocomplete. The correct collection is now selected. Click Save when ready. To confirm, return to the collection and verify the new item appears in the collection's 'Members' block.","title":"Add Existing Items to a Collection"},{"location":"user-documentation/collections/#add-a-new-item-as-a-member-of-a-collection","text":"To create an item and add it as a member to a collection in one step, visit a collection and click on its Members tab. From the Members tab, you can manage the members of a collection and perform actions on them. Click on the +Add member button, and then select 'Repository Item' to give your new item a Content Type. Only content types that have the field_member_of field will be available from this list. You are taken to the creation form for a Repository Item, but if you scroll down to the System section, you should see the widget for 'Member Of' is already filled out for you with the appropriate collection. Click 'Save' at the end of the form to create the new item and add it as a member to the collection.","title":"Add a New Item as a Member of a Collection"},{"location":"user-documentation/content_types/","text":"Create / Update a Content Type Islandora Demo The screenshots and pre-existing data in this documentation assume that you are using the Islandora Defaults configuration. Graphical User Interface This page will address how to create and modify ingest forms (or rather, content types) via the GUI. For help working with forms via the API, please check out the Further Reading section for links to more advanced Drupal documentation. Since objects in Islandora 8 are stored in Drupal as Nodes, we use the standard Drupal Content Types system to create and edit our \u2018ingest forms\u2019 Content Types in Drupal 8 . Islandora 8 forms are Drupal forms, and if you are already familiar with Drupal Field UI, you\u2019re already well equipped to create and modify your own ingest forms in Islandora 8. This page will address how to create and modify ingest forms (or rather, content types) via the GUI. For help working with forms via the API, please check out the Further Reading section for links to more advanced Drupal documentation. Modify a Content Type If you have deployed your Islandora 8 with the Islandora Demo configuration, you will already have a Repository Item content type available, with pre-configured fields. In the Admin menu, go to Structure Content Types and find the Repository Item content type. Select Manage Fields . You will see a list of the fields that are already available in the Repository Item content type. Add a Field Let\u2019s add a new field where a user can indicate if the repository item needs to be reviewed: Click \u201cAdd Field\u201d In some cases an existing field may be available to use instead of creating a new one. The dropdown box labeled 'Re-use an existing field' has a list of available fields. For our example we will create a brand-new field. Since our example field is a \u201cyes/no\u201d decision (whether the item needs review or not), choose \"Boolean\" from the dropdown menu and give the Label field a name. See the list of Drupal 8 FieldTypes, FieldWidgets, and FieldFormatters for descriptions of the different types available by default. Additional modules, such as the controlled_access_terms module, can provide their own Field types to choose from as well. Click \"Save and continue.\" Next, configure how the field is stored in the Drupal database. For this field type you can select how many values will be allowed. The default settings, \"Limited\" in the dropdown box and \"1\" for the allowed number of values works for our example. Click \"Save field settings.\" Then configure how the field is described (including its display label and the help text for when it appears on a form) and constraints on its use. In this case, the field will be required for this Content Type, and will be set to \u201con\u201d by default. In the \"Default Value\" section, click the checkbox next to \"Needs Review\" to indicate all new repository items need review by default. Click \"Save settings.\" The new field has been added: And it appears in the ingest form when we try to create a new repository object. To test this, go to Content Add content Repository item: RDF Mappings New fields, with the exception of Typed Relation fields, are not automatically indexed in Fedora and the triple-store. Update the Content Type's RDF Mapping to enable indexing the field (see below). Search New fields will not automatically be searchable. They need to be added to the SOLR index configuration. See the 'Setup and Configure Search' page for more information. Context To add new behavior based on the results of this new field, check out link to Context docs Change the Form Display Now let\u2019s move our new field to a different part of the form. In the Admin menu, return to Structure Content Types and find the Repository Item content type again. Select Manage form display. All of the fields in this content type are available, in a list, with a simple drag-and-place UI. Drag the new field to the top of the form. We can also change the way the Boolean options are displayed, with radio buttons as opposed to a single checkbox. Different display options will be available from the dropdown menu depending on field type. For more information, please check out List of Drupal 8 FieldTypes, FieldWidgets, and FieldFormatters Save. When creating a new Repository Item, the new field appears at the top, as a set of radio buttons. Change the Content Display Finally, let\u2019s change how the results of this field are displayed. Initially the new field shows up at the bottom of repository object pages: In the Admin menu, return to Structure Content Types and find the Repository Item content type again. Select Manage display from the dropdown menu. Find the new field. You can change how the field title or Label is displayed. Click the dropdown menu to choose from inline/above/hidden/visually hidden. You can also replace the options displayed with variations on a binary choice. Click the gear to choose from the following: On/Off, Yes/No, Enabled/Disabled, 1/0. checkmark/X, or hide the field completely. You can also drag the field into the Disabled section so that neither its label or its contents appear in the display, although the field is saved on the node. Drag the field to \"Disabled\" and save. You no longer see the field on the display, but it is available when editing the node. Create a Content Type To create your own custom content type from scratch, please refer to this guide on Drupal.org. Custom content types are not synced to Fedora or indexed by the triple-store by default. Repository managers must add them to the \"Content\" ('repository_content') context before their nodes are synced to Fedora and indexed by the triple-store. Navigate to the Contexts configuration page ('/admin/structure/context'). Find the 'Content' context and click the corresponding 'Edit' button ('/admin/structure/context/repository_content'). Find the 'Node Bundle' condition in the 'Conditions' section. Click the checkbox for the new Content Type. Scroll down to the bottom of the page and click 'Save and continue'. Updating contexts does not retroactively fire any actions. Any of the custom content type's nodes that were created before updating the context will need to have the indexing action manually triggered. Update / Create an RDF Mapping RDF mapping aligns Drupal fields with RDF ontology properties. For example, the title field of a content model can be mapped to dcterms:title and/or schema:title. In Islandora 8, triples expressed by these mappings get synced to Fedora and indexed in the Blazegraph triplestore. RDF mappings are defined/stored in Drupal as a YAML file (to learn more about YAML, there are several tutorials on the web . Currently, Drupal 8 does not have a UI to create/update RDF mappings to ontologies other than Schema.org. This requires repository managers to update the configuration files themselves. Consider using the RDF mappings included in islandora_demo as templates by copying and modifying one to meet your needs. The Drupal 8 Configuration Synchronization export (e.g. http://localhost:8000/admin/config/development/configuration/single/export ) and import (e.g. http://localhost:8000/admin/config/development/configuration/single/import ) can be used to get a copy of the mappings for editing in a text editor before being uploaded again. Alternatively, a repository manager can update the configuration on the server and use Features to import the edits. An RDF mapping configuration file has two main areas, the mapping's metadata and the mapping itself. Most of the mapping's metadata should be left alone unless you are creating a brand new mapping for a new Content Type or Taxonomy Vocabulary. A partial example from islandora_demo's islandora_object (Repository Item) is included below: langcode: en status: true dependencies: config: - node.type.islandora_object enforced: module: - islandora_demo module: - node id: node.islandora_object targetEntityType: node bundle: islandora_object types: - 'pcdm:Object' fieldMappings: title: properties: - 'dc:title' field_alternative_title: properties: - 'dc:alternative' field_edtf_date: properties: - 'dc:date' datatype_callback: callable: 'Drupal\\controlled_access_terms\\EDTFConverter::dateIso8601Value' field_description: properties: - 'dc:description' The required mapping metadata fields when creating a brand-new mapping include the id , status , targetEntityType , and bundle . ( uuid and _core , not seen in the example above but may be present in exported copies, will be added by Drupal automatically.) bundle is the machine name for the Content Type or Taxonomy Vocabulary you are creating the mapping for. targetEntityType is node for Content Types or taxonomy_term for Taxonomy Vocabularies. The id configuration is a concatenation of target entity type and bundle ('node' and 'islandora_object' in the example above). The id is also used to name the configuration file: e.g. rdf.mapping.node.islandora_object.yml is rdf.mapping. plus the id ( node.islandora_object ) and then .yml . The mapping itself consists of the types ' and fieldMappings configurations. All the mappings use RDF namespaces instead of fully-qualified URIs. For example, the type for islandora_object is pcdm:Object instead of http://pcdm.org/models#Object . Unfortunately, the available namespaces are defined in module hooks (hook_rdf_namespaces) rather than in a configuration file. Repository managers wanting to add additional namespaces need to create their own module and implement hook_rdf_namespaces. See the islandora_demo hook implementation for an example. Namespaces currently supported (ordered by the module that supplies them) include: rdf content: http://purl.org/rss/1.0/modules/content/ dc: http://purl.org/dc/terms/ foaf: http://xmlns.com/foaf/0.1/ og: http://ogp.me/ns# rdfs: http://www.w3.org/2000/01/rdf-schema# schema: http://schema.org/ sioc: http://rdfs.org/sioc/ns# sioct: http://rdfs.org/sioc/types# skos: http://www.w3.org/2004/02/skos/core# xsd: http://www.w3.org/2001/XMLSchema# islandora ldp: http://www.w3.org/ns/ldp# dc11: http://purl.org/dc/elements/1.1/ nfo: http://www.semanticdesktop.org/ontologies/2007/03/22/nfo/v1.1/ ebucore: http://www.ebu.ch/metadata/ontologies/ebucore/ebucore# fedora: http://fedora.info/definitions/v4/repository# owl: http://www.w3.org/2002/07/owl# ore: http://www.openarchives.org/ore/terms/ rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns# islandora: http://islandora.ca/CLAW/ pcdm: http://pcdm.org/models# use: http://pcdm.org/use# iana: http://www.iana.org/assignments/relation/ islandora_demo relators: http://id.loc.gov/vocabulary/relators/ controlled_access_terms wgs84_pos: http://www.w3.org/2003/01/geo/wgs84_pos# org: https://www.w3.org/TR/vocab-org/#org: xs: http://www.w3.org/2001/XMLSchema# The types corresponds to the rdf:type predicate (which corresponds to JSON-LD's @type ) and can have multiple values. This type value will be applied to every node or taxonomy term using the mapped content type or vocabulary. In some cases a repository may want a node or taxonomy term's rdf:type to be configurable. For example, the Corporate Body Vocabulary (provided by the Controlled Access Terms Default Configuration module) has schema:Organization set as the default type in the RDF mapping. However, more granular types may apply to one organization and not another, such as schema:GovernmentOrganization or schema:Corporation . The alter_jsonld_type Context reaction allows Content Types and Taxonomy Vocabularies to add a field's values as rdf:types to its JSON-LD serialization (the format used to index a node or taxonomy term in Fedora and the triple-store). fieldMappings specifies the fields to be included, their RDF property mappings, and any necessary data converters (the datatype_callback ). One field can be mapped to more than one RDF property by adding them to the field's properties list. The datatype_callback is defined by the 'callable' key and the fully qualified static method used to convert it to the desired data format. For example, fields of the Drupal datetime type need to be converted to ISO 8601 values, so we use the Drupal\\rdf\\CommonDataConverter::dateIso8601Value function to perform the conversion. Further Reading: Drupal.org Introduction to Form API Step by step method to create a custom form in Drupal 8","title":"Content Types"},{"location":"user-documentation/content_types/#create-update-a-content-type","text":"Islandora Demo The screenshots and pre-existing data in this documentation assume that you are using the Islandora Defaults configuration. Graphical User Interface This page will address how to create and modify ingest forms (or rather, content types) via the GUI. For help working with forms via the API, please check out the Further Reading section for links to more advanced Drupal documentation. Since objects in Islandora 8 are stored in Drupal as Nodes, we use the standard Drupal Content Types system to create and edit our \u2018ingest forms\u2019 Content Types in Drupal 8 . Islandora 8 forms are Drupal forms, and if you are already familiar with Drupal Field UI, you\u2019re already well equipped to create and modify your own ingest forms in Islandora 8. This page will address how to create and modify ingest forms (or rather, content types) via the GUI. For help working with forms via the API, please check out the Further Reading section for links to more advanced Drupal documentation.","title":"Create / Update a Content Type"},{"location":"user-documentation/content_types/#modify-a-content-type","text":"If you have deployed your Islandora 8 with the Islandora Demo configuration, you will already have a Repository Item content type available, with pre-configured fields. In the Admin menu, go to Structure Content Types and find the Repository Item content type. Select Manage Fields . You will see a list of the fields that are already available in the Repository Item content type.","title":"Modify a Content Type"},{"location":"user-documentation/content_types/#add-a-field","text":"Let\u2019s add a new field where a user can indicate if the repository item needs to be reviewed: Click \u201cAdd Field\u201d In some cases an existing field may be available to use instead of creating a new one. The dropdown box labeled 'Re-use an existing field' has a list of available fields. For our example we will create a brand-new field. Since our example field is a \u201cyes/no\u201d decision (whether the item needs review or not), choose \"Boolean\" from the dropdown menu and give the Label field a name. See the list of Drupal 8 FieldTypes, FieldWidgets, and FieldFormatters for descriptions of the different types available by default. Additional modules, such as the controlled_access_terms module, can provide their own Field types to choose from as well. Click \"Save and continue.\" Next, configure how the field is stored in the Drupal database. For this field type you can select how many values will be allowed. The default settings, \"Limited\" in the dropdown box and \"1\" for the allowed number of values works for our example. Click \"Save field settings.\" Then configure how the field is described (including its display label and the help text for when it appears on a form) and constraints on its use. In this case, the field will be required for this Content Type, and will be set to \u201con\u201d by default. In the \"Default Value\" section, click the checkbox next to \"Needs Review\" to indicate all new repository items need review by default. Click \"Save settings.\" The new field has been added: And it appears in the ingest form when we try to create a new repository object. To test this, go to Content Add content Repository item: RDF Mappings New fields, with the exception of Typed Relation fields, are not automatically indexed in Fedora and the triple-store. Update the Content Type's RDF Mapping to enable indexing the field (see below). Search New fields will not automatically be searchable. They need to be added to the SOLR index configuration. See the 'Setup and Configure Search' page for more information. Context To add new behavior based on the results of this new field, check out link to Context docs","title":"Add a Field"},{"location":"user-documentation/content_types/#change-the-form-display","text":"Now let\u2019s move our new field to a different part of the form. In the Admin menu, return to Structure Content Types and find the Repository Item content type again. Select Manage form display. All of the fields in this content type are available, in a list, with a simple drag-and-place UI. Drag the new field to the top of the form. We can also change the way the Boolean options are displayed, with radio buttons as opposed to a single checkbox. Different display options will be available from the dropdown menu depending on field type. For more information, please check out List of Drupal 8 FieldTypes, FieldWidgets, and FieldFormatters Save. When creating a new Repository Item, the new field appears at the top, as a set of radio buttons.","title":"Change the Form Display"},{"location":"user-documentation/content_types/#change-the-content-display","text":"Finally, let\u2019s change how the results of this field are displayed. Initially the new field shows up at the bottom of repository object pages: In the Admin menu, return to Structure Content Types and find the Repository Item content type again. Select Manage display from the dropdown menu. Find the new field. You can change how the field title or Label is displayed. Click the dropdown menu to choose from inline/above/hidden/visually hidden. You can also replace the options displayed with variations on a binary choice. Click the gear to choose from the following: On/Off, Yes/No, Enabled/Disabled, 1/0. checkmark/X, or hide the field completely. You can also drag the field into the Disabled section so that neither its label or its contents appear in the display, although the field is saved on the node. Drag the field to \"Disabled\" and save. You no longer see the field on the display, but it is available when editing the node.","title":"Change the Content Display"},{"location":"user-documentation/content_types/#create-a-content-type","text":"To create your own custom content type from scratch, please refer to this guide on Drupal.org. Custom content types are not synced to Fedora or indexed by the triple-store by default. Repository managers must add them to the \"Content\" ('repository_content') context before their nodes are synced to Fedora and indexed by the triple-store. Navigate to the Contexts configuration page ('/admin/structure/context'). Find the 'Content' context and click the corresponding 'Edit' button ('/admin/structure/context/repository_content'). Find the 'Node Bundle' condition in the 'Conditions' section. Click the checkbox for the new Content Type. Scroll down to the bottom of the page and click 'Save and continue'. Updating contexts does not retroactively fire any actions. Any of the custom content type's nodes that were created before updating the context will need to have the indexing action manually triggered.","title":"Create a Content Type"},{"location":"user-documentation/content_types/#update-create-an-rdf-mapping","text":"RDF mapping aligns Drupal fields with RDF ontology properties. For example, the title field of a content model can be mapped to dcterms:title and/or schema:title. In Islandora 8, triples expressed by these mappings get synced to Fedora and indexed in the Blazegraph triplestore. RDF mappings are defined/stored in Drupal as a YAML file (to learn more about YAML, there are several tutorials on the web . Currently, Drupal 8 does not have a UI to create/update RDF mappings to ontologies other than Schema.org. This requires repository managers to update the configuration files themselves. Consider using the RDF mappings included in islandora_demo as templates by copying and modifying one to meet your needs. The Drupal 8 Configuration Synchronization export (e.g. http://localhost:8000/admin/config/development/configuration/single/export ) and import (e.g. http://localhost:8000/admin/config/development/configuration/single/import ) can be used to get a copy of the mappings for editing in a text editor before being uploaded again. Alternatively, a repository manager can update the configuration on the server and use Features to import the edits. An RDF mapping configuration file has two main areas, the mapping's metadata and the mapping itself. Most of the mapping's metadata should be left alone unless you are creating a brand new mapping for a new Content Type or Taxonomy Vocabulary. A partial example from islandora_demo's islandora_object (Repository Item) is included below: langcode: en status: true dependencies: config: - node.type.islandora_object enforced: module: - islandora_demo module: - node id: node.islandora_object targetEntityType: node bundle: islandora_object types: - 'pcdm:Object' fieldMappings: title: properties: - 'dc:title' field_alternative_title: properties: - 'dc:alternative' field_edtf_date: properties: - 'dc:date' datatype_callback: callable: 'Drupal\\controlled_access_terms\\EDTFConverter::dateIso8601Value' field_description: properties: - 'dc:description' The required mapping metadata fields when creating a brand-new mapping include the id , status , targetEntityType , and bundle . ( uuid and _core , not seen in the example above but may be present in exported copies, will be added by Drupal automatically.) bundle is the machine name for the Content Type or Taxonomy Vocabulary you are creating the mapping for. targetEntityType is node for Content Types or taxonomy_term for Taxonomy Vocabularies. The id configuration is a concatenation of target entity type and bundle ('node' and 'islandora_object' in the example above). The id is also used to name the configuration file: e.g. rdf.mapping.node.islandora_object.yml is rdf.mapping. plus the id ( node.islandora_object ) and then .yml . The mapping itself consists of the types ' and fieldMappings configurations. All the mappings use RDF namespaces instead of fully-qualified URIs. For example, the type for islandora_object is pcdm:Object instead of http://pcdm.org/models#Object . Unfortunately, the available namespaces are defined in module hooks (hook_rdf_namespaces) rather than in a configuration file. Repository managers wanting to add additional namespaces need to create their own module and implement hook_rdf_namespaces. See the islandora_demo hook implementation for an example. Namespaces currently supported (ordered by the module that supplies them) include: rdf content: http://purl.org/rss/1.0/modules/content/ dc: http://purl.org/dc/terms/ foaf: http://xmlns.com/foaf/0.1/ og: http://ogp.me/ns# rdfs: http://www.w3.org/2000/01/rdf-schema# schema: http://schema.org/ sioc: http://rdfs.org/sioc/ns# sioct: http://rdfs.org/sioc/types# skos: http://www.w3.org/2004/02/skos/core# xsd: http://www.w3.org/2001/XMLSchema# islandora ldp: http://www.w3.org/ns/ldp# dc11: http://purl.org/dc/elements/1.1/ nfo: http://www.semanticdesktop.org/ontologies/2007/03/22/nfo/v1.1/ ebucore: http://www.ebu.ch/metadata/ontologies/ebucore/ebucore# fedora: http://fedora.info/definitions/v4/repository# owl: http://www.w3.org/2002/07/owl# ore: http://www.openarchives.org/ore/terms/ rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns# islandora: http://islandora.ca/CLAW/ pcdm: http://pcdm.org/models# use: http://pcdm.org/use# iana: http://www.iana.org/assignments/relation/ islandora_demo relators: http://id.loc.gov/vocabulary/relators/ controlled_access_terms wgs84_pos: http://www.w3.org/2003/01/geo/wgs84_pos# org: https://www.w3.org/TR/vocab-org/#org: xs: http://www.w3.org/2001/XMLSchema# The types corresponds to the rdf:type predicate (which corresponds to JSON-LD's @type ) and can have multiple values. This type value will be applied to every node or taxonomy term using the mapped content type or vocabulary. In some cases a repository may want a node or taxonomy term's rdf:type to be configurable. For example, the Corporate Body Vocabulary (provided by the Controlled Access Terms Default Configuration module) has schema:Organization set as the default type in the RDF mapping. However, more granular types may apply to one organization and not another, such as schema:GovernmentOrganization or schema:Corporation . The alter_jsonld_type Context reaction allows Content Types and Taxonomy Vocabularies to add a field's values as rdf:types to its JSON-LD serialization (the format used to index a node or taxonomy term in Fedora and the triple-store). fieldMappings specifies the fields to be included, their RDF property mappings, and any necessary data converters (the datatype_callback ). One field can be mapped to more than one RDF property by adding them to the field's properties list. The datatype_callback is defined by the 'callable' key and the fully qualified static method used to convert it to the desired data format. For example, fields of the Drupal datetime type need to be converted to ISO 8601 values, so we use the Drupal\\rdf\\CommonDataConverter::dateIso8601Value function to perform the conversion.","title":"Update / Create an RDF Mapping"},{"location":"user-documentation/content_types/#further-reading","text":"Drupal.org Introduction to Form API Step by step method to create a custom form in Drupal 8","title":"Further Reading:"},{"location":"user-documentation/context/","text":"Context in Islandora 8 Context is a Drupal contrib module that allows configuration of \"if this, then that\" logic using an administrative user interface. Context defines \"conditions\" and \"reactions\" to enact the \"if this [condition], then that [reaction]\" logic. Some Islandora 7.x repositories use the community-contributed Islandora Context module to apply this sort of logic to Islandora objects. An example Context from Islandora 7.x is If an object's namespace is 'customnamespace', render the block containing the rights statement \"Please contact Special Collections before reusing this item\". The Context project page on drupal.org says \"You can think of each context as representing a 'section' of your site\", but that doesn't tell the whole story, since it gives the impression that Context is all about defining subsites. Context in Drupal 8 is much more powerful than in Drupal 7 due to how it interacts with the rest of Drupal (specifically, through Drupal 8's new plugin API). Because of this increased flexibility and power, and because Context provides a ready-made user interface for site administrators to combine conditions and reactions, Islandora 8 uses Context to drive the logic underlying many important aspects of Islandora, including which derivatives get generated and how objects are displayed. In Islandora 7, many of these things are managed (and often hard-coded) within solution packs and utility modules. An Example Let's look at the example of how Context can determine how an object is displayed. Drupal 8 has the idea of \"view modes\", which allow site builders to choose what happens when an object is viewed by the user (it has nothing to do with Drupal Views). In the node edit form for Islandora objects, there is a checkbox that, if checked, tells Drupal to render the image using the OpenSeadragon viewer: This functionality is accomplished via the \"Open Seadragon\" Context, which, as its configuration suggests, checks as its condition whether the node as the \"Open Seadragon\" tag and if so, reacts by using the view mode \"Open Seadragon\": Context and Actions Context in Drupal 8 uses Drupal Actions to execute the \"then that\" part of their logic. An implication of this is some configuration options relevant to the outcome of the \"then that\" reaction are configured in the Action admin interface (located at admin/config/system/actions ), not within the Context admin interface (located at admin/structure/context ). While this makes for a clunky admin experience, the advantage is that it allows the reuse of a single piece of Drupal code in multiple Contexts. One important group of functionality in Islandora 8 repositories that admins might want to control is what types of media get persisted to Fedora. Islandora 8 allows administrators to choose what types of media get persisted to Fedora and what types of media get persisted to the Drupal public file system. For example, you may want to persist your thumbnails to Fedora along with your \"Preservation Master\" and \"Original File\" files. This can be accomplished using Context. By default Islandora 8 stores thumbnails in Drupal's public file system, not in Fedora. Thumbnails are automatically generated by a Context (the \"Image Service File\" Context to be specific), but if you want to change the file system where your thumbnails are stored to the be Fedora file system, you need to change that setting in the \"Image - Generate a thumbnail from a service file\" Action, not in the Context that uses that action: This configuration should be done as part of your initial Islandora 8 setup, since there is currently no way to move thumbnails that were persisted to Drupal's public file system to Fedora, or vice versa. But, at least site admins can choose one or the other using this Action. You can create custom Actions and then use them in Contexts. For example, if you want to present a message to the user every time they upload a media tagged as \"Preservation Master File\", create an Action of type \"Display a message to the user\" and enter your message: Then, create a Context that uses this Action as its Reaction, and as its Condition, uses \"Media has term\" with a value of \"Preservation Master File\": Now, when a user creates a Media and tags it as a \"Preservation Master File\", they will be shown the message you created in your Action: Increased Flexibility Most Islandora 8 repository administrators will not need to alter or configure any Contexts. But since much of Islandora 8's underlying functionality is governed by this powerful Drupal contrib module, administrators should become comfortable using it, and Actions, to customize and refine their repositories. Also, since Islandora 8 objects are ordinary Drupal nodes, Islandora objects can take advantage of standard Drupal 8 Context functionality out of the box.","title":"Context"},{"location":"user-documentation/context/#context-in-islandora-8","text":"Context is a Drupal contrib module that allows configuration of \"if this, then that\" logic using an administrative user interface. Context defines \"conditions\" and \"reactions\" to enact the \"if this [condition], then that [reaction]\" logic. Some Islandora 7.x repositories use the community-contributed Islandora Context module to apply this sort of logic to Islandora objects. An example Context from Islandora 7.x is If an object's namespace is 'customnamespace', render the block containing the rights statement \"Please contact Special Collections before reusing this item\". The Context project page on drupal.org says \"You can think of each context as representing a 'section' of your site\", but that doesn't tell the whole story, since it gives the impression that Context is all about defining subsites. Context in Drupal 8 is much more powerful than in Drupal 7 due to how it interacts with the rest of Drupal (specifically, through Drupal 8's new plugin API). Because of this increased flexibility and power, and because Context provides a ready-made user interface for site administrators to combine conditions and reactions, Islandora 8 uses Context to drive the logic underlying many important aspects of Islandora, including which derivatives get generated and how objects are displayed. In Islandora 7, many of these things are managed (and often hard-coded) within solution packs and utility modules.","title":"Context in Islandora 8"},{"location":"user-documentation/context/#an-example","text":"Let's look at the example of how Context can determine how an object is displayed. Drupal 8 has the idea of \"view modes\", which allow site builders to choose what happens when an object is viewed by the user (it has nothing to do with Drupal Views). In the node edit form for Islandora objects, there is a checkbox that, if checked, tells Drupal to render the image using the OpenSeadragon viewer: This functionality is accomplished via the \"Open Seadragon\" Context, which, as its configuration suggests, checks as its condition whether the node as the \"Open Seadragon\" tag and if so, reacts by using the view mode \"Open Seadragon\":","title":"An Example"},{"location":"user-documentation/context/#context-and-actions","text":"Context in Drupal 8 uses Drupal Actions to execute the \"then that\" part of their logic. An implication of this is some configuration options relevant to the outcome of the \"then that\" reaction are configured in the Action admin interface (located at admin/config/system/actions ), not within the Context admin interface (located at admin/structure/context ). While this makes for a clunky admin experience, the advantage is that it allows the reuse of a single piece of Drupal code in multiple Contexts. One important group of functionality in Islandora 8 repositories that admins might want to control is what types of media get persisted to Fedora. Islandora 8 allows administrators to choose what types of media get persisted to Fedora and what types of media get persisted to the Drupal public file system. For example, you may want to persist your thumbnails to Fedora along with your \"Preservation Master\" and \"Original File\" files. This can be accomplished using Context. By default Islandora 8 stores thumbnails in Drupal's public file system, not in Fedora. Thumbnails are automatically generated by a Context (the \"Image Service File\" Context to be specific), but if you want to change the file system where your thumbnails are stored to the be Fedora file system, you need to change that setting in the \"Image - Generate a thumbnail from a service file\" Action, not in the Context that uses that action: This configuration should be done as part of your initial Islandora 8 setup, since there is currently no way to move thumbnails that were persisted to Drupal's public file system to Fedora, or vice versa. But, at least site admins can choose one or the other using this Action. You can create custom Actions and then use them in Contexts. For example, if you want to present a message to the user every time they upload a media tagged as \"Preservation Master File\", create an Action of type \"Display a message to the user\" and enter your message: Then, create a Context that uses this Action as its Reaction, and as its Condition, uses \"Media has term\" with a value of \"Preservation Master File\": Now, when a user creates a Media and tags it as a \"Preservation Master File\", they will be shown the message you created in your Action:","title":"Context and Actions"},{"location":"user-documentation/context/#increased-flexibility","text":"Most Islandora 8 repository administrators will not need to alter or configure any Contexts. But since much of Islandora 8's underlying functionality is governed by this powerful Drupal contrib module, administrators should become comfortable using it, and Actions, to customize and refine their repositories. Also, since Islandora 8 objects are ordinary Drupal nodes, Islandora objects can take advantage of standard Drupal 8 Context functionality out of the box.","title":"Increased Flexibility"},{"location":"user-documentation/create_update_views/","text":"Create / Update a View Views allow you to get your content in Islandora to display on your site in pages or as posts, lists, blocks, etc. Views are powerful and filter content from Islandora to enable you to present content in interesting and exciting ways. Islandora 8 ships with views already created and turned on. The Islandora 8 home page displays content items that have been added to Islandora. This view is named 'Frontpage' and it lists items that meet the following filter criteria . The item is published and the checkbox 'Promoted to front page' is selected. This view will display all content items added to Islandora as the checkbox 'Promoted to front page' is on by default. As you develop your Islandora Web site it is likely that you will need to change this default behaviour of the 'Frontpage' view. The following two tasks demonstrate how to 1) Edit the 'FrontPage' view and 2) Create a new view. Task 1: Edit the 'Frontpage' page view to only show content items and not collections For this example, we added six collection items to Islandora 8. Now, in total there are eight items in the repository. In addition to the six collection items there is one audio item and one image item. Using your Web browser open the Islandora 8 Frontpage (localhost:8000 or your test Islandora) For this example, on the frontpage we can see that Islandora displays a 'Collection' first as this is the most recently added item. To edit the frontpage view, hover over the view ('Frontpage' view) and select 'Edit view' when displayed. Select 'Add' under the filter criteria section. We do not want to display collections, so we need to add a filter criteria that does not filter for the Islandora model type 'collection' Select 'Model' from the list and then 'Apply (all displays)'. Select 'Islandora Model' to select filters on Islandora model types and select 'Apply and continue'. Select the operator 'Is none of' and the 'Collection' model (autocomplete should work here to help you). To finish select 'Apply (all displays)'. 'Save' the view. Now the 'Frontpage' view does not display collections. Task2: Add a new view to only show collections For this example, we create a new view as a block and place the new block to only display on the frontpage. We will add the new collection list block below the existing frontpage view that list items. Using your Web browser open the Islandora 8 Frontpage (localhost:8000 or your test Islandora) Navigate to Administration Structure Views (~/admin/structure/views) Create a new view by selecting 'Add view' Name the view and select 'Create a block'. Give the block a title, decide how you want it to display (Grid, Table, List, Paging). To progress, select 'Save and edit'. Customise the view format and sorting as required. Add a filter criteria to only show the Islandora model type of 'Collection' and 'Save' the view. Place view on frontpage. Now that we have a view as a block, we add it to the 'Main page content' area (using 'Block layout') and only display for the frontpage. Navigate to Administration Structure Block (/admin/structure/block). Under 'Main content' select 'Place block' Find the new block, 'Collection List' and select 'Place block'. Restrict the block to only display on the frontpage by adding the text ' ' to the 'Page' vertical tab. Then select 'Save block'. Review the block placement and move if required. The 'Collection list' now only displays on the frontpage. It displays below the 'Main page content'.","title":"Views"},{"location":"user-documentation/create_update_views/#create-update-a-view","text":"Views allow you to get your content in Islandora to display on your site in pages or as posts, lists, blocks, etc. Views are powerful and filter content from Islandora to enable you to present content in interesting and exciting ways. Islandora 8 ships with views already created and turned on. The Islandora 8 home page displays content items that have been added to Islandora. This view is named 'Frontpage' and it lists items that meet the following filter criteria . The item is published and the checkbox 'Promoted to front page' is selected. This view will display all content items added to Islandora as the checkbox 'Promoted to front page' is on by default. As you develop your Islandora Web site it is likely that you will need to change this default behaviour of the 'Frontpage' view. The following two tasks demonstrate how to 1) Edit the 'FrontPage' view and 2) Create a new view.","title":"Create / Update a View"},{"location":"user-documentation/create_update_views/#task-1-edit-the-frontpage-page-view-to-only-show-content-items-and-not-collections","text":"For this example, we added six collection items to Islandora 8. Now, in total there are eight items in the repository. In addition to the six collection items there is one audio item and one image item. Using your Web browser open the Islandora 8 Frontpage (localhost:8000 or your test Islandora) For this example, on the frontpage we can see that Islandora displays a 'Collection' first as this is the most recently added item. To edit the frontpage view, hover over the view ('Frontpage' view) and select 'Edit view' when displayed. Select 'Add' under the filter criteria section. We do not want to display collections, so we need to add a filter criteria that does not filter for the Islandora model type 'collection' Select 'Model' from the list and then 'Apply (all displays)'. Select 'Islandora Model' to select filters on Islandora model types and select 'Apply and continue'. Select the operator 'Is none of' and the 'Collection' model (autocomplete should work here to help you). To finish select 'Apply (all displays)'. 'Save' the view. Now the 'Frontpage' view does not display collections.","title":"Task 1: Edit the 'Frontpage' page view to only show content items and not collections"},{"location":"user-documentation/create_update_views/#task2-add-a-new-view-to-only-show-collections","text":"For this example, we create a new view as a block and place the new block to only display on the frontpage. We will add the new collection list block below the existing frontpage view that list items. Using your Web browser open the Islandora 8 Frontpage (localhost:8000 or your test Islandora) Navigate to Administration Structure Views (~/admin/structure/views) Create a new view by selecting 'Add view' Name the view and select 'Create a block'. Give the block a title, decide how you want it to display (Grid, Table, List, Paging). To progress, select 'Save and edit'. Customise the view format and sorting as required. Add a filter criteria to only show the Islandora model type of 'Collection' and 'Save' the view. Place view on frontpage. Now that we have a view as a block, we add it to the 'Main page content' area (using 'Block layout') and only display for the frontpage. Navigate to Administration Structure Block (/admin/structure/block). Under 'Main content' select 'Place block' Find the new block, 'Collection List' and select 'Place block'. Restrict the block to only display on the frontpage by adding the text ' ' to the 'Page' vertical tab. Then select 'Save block'. Review the block placement and move if required. The 'Collection list' now only displays on the frontpage. It displays below the 'Main page content'.","title":"Task2: Add a new view to only show collections"},{"location":"user-documentation/creating-an-object/","text":"To create a new item in your Islandora 8 digital repository, we start by creating a node. A node holds the descriptive metadata for content, as well as grouping together an original file and all of the derivatives files generated from it. To create a new node, click on Add content. This is under Tools. Then click on Repository Item. This will assign the default metadata profile to your item. Fill out the form. We're going to create an image, so under System, select \"Image\" from the \"Model\" drop down box. Selecting different models will impact how Islandora handles content, dictating important behaviours such as display and derivative generation. When done, click Save. Upload an Original File Congratulations, you have created a Node! But alas, it has no files. To upload a file, click on the node's Media tab. Then click on Add Media (a blue button). We want to add an image, so clicking on \"Image\" is appropriate in most circumstances. Drupal considers any type of image that can be viewed natively in the browser as an \"Image\". For other image types that require special viewers, such as Tiffs, you have to choose \"File\" You are now presented with the form for the technical metadata of the file. There are three required parts of the form: The media's name. The file to upload. The usage of the file, which dictates how Islandora interprets the file. To trigger derivative generation, select \"Original File\" from the drop down box. Click save when done, and the file will be uploaded (to Fedora by default). Now return to the node you created and you should see the image along with its descriptive metadata.","title":"Make an Image"},{"location":"user-documentation/creating-an-object/#upload-an-original-file","text":"Congratulations, you have created a Node! But alas, it has no files. To upload a file, click on the node's Media tab. Then click on Add Media (a blue button). We want to add an image, so clicking on \"Image\" is appropriate in most circumstances. Drupal considers any type of image that can be viewed natively in the browser as an \"Image\". For other image types that require special viewers, such as Tiffs, you have to choose \"File\" You are now presented with the form for the technical metadata of the file. There are three required parts of the form: The media's name. The file to upload. The usage of the file, which dictates how Islandora interprets the file. To trigger derivative generation, select \"Original File\" from the drop down box. Click save when done, and the file will be uploaded (to Fedora by default). Now return to the node you created and you should see the image along with its descriptive metadata.","title":"Upload an Original File"},{"location":"user-documentation/derivatives/","text":"Todo Derivatives use Context (Rules?) module. Where to configure them? We set them up based on taxonomy terms Where are they, and how do I make a new one?","title":"Derivatives"},{"location":"user-documentation/different_from_7x/","text":"What's Different Between Islandora 1.x and Islandora 8.x In the most basic terms, Islandora 8 is the version of Islandora that works with Fedora 5 . Because Fedora 4 and 5 are vastly different than Fedora 3, so too is Islandora 8 a major departure from what came before. Switching to Islandora 8 represents not just a typical upgrade with improvements, features, and bug fixes, but rather a major shift in how objects are stored and managed. Moving from Islandora 7.x-1.x to 8.x-1.x requires a migration of objects, which you can learn about here . It also requires some adjustments in how you think about your objects and their relationships, and how to manage them in Islandora, which we will cover below. You can also check out some of the documentation provided by the Fedora project: * Concept Mapping - Fedora 3 to 4 * The Fedora 5 object model * Fedora 3 to 4 Upgration * LDP-PCDM-F4 In Action Fedora Repository Structure Fedora 3 stored all objects at the top level of the repository, although presentation of the objects could mimic a directory structure by having objects 'in' collections and collections 'in' other collections. This image is a helpful oversimplification: Fedora 4/5 differs considerably in that there is an innate tree hierarchy to the repository rather than a flat structure. Put less simply, \" a Fedora repository consists of a directed acyclic graph of resources where edges represent a parent-child relation \". Object Structure Fedora 3 objects are FOXML (Fedora Object eXtensible Markup Language) documents, with three elements: Digital Object Identifier : A unique, persistent identifier for the digital object. Also known as the PID. System Properties : A set of system-defined descriptive properties that is necessary to manage and track the object in the repository. Datastream(s) : The element in a Fedora digital object that represents a content item. In Fedora 4/5 , what we would have called objects are now referred to as Resources (and everything in Fedora 4/5 is a Resource ). Instead of being composed of XML as they were in Fedora 3, they are stored in ModeShape as nodes with RDF properties. Resources come in two flavors: RDF Sources , which are Resources having only RDF data, and Non-RDF Sources , which are Resources that are binary files (HTML, PDFs, images, audio, video, etc). The terms [ RDF Source ] and [ Non-RDF Source ] both come from the W3C's Linked Data Platform specification, which also defines the idea of Linked Data Platform Containers , or LDPCs . An LDPC is an RDF Source that functions as a collection of Resources , similar to the way Islandora 7.x-1.x compound objects exist only as a way to tie together its children. An LDPC may contain Non-RDF Sources , as well as other RDF Sources acting as LDPCs ; you can have a container of containers just like how Islandora 7.x-1.x can have a collection of collections. Islandora 8.x-1.x makes use of the Portland Common Data Model (PCDM) as a layer of abstraction over LDPCs to make containment simpler to understand for users; a pcdm:Collection may contain other pcdm:Collections or pcdm:Objects (similar to an Islandora 7.x-1.x collection content model), and a pcdm:Object may contain other pcdm:Objects (similar to the way an Islandora 7.x-1.x compound object has child objects) or pcdm:Files (similar to the way Islandora 7.x-1.x objects have datastreams). Datastreams In Islandora 7.x-1.x, every object has a specific content model which defined what datastreams it could have and which were absolutely required. Some of these Islandora 7.x-1.x datastreams contained metadata about the object while others contained binary files (JPG, PDF, MP3, PNG, TIFF, etc). In Islandora 8.x-1.x, all metadata about a resource is stored as RDF attributes directly on the resource itself, whether that resource is a pcdm:Collection , pcdm:Object or a pcdm:File , so we no longer need to separate metadata by type (RELS-EXT, RELS-INT, MODS, DC, PREMIS, etc) and store it in binary files as we did in Islandora 7.x-1.x. Binary files, such as JPGs, PNGs, MP3s, and PDFs, are handled via pcdm:Files which are contained by a parent pcdm:Object , similar to how an Islandora 7.x-1.x cmodel may hold a PDF or JPG as a datastream. Unlike Islandora 7.x-1.x, these binary files can actually have their own technical metadata attached them. This is because pcdm:Collections , pcdm:Objects and even pcdm:Files are all RDF Sources containing only RDF data, with pcdm:Files having links to the URL of the Non-RDF Source (binary file) they represent as part of their RDF data in addition to whatever other metadata you may want about the file. Using this system, a pcdm:Object can contain as many pcdm:Files as necessary, and each pcdm:File can have separate metadata about itself and its relationship to other pcdm:Files attached to the parent pcdm:Object , serving the same purpose RELS-INT datastreams served in Islandora 7.x-1.x. Note that you can use a pcdm:File to represent a file of metadata, such as MODS, DC, or PBCore, in case you would like to preserve a copy of an object's legacy metadata when migrating into Fedora 4. These metadata files will be treated like any other binary file in Islandora 8.x-1.x, and will not be indexed or editable through the GUI. PIDs Every object in a Fedora 3 repository had a Persistent Identifier following the pattern namespace:pid . Fedora 4/5 resources do not have PIDs. Instead, since Fedora 4 is an LDP server , their identifiers are fundamentally their URIs. The PIDs of objects migrated from a Fedora 3 repository can still be stored in Fedora 4/5, as additional properties on the new Fedora 4 resource. Since resources are stored as nodes on the Drupal side of Islandora 8.x-1.x, they also have Drupal UUIDs.","title":"What's Different Between Islandora 1.x and Islandora 8.x"},{"location":"user-documentation/different_from_7x/#whats-different-between-islandora-1x-and-islandora-8x","text":"In the most basic terms, Islandora 8 is the version of Islandora that works with Fedora 5 . Because Fedora 4 and 5 are vastly different than Fedora 3, so too is Islandora 8 a major departure from what came before. Switching to Islandora 8 represents not just a typical upgrade with improvements, features, and bug fixes, but rather a major shift in how objects are stored and managed. Moving from Islandora 7.x-1.x to 8.x-1.x requires a migration of objects, which you can learn about here . It also requires some adjustments in how you think about your objects and their relationships, and how to manage them in Islandora, which we will cover below. You can also check out some of the documentation provided by the Fedora project: * Concept Mapping - Fedora 3 to 4 * The Fedora 5 object model * Fedora 3 to 4 Upgration * LDP-PCDM-F4 In Action","title":"What's Different Between Islandora 1.x and Islandora 8.x"},{"location":"user-documentation/different_from_7x/#fedora","text":"","title":"Fedora"},{"location":"user-documentation/different_from_7x/#repository-structure","text":"Fedora 3 stored all objects at the top level of the repository, although presentation of the objects could mimic a directory structure by having objects 'in' collections and collections 'in' other collections. This image is a helpful oversimplification: Fedora 4/5 differs considerably in that there is an innate tree hierarchy to the repository rather than a flat structure. Put less simply, \" a Fedora repository consists of a directed acyclic graph of resources where edges represent a parent-child relation \".","title":"Repository Structure"},{"location":"user-documentation/different_from_7x/#object-structure","text":"Fedora 3 objects are FOXML (Fedora Object eXtensible Markup Language) documents, with three elements: Digital Object Identifier : A unique, persistent identifier for the digital object. Also known as the PID. System Properties : A set of system-defined descriptive properties that is necessary to manage and track the object in the repository. Datastream(s) : The element in a Fedora digital object that represents a content item. In Fedora 4/5 , what we would have called objects are now referred to as Resources (and everything in Fedora 4/5 is a Resource ). Instead of being composed of XML as they were in Fedora 3, they are stored in ModeShape as nodes with RDF properties. Resources come in two flavors: RDF Sources , which are Resources having only RDF data, and Non-RDF Sources , which are Resources that are binary files (HTML, PDFs, images, audio, video, etc). The terms [ RDF Source ] and [ Non-RDF Source ] both come from the W3C's Linked Data Platform specification, which also defines the idea of Linked Data Platform Containers , or LDPCs . An LDPC is an RDF Source that functions as a collection of Resources , similar to the way Islandora 7.x-1.x compound objects exist only as a way to tie together its children. An LDPC may contain Non-RDF Sources , as well as other RDF Sources acting as LDPCs ; you can have a container of containers just like how Islandora 7.x-1.x can have a collection of collections. Islandora 8.x-1.x makes use of the Portland Common Data Model (PCDM) as a layer of abstraction over LDPCs to make containment simpler to understand for users; a pcdm:Collection may contain other pcdm:Collections or pcdm:Objects (similar to an Islandora 7.x-1.x collection content model), and a pcdm:Object may contain other pcdm:Objects (similar to the way an Islandora 7.x-1.x compound object has child objects) or pcdm:Files (similar to the way Islandora 7.x-1.x objects have datastreams).","title":"Object Structure"},{"location":"user-documentation/different_from_7x/#datastreams","text":"In Islandora 7.x-1.x, every object has a specific content model which defined what datastreams it could have and which were absolutely required. Some of these Islandora 7.x-1.x datastreams contained metadata about the object while others contained binary files (JPG, PDF, MP3, PNG, TIFF, etc). In Islandora 8.x-1.x, all metadata about a resource is stored as RDF attributes directly on the resource itself, whether that resource is a pcdm:Collection , pcdm:Object or a pcdm:File , so we no longer need to separate metadata by type (RELS-EXT, RELS-INT, MODS, DC, PREMIS, etc) and store it in binary files as we did in Islandora 7.x-1.x. Binary files, such as JPGs, PNGs, MP3s, and PDFs, are handled via pcdm:Files which are contained by a parent pcdm:Object , similar to how an Islandora 7.x-1.x cmodel may hold a PDF or JPG as a datastream. Unlike Islandora 7.x-1.x, these binary files can actually have their own technical metadata attached them. This is because pcdm:Collections , pcdm:Objects and even pcdm:Files are all RDF Sources containing only RDF data, with pcdm:Files having links to the URL of the Non-RDF Source (binary file) they represent as part of their RDF data in addition to whatever other metadata you may want about the file. Using this system, a pcdm:Object can contain as many pcdm:Files as necessary, and each pcdm:File can have separate metadata about itself and its relationship to other pcdm:Files attached to the parent pcdm:Object , serving the same purpose RELS-INT datastreams served in Islandora 7.x-1.x. Note that you can use a pcdm:File to represent a file of metadata, such as MODS, DC, or PBCore, in case you would like to preserve a copy of an object's legacy metadata when migrating into Fedora 4. These metadata files will be treated like any other binary file in Islandora 8.x-1.x, and will not be indexed or editable through the GUI.","title":"Datastreams"},{"location":"user-documentation/different_from_7x/#pids","text":"Every object in a Fedora 3 repository had a Persistent Identifier following the pattern namespace:pid . Fedora 4/5 resources do not have PIDs. Instead, since Fedora 4 is an LDP server , their identifiers are fundamentally their URIs. The PIDs of objects migrated from a Fedora 3 repository can still be stored in Fedora 4/5, as additional properties on the new Fedora 4 resource. Since resources are stored as nodes on the Drupal side of Islandora 8.x-1.x, they also have Drupal UUIDs.","title":"PIDs"},{"location":"user-documentation/fedora-rdf/","text":"Todo If you want to see the Drupal object in RDF, append ?_format=jsonld This is based on a mapping in yaml which lives where How to create or update a mapping How an object gets into Fedora at the high level so that we can detect if it's working Triplestore: where is it and how do we query it?","title":"Fedora rdf"},{"location":"user-documentation/getting-started-with-islandora-claw/","text":"Getting Started with Islandora CLAW How to Add a User Log in under admin credentials. Click the Manage tab from the top toolbar. Select People tab from the resulting menu. Enter all required fields, as indicated by red asterisks, in the Add User page. Click on the Create New Account button at the bottom of the page. To review/edit the permission for each role, click the Permissions tab in the set of tabs above the Add User button. How to Create a New User Role Click the Manage tab from the top toolbar. Select People tab from the resulting menu. Click the Roles tab in the set of tabs above the Add User button. Click the Add role button. Name the role in a way that it can be disambiguated from related activities or similar groups I.e. use the course code for a particular class of students working on a particular collection. Click the Save button. To edit the permissions for a role, click on the Edit dropdown menu to the right of the role and select Edit Permissions . Scroll down until you see the Node section of options, then look for the options that have an Islandora prefix. For example, Islandora Collection: Create new content . Administrative Tasks How to Create a Collection Click the Manage tab from the top toolbar. Select Content tab from the resulting menu. Click on Add content button. This will load the Add content page. Click on Islandora Collection link. This will load the Create Islandora Collection page. Fill out form fields. Enter all required fields, as indicated by red asterisks. Title Member of: Parent collection This field will auto-populate Description Revision log message Click the Save and publish button. How to Add an Item to a Collection Click the Manage tab from the top toolbar. Select Content tab from the resulting menu. Click on Add content button. This will load the Add content page. Click on Islandora Image link. This will load the Create Islandora Image page. Fill out form fields. Enter all required fields, as indicated by red asterisks. [NOTE: currently the generation of image derivatives is not supported.] Title Description Member of: Parent collection This field will auto-populate OBJ JP2 MEDIUM_SIZE [NOTE: for now, just use this option to upload an object] Click on \"Add new media\" button. You must create some alternative text for the object. Click \"Create Media\" button. TN (Thumbnail) Revision log message Click the Save and publish button. Once you upload a file, you can Edit or Remove it.","title":"Getting Started with Islandora CLAW"},{"location":"user-documentation/getting-started-with-islandora-claw/#getting-started-with-islandora-claw","text":"","title":"Getting Started with Islandora CLAW"},{"location":"user-documentation/getting-started-with-islandora-claw/#how-to-add-a-user","text":"Log in under admin credentials. Click the Manage tab from the top toolbar. Select People tab from the resulting menu. Enter all required fields, as indicated by red asterisks, in the Add User page. Click on the Create New Account button at the bottom of the page. To review/edit the permission for each role, click the Permissions tab in the set of tabs above the Add User button.","title":"How to Add a User"},{"location":"user-documentation/getting-started-with-islandora-claw/#how-to-create-a-new-user-role","text":"Click the Manage tab from the top toolbar. Select People tab from the resulting menu. Click the Roles tab in the set of tabs above the Add User button. Click the Add role button. Name the role in a way that it can be disambiguated from related activities or similar groups I.e. use the course code for a particular class of students working on a particular collection. Click the Save button. To edit the permissions for a role, click on the Edit dropdown menu to the right of the role and select Edit Permissions . Scroll down until you see the Node section of options, then look for the options that have an Islandora prefix. For example, Islandora Collection: Create new content .","title":"How to Create a New User Role"},{"location":"user-documentation/getting-started-with-islandora-claw/#administrative-tasks","text":"","title":"Administrative Tasks"},{"location":"user-documentation/getting-started-with-islandora-claw/#how-to-create-a-collection","text":"Click the Manage tab from the top toolbar. Select Content tab from the resulting menu. Click on Add content button. This will load the Add content page. Click on Islandora Collection link. This will load the Create Islandora Collection page. Fill out form fields. Enter all required fields, as indicated by red asterisks. Title Member of: Parent collection This field will auto-populate Description Revision log message Click the Save and publish button.","title":"How to Create a Collection"},{"location":"user-documentation/getting-started-with-islandora-claw/#how-to-add-an-item-to-a-collection","text":"Click the Manage tab from the top toolbar. Select Content tab from the resulting menu. Click on Add content button. This will load the Add content page. Click on Islandora Image link. This will load the Create Islandora Image page. Fill out form fields. Enter all required fields, as indicated by red asterisks. [NOTE: currently the generation of image derivatives is not supported.] Title Description Member of: Parent collection This field will auto-populate OBJ JP2 MEDIUM_SIZE [NOTE: for now, just use this option to upload an object] Click on \"Add new media\" button. You must create some alternative text for the object. Click \"Create Media\" button. TN (Thumbnail) Revision log message Click the Save and publish button. Once you upload a file, you can Edit or Remove it.","title":"How to Add an Item to a Collection"},{"location":"user-documentation/intro-to-claw/","text":"Intro to Islandora CLAW Islandora CLAW is the project name for development of Islandora to work with Fedora 4. To fully understand Islandora CLAW, it is best to start by looking at its contrasts to the previous version of Islandora, known as 7.x-1.x. Islandora 7.x-1.x (with Fedora 3) Islandora 7.x-1.x is \"middleware\", it allows Drupal 7.x to talk to a Fedora 3 server instead of Drupal's database. This is sometimes expressed as a hamburger: Islandora CLAW (with Fedora 4) Islandora CLAW does more than simply replace that base layer with Fedora 4. It is a total re-architecting of the interaction between the various pieces, acting as middleware for not only Drupal 8.x and Fedora 4, but also Solr, Blazegraph, and any microservices added to the stack. Islandora CLAW achieves this by implementing a system of \"plumbing\" using Apache Camel to pass messages between all the different parts of the stack to keep them in sync with each other. Rather than a hamburger, Islandora CLAW is a chimera : This new structure has several advantages: Parcelling out the various services and dependencies allows for more horizontal scalability Changing the relationship between Drupal and Fedora allows for a more flexible approach to front-end management (i.e, it need not be Drupal) while also taking much greater advantage of features available from Drupal (i.e, Fedora objects are treated more like nodes, for the purposes of using Drupal contrib modules. Many Islandora 7.x-1.x modules are redundant in Islandora CLAW because they reproduce existing Drupal contrib modules that can be used out of the box in Islandora CLAW). Easier to keep up-to-date as not all pieces must be versioned together. Installations tools (Ansible, Docker, Vagrant) can automate uniting the pieces in a simple, clean installation process. Islandora has always been a turn-key repository solution, in the sense that it needs no customization once installed. With Islandora CLAW, that installation process is much smoother, with automated solutions that can be used in production. Ecosystem Alpaca The plumbing for Islandora's asynchronous workflows. It handles reading from and writing to message queues, with appropriate retry rules and error handling. Chullo A PHP client for Fedora 4 built using Guzzle and EasyRdf. CLAW A container with references to all of the other components that make up Islandora CLAW. Also contains documentation and project discussions. Crayfish Top level container for the various Islandora CLAW microservices. Islandora The Drupal modules associated with CLAW. Work is underway to have this as a project on drupal.org . Why Switch? Islandora 7.x-1.x is a tried and tested product with a vibrant user and contributor community and many tools and add-ons available to customize and expand its uses. Islandora CLAW is a major departure, representing a great deal of work both in development of the software, and to migrate and upgrade existing Islandora sites. So why make the change? Fedora The primary motive for moving to Islandora CLAW is to stay current with the repository layer of our ecosystem. Moving to Fedora 4 is vital for the long-term utility of the project. Fedora 3 is End-of-Life and has not been supported since 2015. This means that there will be no improvements, bug fixes, or security patches released for the software, drastically increasing individual maintenance needs for adopters. Fedora 3 experiences significant slowdown when repositories reach a large (millions) number of objects. Fedora 4 is much more scalable, and is specifically engineered to be horizontally scalable in ways that Fedora 3 cannot. Drupal Drupal 8 has been officially released and development has begun on Drupal 9. Official Drupal policy will see Drupal 7 become unsupported when Drupal 9 is released, putting it in the same precarious territory as Fedora 3. The initial phases of Islandora CLAW development worked with Drupal 7 as a front-end, but Islandora CLAW has been architected with a pivot to Drupal 8 in mind from its very inception. As of June, 2016, Islandora CLAW development has pivoted fully to Drupal 8, ensuring that when the Islandora Community is ready to make the move, there will be a version of Islandora that functions with the latest and best-supported versions of both our front-end and repository layers by pairing Drupal 8 with Fedora 4. Community-Driven Design The Islandora community has grown significantly since the project began, both in terms of users and contributors. For the first time, we are in a position to have a truly community-driven development process, in which any Islandora user can participate at whatever level fits their interests and abilities. Islandora CLAW has worked with the broader Islandora community to solicit use-cases, put forward prospectuses and project plans for review and editing, and has been developed with a mix of funding from Islandora Foundation members and volunteer developers working on sprints. Islandora CLAW is developed by the Islandora community, for the Islandora community. As a member of the Islandora community, you can help to steer the direction it takes. Linked Data Linked Data is a big concept. A definition by Tim Berners-Lee from 2006 articulates the basic idea in the context of the \"Semantic Web\": It is about making links, so that a person or machine can explore the web of data. With linked data, when you have some of it, you can find other, related, data. Like the web of hypertext, the web of data is constructed with documents on the web. However, unlike the web of hypertext, where links are relationships anchors in hypertext documents written in HTML, for data they links between arbitrary things described by RDF. The URIs identify any kind of object or concept. But for HTML or RDF, the same expectations apply to make the web grow: Use URIs as names for things Use HTTP URIs so that people can look up those names. When someone looks up a URI, provide useful information, using the standards (RDF*, SPARQL) Include links to other URIs. so that they can discover more things. LDP is an official W3C recommendation. According to the spec , Linked Data Platform (LDP) defines a set of rules for HTTP operations on web resources, some based on RDF, to provide an architecture for read-write Linked Data on the web. Put more simply: An LDP server is a web server that lets you manage relationships in RDF by creating URLs you can perform CRUD (Create Read Update Delete) operation on: http://my_url/some_resource http://my_url/some_resource/children http://my_url/some_resource/children/child_resource prefix:isChildOf http://my_url/some_resource An LDP server also lets you request the RDF graph for a resource with varying levels of additional information for discovery: The resource itself The resource plus child resources The resource plus all other resources that reference it (inbound references) The resource plus children plus inbound references Fedora 4 is an LDP implementation. It stores metadata using RDF (Resource Description Framework), a standard format for data interchange on the web. RDF data is formatted as triples, like so: resource_uri predicate_uri object_uri and can be exported in many different formats: JSON-LD RDF/XML Turtle N-Triples Working with RDF is not entirely new in the Islandora/Fedora context, as RELS-EXT and RELS-INT have always been RDF/XML. Related objects can be included in RDF, so it functions as a graph you can traverse in order to discover more information. Example: Dublin Core as XML and RDF using the dc namespace Dublin Core XML you store with the resource. ?xml version= 1.0 ? metadata xmlns= http://example.org/myapp/ xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://example.org/myapp/ http://example.org/myapp/schema.xsd xmlns:dc= http://purl.org/dc/elements/1.1/ dc:title Islandora /dc:title dc:description Islandora is an open-source software framework designed to help institutions and organizations and their audiences collaboratively manage, and discover digital assets using a best-practices framework. /dc:description /metadata vs RDF (which is actually properties of the resource) @prefix dc: http://purl.org/dc/elements/1.1/ . http://islandora.ca/ dc:title Islandora ; dc:description Islandora is an open-source software framework designed to help institutions and organizations and their audiences collaboratively manage, and discover digital assets using a best-practices framework. . Interoperability Islandora CLAW works with the Portland Common Data Model , \"a flexible, extensible domain model that is intended to underlie a wide array of repository and DAMS applications.\" What does this mean in practice? Objects stored in Islandora CLAW will have a data model that can be recognized by Hydra and other custom Fedora 4 based repository heads, and vice versa. By working together with the Hydra and Fedora communities, we can leverage a broader community of developers, librarians, and other digital repository users to build better tools and share resources.","title":"Intro to Islandora CLAW"},{"location":"user-documentation/intro-to-claw/#intro-to-islandora-claw","text":"Islandora CLAW is the project name for development of Islandora to work with Fedora 4. To fully understand Islandora CLAW, it is best to start by looking at its contrasts to the previous version of Islandora, known as 7.x-1.x.","title":"Intro to Islandora CLAW"},{"location":"user-documentation/intro-to-claw/#islandora-7x-1x-with-fedora-3","text":"Islandora 7.x-1.x is \"middleware\", it allows Drupal 7.x to talk to a Fedora 3 server instead of Drupal's database. This is sometimes expressed as a hamburger:","title":"Islandora 7.x-1.x (with Fedora 3)"},{"location":"user-documentation/intro-to-claw/#islandora-claw-with-fedora-4","text":"Islandora CLAW does more than simply replace that base layer with Fedora 4. It is a total re-architecting of the interaction between the various pieces, acting as middleware for not only Drupal 8.x and Fedora 4, but also Solr, Blazegraph, and any microservices added to the stack. Islandora CLAW achieves this by implementing a system of \"plumbing\" using Apache Camel to pass messages between all the different parts of the stack to keep them in sync with each other. Rather than a hamburger, Islandora CLAW is a chimera : This new structure has several advantages: Parcelling out the various services and dependencies allows for more horizontal scalability Changing the relationship between Drupal and Fedora allows for a more flexible approach to front-end management (i.e, it need not be Drupal) while also taking much greater advantage of features available from Drupal (i.e, Fedora objects are treated more like nodes, for the purposes of using Drupal contrib modules. Many Islandora 7.x-1.x modules are redundant in Islandora CLAW because they reproduce existing Drupal contrib modules that can be used out of the box in Islandora CLAW). Easier to keep up-to-date as not all pieces must be versioned together. Installations tools (Ansible, Docker, Vagrant) can automate uniting the pieces in a simple, clean installation process. Islandora has always been a turn-key repository solution, in the sense that it needs no customization once installed. With Islandora CLAW, that installation process is much smoother, with automated solutions that can be used in production.","title":"Islandora CLAW (with Fedora 4)"},{"location":"user-documentation/intro-to-claw/#ecosystem","text":"","title":"Ecosystem"},{"location":"user-documentation/intro-to-claw/#alpaca","text":"The plumbing for Islandora's asynchronous workflows. It handles reading from and writing to message queues, with appropriate retry rules and error handling.","title":"Alpaca"},{"location":"user-documentation/intro-to-claw/#chullo","text":"A PHP client for Fedora 4 built using Guzzle and EasyRdf.","title":"Chullo"},{"location":"user-documentation/intro-to-claw/#claw","text":"A container with references to all of the other components that make up Islandora CLAW. Also contains documentation and project discussions.","title":"CLAW"},{"location":"user-documentation/intro-to-claw/#crayfish","text":"Top level container for the various Islandora CLAW microservices.","title":"Crayfish"},{"location":"user-documentation/intro-to-claw/#islandora","text":"The Drupal modules associated with CLAW. Work is underway to have this as a project on drupal.org .","title":"Islandora"},{"location":"user-documentation/intro-to-claw/#why-switch","text":"Islandora 7.x-1.x is a tried and tested product with a vibrant user and contributor community and many tools and add-ons available to customize and expand its uses. Islandora CLAW is a major departure, representing a great deal of work both in development of the software, and to migrate and upgrade existing Islandora sites. So why make the change?","title":"Why Switch?"},{"location":"user-documentation/intro-to-claw/#fedora","text":"The primary motive for moving to Islandora CLAW is to stay current with the repository layer of our ecosystem. Moving to Fedora 4 is vital for the long-term utility of the project. Fedora 3 is End-of-Life and has not been supported since 2015. This means that there will be no improvements, bug fixes, or security patches released for the software, drastically increasing individual maintenance needs for adopters. Fedora 3 experiences significant slowdown when repositories reach a large (millions) number of objects. Fedora 4 is much more scalable, and is specifically engineered to be horizontally scalable in ways that Fedora 3 cannot.","title":"Fedora"},{"location":"user-documentation/intro-to-claw/#drupal","text":"Drupal 8 has been officially released and development has begun on Drupal 9. Official Drupal policy will see Drupal 7 become unsupported when Drupal 9 is released, putting it in the same precarious territory as Fedora 3. The initial phases of Islandora CLAW development worked with Drupal 7 as a front-end, but Islandora CLAW has been architected with a pivot to Drupal 8 in mind from its very inception. As of June, 2016, Islandora CLAW development has pivoted fully to Drupal 8, ensuring that when the Islandora Community is ready to make the move, there will be a version of Islandora that functions with the latest and best-supported versions of both our front-end and repository layers by pairing Drupal 8 with Fedora 4.","title":"Drupal"},{"location":"user-documentation/intro-to-claw/#community-driven-design","text":"The Islandora community has grown significantly since the project began, both in terms of users and contributors. For the first time, we are in a position to have a truly community-driven development process, in which any Islandora user can participate at whatever level fits their interests and abilities. Islandora CLAW has worked with the broader Islandora community to solicit use-cases, put forward prospectuses and project plans for review and editing, and has been developed with a mix of funding from Islandora Foundation members and volunteer developers working on sprints. Islandora CLAW is developed by the Islandora community, for the Islandora community. As a member of the Islandora community, you can help to steer the direction it takes.","title":"Community-Driven Design"},{"location":"user-documentation/intro-to-claw/#linked-data","text":"Linked Data is a big concept. A definition by Tim Berners-Lee from 2006 articulates the basic idea in the context of the \"Semantic Web\": It is about making links, so that a person or machine can explore the web of data. With linked data, when you have some of it, you can find other, related, data. Like the web of hypertext, the web of data is constructed with documents on the web. However, unlike the web of hypertext, where links are relationships anchors in hypertext documents written in HTML, for data they links between arbitrary things described by RDF. The URIs identify any kind of object or concept. But for HTML or RDF, the same expectations apply to make the web grow: Use URIs as names for things Use HTTP URIs so that people can look up those names. When someone looks up a URI, provide useful information, using the standards (RDF*, SPARQL) Include links to other URIs. so that they can discover more things. LDP is an official W3C recommendation. According to the spec , Linked Data Platform (LDP) defines a set of rules for HTTP operations on web resources, some based on RDF, to provide an architecture for read-write Linked Data on the web. Put more simply: An LDP server is a web server that lets you manage relationships in RDF by creating URLs you can perform CRUD (Create Read Update Delete) operation on: http://my_url/some_resource http://my_url/some_resource/children http://my_url/some_resource/children/child_resource prefix:isChildOf http://my_url/some_resource An LDP server also lets you request the RDF graph for a resource with varying levels of additional information for discovery: The resource itself The resource plus child resources The resource plus all other resources that reference it (inbound references) The resource plus children plus inbound references Fedora 4 is an LDP implementation. It stores metadata using RDF (Resource Description Framework), a standard format for data interchange on the web. RDF data is formatted as triples, like so: resource_uri predicate_uri object_uri and can be exported in many different formats: JSON-LD RDF/XML Turtle N-Triples Working with RDF is not entirely new in the Islandora/Fedora context, as RELS-EXT and RELS-INT have always been RDF/XML. Related objects can be included in RDF, so it functions as a graph you can traverse in order to discover more information.","title":"Linked Data"},{"location":"user-documentation/intro-to-claw/#example-dublin-core-as-xml-and-rdf-using-the-dc-namespace","text":"Dublin Core XML you store with the resource. ?xml version= 1.0 ? metadata xmlns= http://example.org/myapp/ xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation= http://example.org/myapp/ http://example.org/myapp/schema.xsd xmlns:dc= http://purl.org/dc/elements/1.1/ dc:title Islandora /dc:title dc:description Islandora is an open-source software framework designed to help institutions and organizations and their audiences collaboratively manage, and discover digital assets using a best-practices framework. /dc:description /metadata vs RDF (which is actually properties of the resource) @prefix dc: http://purl.org/dc/elements/1.1/ . http://islandora.ca/ dc:title Islandora ; dc:description Islandora is an open-source software framework designed to help institutions and organizations and their audiences collaboratively manage, and discover digital assets using a best-practices framework. .","title":"Example: Dublin Core as XML and RDF using the dc namespace"},{"location":"user-documentation/intro-to-claw/#interoperability","text":"Islandora CLAW works with the Portland Common Data Model , \"a flexible, extensible domain model that is intended to underlie a wide array of repository and DAMS applications.\" What does this mean in practice? Objects stored in Islandora CLAW will have a data model that can be recognized by Hydra and other custom Fedora 4 based repository heads, and vice versa. By working together with the Hydra and Fedora communities, we can leverage a broader community of developers, librarians, and other digital repository users to build better tools and share resources.","title":"Interoperability"},{"location":"user-documentation/intro-to-ld-for-islandora-8/","text":"Introduction to Linked Data for Islandora 8 The purpose of this page is to provide a guided reading list to anyone who wants to get up to speed on the basics of linked data within the Islandora community. Those who make their way through the readings will be able to talk competently about linked data and better understand the design decisions made in Islandora 8. The list starts with the fundamentals of linked data (RDF, SPARQL, serializations and ontologies) and moves toward more advanced topics specific to the use cases of a Fedora 4 based digital repository system. Basics of Linked Data This section seeks to give the reader a foundational understanding of what linked data is, why it is useful, and a very superficial understanding of how it works. Tim Berners-Lee\u2019s description of Linked Data Manu Sporny's \"What is Linked Data?\" YouTube Video Wikipedia article on Linked Data Wikipedia article on Semantic Web Wikipedia article on URIs Wikipedia article on the W3C W3C\u2019s description of Linked Data W3C\u2019s Linked Data Glossary W3C\u2019s Architecture of the World Wide Web Understanding RDF This section is all about RDF, the Resource Description Framework, which defines the way linked data is structured. Wikipedia article on RDF D-Lib\u2019s Intro to RDF W3C\u2019s RDF 1.1 Primer W3C\u2019s RDF 1.1 Concepts Querying Linked Data with SPARQL This section takes a look at SPARQL, the query language that allows you to ask linked data very specific questions. The queryable nature of linked data is one of the things that makes it so special. Try some SPARQL queries on DBpedia's endpoint to get some hands-on experience. Wikipedia article on SPARQL W3C\u2019s SPARQL 1.1 Overview W3C\u2019s SPARQL 1.1 Query Language DBpedia's SPARQL Endpoint RDF Serialization Formats RDF data can be translated into many different formats. RDF/XML is the original way that RDF data was shared, but there are much more human-friendly serialization formats like Turtle which is great for beginners. JSON-LD is the easiest format for applications to use, and is the serialization format that Islandora 8 uses internally. Make sure to check out the JSON-LD Playground for an interactive learning experience. Wikipedia article on Serialization W3C\u2019s RDF/XML Syntax Specification W3C\u2019s RDF 1.1 Turtle W3C\u2019s JSON-LD 1.0 JSON-LD Website JSON-LD Playground Ontology Vocabulary Basics Ontologies vocabularies are created by communities of people to describe things, and once created, anyone can use an ontology or vocabulary to describe their resources. This section goes over some of the more popular ontologies vocabularies in use. Wikipedia article on Ontologies W3C\u2019s description of Ontologies/Vocabularies (sameish thing) Wikipedia article on Friend of a Friend (FOAF) ontology FOAF 0.99 Vocabulary Specification Socially Interconnected Online Communities Ontology (SIOC) Dublin Core in RDF Building Ontologies One isn't limited to the ontologies vocabularies that already exist in the world, anyone is free to create their own. This section goes over ontologies that exist to help those trying to create their own ontologies. Wikipedia article on RDF Schema (RDFS) W3C\u2019s RDF Schema (RDFS) 1.1 Wikipedia article on Simple Knowledge Organization System (SKOS) ALA\u2019s SKOS: A Guide for Information Professionals Wikipedia article on Web Ontology Language (OWL) W3C\u2019s OWL 2 Primer W3C\u2019s OWL 2 Quick Reference Repository-Specific Ontologies Most ontologies are very specific to certain use cases, and digital repository systems are no different. This section covers ontologies that are of specific interest to users of Islandora 8, or any Fedora 4 based digital repository system. MODS RDF Namespace Document MODS RDF Ontology Primer MODS RDF Ontology Primer 2: MODS XML to RDF Conversion PREMIS RDF Namespace Document Linked Data Platform (LDP) 1.0 Primer LDP 1.0 Specification Portland Common Data Model (PCDM) wiki) PCDM ontologies list PCDM Models ontology (defines Collections, Objects Files) Fedora ontologies CLAWntology","title":"Introduction to Linked Data for Islandora 8"},{"location":"user-documentation/intro-to-ld-for-islandora-8/#introduction-to-linked-data-for-islandora-8","text":"The purpose of this page is to provide a guided reading list to anyone who wants to get up to speed on the basics of linked data within the Islandora community. Those who make their way through the readings will be able to talk competently about linked data and better understand the design decisions made in Islandora 8. The list starts with the fundamentals of linked data (RDF, SPARQL, serializations and ontologies) and moves toward more advanced topics specific to the use cases of a Fedora 4 based digital repository system.","title":"Introduction to Linked Data for Islandora 8"},{"location":"user-documentation/intro-to-ld-for-islandora-8/#basics-of-linked-data","text":"This section seeks to give the reader a foundational understanding of what linked data is, why it is useful, and a very superficial understanding of how it works. Tim Berners-Lee\u2019s description of Linked Data Manu Sporny's \"What is Linked Data?\" YouTube Video Wikipedia article on Linked Data Wikipedia article on Semantic Web Wikipedia article on URIs Wikipedia article on the W3C W3C\u2019s description of Linked Data W3C\u2019s Linked Data Glossary W3C\u2019s Architecture of the World Wide Web","title":"Basics of Linked Data"},{"location":"user-documentation/intro-to-ld-for-islandora-8/#understanding-rdf","text":"This section is all about RDF, the Resource Description Framework, which defines the way linked data is structured. Wikipedia article on RDF D-Lib\u2019s Intro to RDF W3C\u2019s RDF 1.1 Primer W3C\u2019s RDF 1.1 Concepts","title":"Understanding RDF"},{"location":"user-documentation/intro-to-ld-for-islandora-8/#querying-linked-data-with-sparql","text":"This section takes a look at SPARQL, the query language that allows you to ask linked data very specific questions. The queryable nature of linked data is one of the things that makes it so special. Try some SPARQL queries on DBpedia's endpoint to get some hands-on experience. Wikipedia article on SPARQL W3C\u2019s SPARQL 1.1 Overview W3C\u2019s SPARQL 1.1 Query Language DBpedia's SPARQL Endpoint","title":"Querying Linked Data with SPARQL"},{"location":"user-documentation/intro-to-ld-for-islandora-8/#rdf-serialization-formats","text":"RDF data can be translated into many different formats. RDF/XML is the original way that RDF data was shared, but there are much more human-friendly serialization formats like Turtle which is great for beginners. JSON-LD is the easiest format for applications to use, and is the serialization format that Islandora 8 uses internally. Make sure to check out the JSON-LD Playground for an interactive learning experience. Wikipedia article on Serialization W3C\u2019s RDF/XML Syntax Specification W3C\u2019s RDF 1.1 Turtle W3C\u2019s JSON-LD 1.0 JSON-LD Website JSON-LD Playground","title":"RDF Serialization Formats"},{"location":"user-documentation/intro-to-ld-for-islandora-8/#ontology-vocabulary-basics","text":"Ontologies vocabularies are created by communities of people to describe things, and once created, anyone can use an ontology or vocabulary to describe their resources. This section goes over some of the more popular ontologies vocabularies in use. Wikipedia article on Ontologies W3C\u2019s description of Ontologies/Vocabularies (sameish thing) Wikipedia article on Friend of a Friend (FOAF) ontology FOAF 0.99 Vocabulary Specification Socially Interconnected Online Communities Ontology (SIOC) Dublin Core in RDF","title":"Ontology &amp; Vocabulary Basics"},{"location":"user-documentation/intro-to-ld-for-islandora-8/#building-ontologies","text":"One isn't limited to the ontologies vocabularies that already exist in the world, anyone is free to create their own. This section goes over ontologies that exist to help those trying to create their own ontologies. Wikipedia article on RDF Schema (RDFS) W3C\u2019s RDF Schema (RDFS) 1.1 Wikipedia article on Simple Knowledge Organization System (SKOS) ALA\u2019s SKOS: A Guide for Information Professionals Wikipedia article on Web Ontology Language (OWL) W3C\u2019s OWL 2 Primer W3C\u2019s OWL 2 Quick Reference","title":"Building Ontologies"},{"location":"user-documentation/intro-to-ld-for-islandora-8/#repository-specific-ontologies","text":"Most ontologies are very specific to certain use cases, and digital repository systems are no different. This section covers ontologies that are of specific interest to users of Islandora 8, or any Fedora 4 based digital repository system. MODS RDF Namespace Document MODS RDF Ontology Primer MODS RDF Ontology Primer 2: MODS XML to RDF Conversion PREMIS RDF Namespace Document Linked Data Platform (LDP) 1.0 Primer LDP 1.0 Specification Portland Common Data Model (PCDM) wiki) PCDM ontologies list PCDM Models ontology (defines Collections, Objects Files) Fedora ontologies CLAWntology","title":"Repository-Specific Ontologies"},{"location":"user-documentation/media/","text":"Drupal 8 recognizes files (such as images, audio files, video files, etc.) but wraps each file in an intermediate structure called a \"media\" to allow us to attach fields to files. It is in a media's fields that we store information about the media's file, such as file size, width and height (for images), alt text (for images), creation date, and so on. Compared to Islandora 7 In Islandora 7, this sort of technical metadata would have been stored in a single RELS-INT datastream. In Islandora 8, each datastream holds its own technical metadata using media entities. Media Ownership Islandora 8 objects can have any number of media associated with them. Media advertise which object they belong to using a special field, \"Media Of\". By editing this field, you can change what node owns the media, and therefore, where it gets displayed or managed. Compared to Islandora 7 The direction of the relationship between objects and datastreams is reversed when compared to Islandora 7. Generally speaking, objects are unaware of their datastreams, and it's a Drupal view that lists datastreams for an object. Media Usage Adding media Islandora 8 media express their intended use with a special \"Media Use\" field, which accepts taxonomy terms from the \"Media Usage\" vocabulary. Because the Media Usage vocabulary is an ordinary Drupal vocabulary, Islandora 8 site administrators can add their own terms, and in turn, these local terms can be used to identify media that have some custom local purpose. However, most of the default set of \"Media Use\" terms are taken from the PCDM Use Extension vocabulary: Compared to Islandora 7 Terms from the Media Usage vocabulary are very similar to DSIDs in Islandora 7. The only difference is that a DSID is immutable, but a media's usage can be changed at any time through the media's edit form. Replacing media To replace a media, you must first remove it and then replace it with another file. To do this, click on the media's Edit tab, then click on the \"Remove\" button. The file will disappear but the rest of the media's fields will remain, like this: At this point, you can upload your replacement file, or edit any of the other field data available in the Media form. Replacing Media via REST It is also possible to add and replace media via Islandora's REST interface. Derivatives Islandora generates derivatives based on Media Usage for a Media and the Model of the node that owns it. All of this is configurable using Context. By default, derivatives are generated from \"Original Files\". When an Original File is uploaded, if the node that owns it has an \"Image\" model, image derivatives are created. If it's a \"Video\", then video derivatives are generated, etc... Within an node's media tab, you can see all of its media, including derivatives, listed along with their usage. For example, from the Original File, a lower quality \"Service File\" and a smaller \"Thumbnail Image\" file were generated. For more information on how to set configure derivatives, see the section on Context . Media revisions To be completed on resolution of https://github.com/Islandora-CLAW/CLAW/issues/1035.","title":"Media"},{"location":"user-documentation/media/#media-ownership","text":"Islandora 8 objects can have any number of media associated with them. Media advertise which object they belong to using a special field, \"Media Of\". By editing this field, you can change what node owns the media, and therefore, where it gets displayed or managed. Compared to Islandora 7 The direction of the relationship between objects and datastreams is reversed when compared to Islandora 7. Generally speaking, objects are unaware of their datastreams, and it's a Drupal view that lists datastreams for an object.","title":"Media Ownership"},{"location":"user-documentation/media/#media-usage","text":"","title":"Media Usage"},{"location":"user-documentation/media/#adding-media","text":"Islandora 8 media express their intended use with a special \"Media Use\" field, which accepts taxonomy terms from the \"Media Usage\" vocabulary. Because the Media Usage vocabulary is an ordinary Drupal vocabulary, Islandora 8 site administrators can add their own terms, and in turn, these local terms can be used to identify media that have some custom local purpose. However, most of the default set of \"Media Use\" terms are taken from the PCDM Use Extension vocabulary: Compared to Islandora 7 Terms from the Media Usage vocabulary are very similar to DSIDs in Islandora 7. The only difference is that a DSID is immutable, but a media's usage can be changed at any time through the media's edit form.","title":"Adding media"},{"location":"user-documentation/media/#replacing-media","text":"To replace a media, you must first remove it and then replace it with another file. To do this, click on the media's Edit tab, then click on the \"Remove\" button. The file will disappear but the rest of the media's fields will remain, like this: At this point, you can upload your replacement file, or edit any of the other field data available in the Media form. Replacing Media via REST It is also possible to add and replace media via Islandora's REST interface.","title":"Replacing media"},{"location":"user-documentation/media/#derivatives","text":"Islandora generates derivatives based on Media Usage for a Media and the Model of the node that owns it. All of this is configurable using Context. By default, derivatives are generated from \"Original Files\". When an Original File is uploaded, if the node that owns it has an \"Image\" model, image derivatives are created. If it's a \"Video\", then video derivatives are generated, etc... Within an node's media tab, you can see all of its media, including derivatives, listed along with their usage. For example, from the Original File, a lower quality \"Service File\" and a smaller \"Thumbnail Image\" file were generated. For more information on how to set configure derivatives, see the section on Context .","title":"Derivatives"},{"location":"user-documentation/media/#media-revisions","text":"To be completed on resolution of https://github.com/Islandora-CLAW/CLAW/issues/1035.","title":"Media revisions"},{"location":"user-documentation/metadata/","text":"Metadata in Islandora 8 TL;DR: In Islandora 8 metadata values are stored in fields attached to entities (objects) which are then serialized as JSON-LD before being submitted to Fedora and/or indexed in a triple-store. Drupal 8 Terminology In Drupal 8, Fields can be attached to entity sub-types (e.g. Content types, Vocabularies) or entities (Users, Files). For more on Fields, see \"2.3 Content Entities and Fields\" and \"6.3 Adding Basic Fields to a Content Type\" in the Official Guide. As described in the objects section , Islandora 8 digital objects are comprised of nodes for descriptive metadata, media for technical metadata, and files for the binary objects. This section describes how descriptive metadata is managed in Islandora 8. Content Types In Drupal, Content Types are groupings of fields and their configurations, forming what is essentially a metadata profile for a digital object's descriptive record. The field configurations include how data is entered, how it is displayed, how many values can be stored, and how long the value can be. Some configurations, such as data entry and display, can be changed at any time. Others, such as how long a value can be, cannot be changed once content has been created without first deleting all content of that type. For example, the 'islandora_demo' module provides a Repository Item content type that defines several fields including \"Alternative Title\" and \"Date\". The \"Manage fields\" page for Repository Item shows a list of the fields it includes as well as tabs for changing the input forms and display modes. The \"Title\" field does not appear in this list but it is still included with every content type. (See the \" Create / Update a Content Type \" section for more details on creating and configuring fields.) Titles The included title field is limited to 255 characters; if your content has longer titles it is encouraged to create a separate long_title field to store the full title and reserve the default title field for a display title. 7.x Migration Note: What about my XML? In 7.x, metadata were (usually) stored within XML datastreams such as MODS or DC. In Islandora 8 we are breaking out individual metadata elements into fields instead of using an attached XML document. The Metadata Interest Group is developing a default mapping which will provide a basic, yet customizable, transform between MODS metadata and Drupal fields in Islandora Demo. It is still possible to attach an XML file to a Islandora 8 object as a Media (see Datastreams), however there is no mechanism in Islandora 8 for editing XML in a user-friendly way. A specific instance of a content type is called a node . In other words, a node is the descriptive metadata for a particular digital object and the content type is the node's metadata profile. Once a node is created, it cannot change its content type. To change a digital object's metadata profile (content type) a repository manager would need to create a new descriptive record (node) using the new metadata profile and then update the corresponding media records to point to the new descriptive record. Vocabularies In Drupal, Taxonomy Vocabularies (or simply 'Vocabularies') are also entity subtypes that group fields and their configurations. Unlike content types, they are intended to be used as descriptive attributes of content and have hierarchy built in. Whereas instances of content types are called nodes, items in a vocabulary are called terms . For example, Islandora includes the 'Islandora Models' vocabulary which includes the terms 'Audio', 'Binary', 'Collection', 'Image', and 'Video'. By linking to one of these terms in the 'Islandora Models' vocabulary a repository manager can tell that the node (digital object) should be considered an 'Image' or 'Audio', et cetera. The Controlled Access Terms module provides additional vocabularies representing Corporate Bodies, Persons, Families, Geographic Locations, and Subjects. Each of these vocabularies has its own set of fields allowing repositories to further describe them. Repository item nodes can then reference terms in these vocabularies. See 'Entity Reference fields' in the 'Field Types' section below. Field Types Each field in Drupal has a type that defines its properties and behavior such as text, date, number, and Boolean fields. These field types also have widgets and formatters that control entry forms and display, respectively. The Drupal 8 documentation on FieldTypes, FieldWidgets, and FieldFormatters includes a list of the core field types. Entity Reference fields are a special type of field that creates a relationship between two entities. The field's configuration options include which kind of entities can be referenced. The 'Repository Item' content type, provided by islandora_demo, includes several entity reference fields that reference vocabularies defined by the islandora and controlled_access_terms modules. The 'Member Of' field is an entity reference field that allows creating digital object hierarchies (collections and, potentially, complex digital objects) by \"pointing\" one or many Repository items at another common \"parent\". Modules can provide their own field types, formatters, and widgets. The controlled_access_terms module provides two custom field types: EDTF and Typed Relations. EDTF ( Extended Date Time Format ) The EDTF field type is stored as a string in the database; however the corresponding widget validates the value submitted in the data entry form and will not accept an invalid value while the corresponding formatter can be configured to display the EDTF value in a variety of ways. Example of a valid EDTF value ('1943-05') and an invalid value ('1943 May') with the corresponding error message: Example of how the EDTF formatter settings can change the display of an EDTF value: Typed Relation The standard Entity reference fields are limited to a single type of relationship. For example, the islandora_demo module could use an entity reference field in the 'Repository item' content type for the 'creator' field, linking nodes to terms in the People, Corporate Body, and Family vocabularies. However, there are many different types of 'creators', including 'authors', 'illustrators', and 'architects'. To enable all these types of relationships using entity reference fields a repository manager would need to create a new field for each of them, which would quickly become unwieldy. The Controlled Access Terms module resolves this problem by providing a Typed Relation field type. The Typed Relation field type combines an entity reference property and a 'relation type' property in a single field and extends the JSON-LD serialization to override a field's RDF mapping in favor of the selected 'relation type'. For example, instead of a 'creator' field, Repository item content type defines a 'Linked Agent' field and is configured with a list of available relationships that comes from the MARC relators list. (Configurable at '/admin/structure/types/manage/islandora_object/fields/node.islandora_object.field_linked_agent'.) The available relations are configured by providing the RDF namespace, a colon, the RDF relationship value, a pipe delimiter, and a display value for the user interface. (See the RDF Mapping section of ' Create / Update a Content Type ' for more details.) Getting Metadata into Fedora and a Triple-store The above sections described how Drupal manages and stores metadata, but the key feature of Islandora 8 is pushing that metadata into a Fedora 4+ repository and a triple-store. Islandora does this by using Drupal's serialization capabilities to provide a JSON-LD serialization that can be ingested by Fedora 4+ repository and triple-stores. In response to write operations, it sends notifications to the repository and triple-store that a node or term is available to ingest. The JSON-LD module works by taking node or term and its corresponding RDF mapping to create a JSON-LD serialization. The RDF mapping for a content type or vocabulary lists its fields and the RDF predicates that should be used for them. For example, below is the JSON-LD serialization for an example Repository item node created in a standard claw-playbook based vagrant VM: { @graph :[ { @id : http://localhost:8000/node/1?_format=jsonld , @type :[ http://pcdm.org/models#Object ], http://purl.org/dc/terms/title :[ { @value : New York, New York. A large lobster brought in by the New England fishing boat [Fulton Fish Market] , @language : en } ], http://schema.org/author :[ { @id : http://localhost:8000/user/1?_format=jsonld } ], http://schema.org/dateCreated :[ { @value : 2019-03-14T19:05:24+00:00 , @type : http://www.w3.org/2001/XMLSchema#dateTime } ], http://schema.org/dateModified :[ { @value : 2019-03-14T19:20:51+00:00 , @type : http://www.w3.org/2001/XMLSchema#dateTime } ], http://purl.org/dc/terms/date :[ { @value : 1943-05 , @type : http://www.w3.org/2001/XMLSchema#string }, { @value : 1943-05 , @type : http://www.w3.org/2001/XMLSchema#gYearMonth } ], http://purl.org/dc/terms/extent :[ { @value : 1 negative , @type : http://www.w3.org/2001/XMLSchema#string } ], http://purl.org/dc/terms/identifier :[ { @value : D 630714 , @type : http://www.w3.org/2001/XMLSchema#string } ], http://purl.org/dc/terms/type :[ { @id : http://localhost:8000/taxonomy/term/11?_format=jsonld } ], http://purl.org/dc/terms/rights :[ { @value : No known restrictions. For information, see U.S. Farm Security Administration/Office of War Information Black White Photographs(http://www.loc.gov/rr/print/res/071_fsab.html) , @type : http://www.w3.org/2001/XMLSchema#string } ], http://purl.org/dc/terms/subject :[ { @id : http://localhost:8000/taxonomy/term/26?_format=jsonld } ], http://schema.org/sameAs :[ { @value : http://localhost:8000/node/1?_format=jsonld } ] }, { @id : http://localhost:8000/user/1?_format=jsonld , @type :[ http://schema.org/Person ] }, { @id : http://localhost:8000/taxonomy/term/11?_format=jsonld , @type :[ http://schema.org/Thing ] }, { @id : http://localhost:8000/taxonomy/term/26?_format=jsonld , @type :[ http://schema.org/Thing ] } ] } Because the Repository item's title field is mapped to 'dc:title' in the RDF mapping, the node's title value appears like this in the JSON-LD output: http://purl.org/dc/terms/title :[ { @value : New York, New York. A large lobster brought in by the New England fishing boat [Fulton Fish Market] , @language : en } ], Also note that the URI ( @id ) value is 'http://localhost:8000/node/1?_format=jsonld'. To see how any node or term in a repository will be serialized to JSON-LD add ?_format=jsonld to the node's URI. When a node or term is updated a Drupal Context condition emits an indexing event to notify the repository and triple-store that it is should be ingested/updated.","title":"Metadata"},{"location":"user-documentation/metadata/#metadata-in-islandora-8","text":"TL;DR: In Islandora 8 metadata values are stored in fields attached to entities (objects) which are then serialized as JSON-LD before being submitted to Fedora and/or indexed in a triple-store. Drupal 8 Terminology In Drupal 8, Fields can be attached to entity sub-types (e.g. Content types, Vocabularies) or entities (Users, Files). For more on Fields, see \"2.3 Content Entities and Fields\" and \"6.3 Adding Basic Fields to a Content Type\" in the Official Guide. As described in the objects section , Islandora 8 digital objects are comprised of nodes for descriptive metadata, media for technical metadata, and files for the binary objects. This section describes how descriptive metadata is managed in Islandora 8.","title":"Metadata in Islandora 8"},{"location":"user-documentation/metadata/#content-types","text":"In Drupal, Content Types are groupings of fields and their configurations, forming what is essentially a metadata profile for a digital object's descriptive record. The field configurations include how data is entered, how it is displayed, how many values can be stored, and how long the value can be. Some configurations, such as data entry and display, can be changed at any time. Others, such as how long a value can be, cannot be changed once content has been created without first deleting all content of that type. For example, the 'islandora_demo' module provides a Repository Item content type that defines several fields including \"Alternative Title\" and \"Date\". The \"Manage fields\" page for Repository Item shows a list of the fields it includes as well as tabs for changing the input forms and display modes. The \"Title\" field does not appear in this list but it is still included with every content type. (See the \" Create / Update a Content Type \" section for more details on creating and configuring fields.) Titles The included title field is limited to 255 characters; if your content has longer titles it is encouraged to create a separate long_title field to store the full title and reserve the default title field for a display title. 7.x Migration Note: What about my XML? In 7.x, metadata were (usually) stored within XML datastreams such as MODS or DC. In Islandora 8 we are breaking out individual metadata elements into fields instead of using an attached XML document. The Metadata Interest Group is developing a default mapping which will provide a basic, yet customizable, transform between MODS metadata and Drupal fields in Islandora Demo. It is still possible to attach an XML file to a Islandora 8 object as a Media (see Datastreams), however there is no mechanism in Islandora 8 for editing XML in a user-friendly way. A specific instance of a content type is called a node . In other words, a node is the descriptive metadata for a particular digital object and the content type is the node's metadata profile. Once a node is created, it cannot change its content type. To change a digital object's metadata profile (content type) a repository manager would need to create a new descriptive record (node) using the new metadata profile and then update the corresponding media records to point to the new descriptive record.","title":"Content Types"},{"location":"user-documentation/metadata/#vocabularies","text":"In Drupal, Taxonomy Vocabularies (or simply 'Vocabularies') are also entity subtypes that group fields and their configurations. Unlike content types, they are intended to be used as descriptive attributes of content and have hierarchy built in. Whereas instances of content types are called nodes, items in a vocabulary are called terms . For example, Islandora includes the 'Islandora Models' vocabulary which includes the terms 'Audio', 'Binary', 'Collection', 'Image', and 'Video'. By linking to one of these terms in the 'Islandora Models' vocabulary a repository manager can tell that the node (digital object) should be considered an 'Image' or 'Audio', et cetera. The Controlled Access Terms module provides additional vocabularies representing Corporate Bodies, Persons, Families, Geographic Locations, and Subjects. Each of these vocabularies has its own set of fields allowing repositories to further describe them. Repository item nodes can then reference terms in these vocabularies. See 'Entity Reference fields' in the 'Field Types' section below.","title":"Vocabularies"},{"location":"user-documentation/metadata/#field-types","text":"Each field in Drupal has a type that defines its properties and behavior such as text, date, number, and Boolean fields. These field types also have widgets and formatters that control entry forms and display, respectively. The Drupal 8 documentation on FieldTypes, FieldWidgets, and FieldFormatters includes a list of the core field types. Entity Reference fields are a special type of field that creates a relationship between two entities. The field's configuration options include which kind of entities can be referenced. The 'Repository Item' content type, provided by islandora_demo, includes several entity reference fields that reference vocabularies defined by the islandora and controlled_access_terms modules. The 'Member Of' field is an entity reference field that allows creating digital object hierarchies (collections and, potentially, complex digital objects) by \"pointing\" one or many Repository items at another common \"parent\". Modules can provide their own field types, formatters, and widgets. The controlled_access_terms module provides two custom field types: EDTF and Typed Relations.","title":"Field Types"},{"location":"user-documentation/metadata/#edtf-extended-date-time-format","text":"The EDTF field type is stored as a string in the database; however the corresponding widget validates the value submitted in the data entry form and will not accept an invalid value while the corresponding formatter can be configured to display the EDTF value in a variety of ways. Example of a valid EDTF value ('1943-05') and an invalid value ('1943 May') with the corresponding error message: Example of how the EDTF formatter settings can change the display of an EDTF value:","title":"EDTF (Extended Date Time Format)"},{"location":"user-documentation/metadata/#typed-relation","text":"The standard Entity reference fields are limited to a single type of relationship. For example, the islandora_demo module could use an entity reference field in the 'Repository item' content type for the 'creator' field, linking nodes to terms in the People, Corporate Body, and Family vocabularies. However, there are many different types of 'creators', including 'authors', 'illustrators', and 'architects'. To enable all these types of relationships using entity reference fields a repository manager would need to create a new field for each of them, which would quickly become unwieldy. The Controlled Access Terms module resolves this problem by providing a Typed Relation field type. The Typed Relation field type combines an entity reference property and a 'relation type' property in a single field and extends the JSON-LD serialization to override a field's RDF mapping in favor of the selected 'relation type'. For example, instead of a 'creator' field, Repository item content type defines a 'Linked Agent' field and is configured with a list of available relationships that comes from the MARC relators list. (Configurable at '/admin/structure/types/manage/islandora_object/fields/node.islandora_object.field_linked_agent'.) The available relations are configured by providing the RDF namespace, a colon, the RDF relationship value, a pipe delimiter, and a display value for the user interface. (See the RDF Mapping section of ' Create / Update a Content Type ' for more details.)","title":"Typed Relation"},{"location":"user-documentation/metadata/#getting-metadata-into-fedora-and-a-triple-store","text":"The above sections described how Drupal manages and stores metadata, but the key feature of Islandora 8 is pushing that metadata into a Fedora 4+ repository and a triple-store. Islandora does this by using Drupal's serialization capabilities to provide a JSON-LD serialization that can be ingested by Fedora 4+ repository and triple-stores. In response to write operations, it sends notifications to the repository and triple-store that a node or term is available to ingest. The JSON-LD module works by taking node or term and its corresponding RDF mapping to create a JSON-LD serialization. The RDF mapping for a content type or vocabulary lists its fields and the RDF predicates that should be used for them. For example, below is the JSON-LD serialization for an example Repository item node created in a standard claw-playbook based vagrant VM: { @graph :[ { @id : http://localhost:8000/node/1?_format=jsonld , @type :[ http://pcdm.org/models#Object ], http://purl.org/dc/terms/title :[ { @value : New York, New York. A large lobster brought in by the New England fishing boat [Fulton Fish Market] , @language : en } ], http://schema.org/author :[ { @id : http://localhost:8000/user/1?_format=jsonld } ], http://schema.org/dateCreated :[ { @value : 2019-03-14T19:05:24+00:00 , @type : http://www.w3.org/2001/XMLSchema#dateTime } ], http://schema.org/dateModified :[ { @value : 2019-03-14T19:20:51+00:00 , @type : http://www.w3.org/2001/XMLSchema#dateTime } ], http://purl.org/dc/terms/date :[ { @value : 1943-05 , @type : http://www.w3.org/2001/XMLSchema#string }, { @value : 1943-05 , @type : http://www.w3.org/2001/XMLSchema#gYearMonth } ], http://purl.org/dc/terms/extent :[ { @value : 1 negative , @type : http://www.w3.org/2001/XMLSchema#string } ], http://purl.org/dc/terms/identifier :[ { @value : D 630714 , @type : http://www.w3.org/2001/XMLSchema#string } ], http://purl.org/dc/terms/type :[ { @id : http://localhost:8000/taxonomy/term/11?_format=jsonld } ], http://purl.org/dc/terms/rights :[ { @value : No known restrictions. For information, see U.S. Farm Security Administration/Office of War Information Black White Photographs(http://www.loc.gov/rr/print/res/071_fsab.html) , @type : http://www.w3.org/2001/XMLSchema#string } ], http://purl.org/dc/terms/subject :[ { @id : http://localhost:8000/taxonomy/term/26?_format=jsonld } ], http://schema.org/sameAs :[ { @value : http://localhost:8000/node/1?_format=jsonld } ] }, { @id : http://localhost:8000/user/1?_format=jsonld , @type :[ http://schema.org/Person ] }, { @id : http://localhost:8000/taxonomy/term/11?_format=jsonld , @type :[ http://schema.org/Thing ] }, { @id : http://localhost:8000/taxonomy/term/26?_format=jsonld , @type :[ http://schema.org/Thing ] } ] } Because the Repository item's title field is mapped to 'dc:title' in the RDF mapping, the node's title value appears like this in the JSON-LD output: http://purl.org/dc/terms/title :[ { @value : New York, New York. A large lobster brought in by the New England fishing boat [Fulton Fish Market] , @language : en } ], Also note that the URI ( @id ) value is 'http://localhost:8000/node/1?_format=jsonld'. To see how any node or term in a repository will be serialized to JSON-LD add ?_format=jsonld to the node's URI. When a node or term is updated a Drupal Context condition emits an indexing event to notify the repository and triple-store that it is should be ingested/updated.","title":"Getting Metadata into Fedora and a Triple-store"},{"location":"user-documentation/multilingual/","text":"Islandora 8 enables you to build full fledged multilingual repositories leveraging the multilingual support provided by Drupal core modules. The multilingual content gets indexed into Fedora repository as well as the Triplestore (Blazegraph), and can be queried using the SPARQL endpoint. In this guide, we will describe the steps needed to setup a basic multilingual Islandora 8 site. Drupal 8 Configurations Drupal 8 comes with four modules for multilingual support . Islandora 8 enables Language and Content Translation modules by default. Adding Languages From the top menu, go to Configuration Regional and language Languages ( http://localhost:8000/admin/config/regional/language ). Add a language. You can place the default language selector block to switch between languages. To create the language switcher block go to Structure Block layout. Click Place block in a region of your choice. Search for Language switcher block and click Place block . Adding Multilingual Menus From the top menu, go to Configuration Regional and language Content language and translation. Check Custom menu link under Custom language settings . Scroll down to Custom menu link section and check all the relevant fields and Save the configurations. Clear the cache (Configuration Development Performance). From the top menu, go to Structure Menu. Edit \"Main navigation\" menu. Default home menu item cannot be translated due to this issue . Disable that menu item. Click Add link to create a new menu item. Provide a menu title (i.e Home) and input front for the link field. Save. Right click on the Operations beside the new menu link and click the Translate button. Translate the menu link title for the language added above and save. Go back to home. The language switcher will enable you to switch the language/content of the menu and content. Adding a Multilingual Repository Item From the top menu, go to Content Add content Repository item. Provide the required fields and save the object. Click the Translate tab of the object, provide a title in the second language and fill any translatable fields (i.e description). Add the media for the object. Media object can be translated similar to the repository item node. Go back to home, you should be able to view content in the language selected in the language switcher. Field Label Translations If you need the field labels of the repository Item displayed in a different language, additional configuration is needed. Configuration translation module in the core needs to be enabled. Note that this will enable User Interface translation as well. Each field label needs to be translated. Alternatively, you can import existing translations. For instance, go to Interface translation import at http://localhost:8000/admin/config/regional/translate/import , select islandora translations from https://github.com/Islandora-CLAW/islandora_defaults/tree/8.x-1.x/translations , set the Treat imported strings as custom translations option and import. This will provide translation for Islandora 8 repository item field labels. Cache should be cleared to see the changes. An example second language display is shown below. Fedora Representation Islandora 8 indexes the multilingual values using language tags. An example representation is shown below. Triplestore Representation Islandora 8 indexes the multilingual content using language tags to Fedora repository. An example representation is shown below. You can query the result and filter the results by a specific language. For example, to get all titles and filter by language, the following query can be used: PREFIX dcterm: http://purl.org/dc/terms/ select ?s ?o { ?s dcterm:title ?o FILTER (lang(?o) = 'ta') } Further Reading Multilingual guide","title":"Multilingual"},{"location":"user-documentation/multilingual/#drupal-8-configurations","text":"Drupal 8 comes with four modules for multilingual support . Islandora 8 enables Language and Content Translation modules by default.","title":"Drupal 8 Configurations"},{"location":"user-documentation/multilingual/#adding-languages","text":"From the top menu, go to Configuration Regional and language Languages ( http://localhost:8000/admin/config/regional/language ). Add a language. You can place the default language selector block to switch between languages. To create the language switcher block go to Structure Block layout. Click Place block in a region of your choice. Search for Language switcher block and click Place block .","title":"Adding Languages"},{"location":"user-documentation/multilingual/#adding-multilingual-menus","text":"From the top menu, go to Configuration Regional and language Content language and translation. Check Custom menu link under Custom language settings . Scroll down to Custom menu link section and check all the relevant fields and Save the configurations. Clear the cache (Configuration Development Performance). From the top menu, go to Structure Menu. Edit \"Main navigation\" menu. Default home menu item cannot be translated due to this issue . Disable that menu item. Click Add link to create a new menu item. Provide a menu title (i.e Home) and input front for the link field. Save. Right click on the Operations beside the new menu link and click the Translate button. Translate the menu link title for the language added above and save. Go back to home. The language switcher will enable you to switch the language/content of the menu and content.","title":"Adding Multilingual Menus"},{"location":"user-documentation/multilingual/#adding-a-multilingual-repository-item","text":"From the top menu, go to Content Add content Repository item. Provide the required fields and save the object. Click the Translate tab of the object, provide a title in the second language and fill any translatable fields (i.e description). Add the media for the object. Media object can be translated similar to the repository item node. Go back to home, you should be able to view content in the language selected in the language switcher.","title":"Adding a Multilingual Repository Item"},{"location":"user-documentation/multilingual/#field-label-translations","text":"If you need the field labels of the repository Item displayed in a different language, additional configuration is needed. Configuration translation module in the core needs to be enabled. Note that this will enable User Interface translation as well. Each field label needs to be translated. Alternatively, you can import existing translations. For instance, go to Interface translation import at http://localhost:8000/admin/config/regional/translate/import , select islandora translations from https://github.com/Islandora-CLAW/islandora_defaults/tree/8.x-1.x/translations , set the Treat imported strings as custom translations option and import. This will provide translation for Islandora 8 repository item field labels. Cache should be cleared to see the changes. An example second language display is shown below.","title":"Field Label Translations"},{"location":"user-documentation/multilingual/#fedora-representation","text":"Islandora 8 indexes the multilingual values using language tags. An example representation is shown below.","title":"Fedora Representation"},{"location":"user-documentation/multilingual/#triplestore-representation","text":"Islandora 8 indexes the multilingual content using language tags to Fedora repository. An example representation is shown below. You can query the result and filter the results by a specific language. For example, to get all titles and filter by language, the following query can be used: PREFIX dcterm: http://purl.org/dc/terms/ select ?s ?o { ?s dcterm:title ?o FILTER (lang(?o) = 'ta') }","title":"Triplestore Representation"},{"location":"user-documentation/multilingual/#further-reading","text":"Multilingual guide","title":"Further Reading"},{"location":"user-documentation/objects/","text":"As we learned in Intro, objects in an Islandora repository are represented as nodes in Drupal. Because of this, their metadata profile, display, form (and much more) are configurable through the Drupal UI. This gives repository administrators a huge degree of control over their repository without any need for coding. Much more so than ever before. And since we're using a core Drupal solution for modeling our objects, compatibility with third-party modules is virtually guaranteed. This opens up a plethora of solutions from the Drupal community that will save you untold time and effort when implementing your repository with Islandora. Properties Nodes have some basic properties that are common to all nodes, regardless of content type. These properties are not fields. This means that they cannot changed or removed. Their name, what type of data they hold, etc... are all baked in. Here's an example of the basic properties you'll see on a node: nid: 1 uid: 1 title: I am an Islandora 8 object created: 1550703004 changed: 1550703512 uuid: 02932f2c-e4c2-4b7e-95e1-4aceab78c638 type: islandora_object status: 1 As you can see, it's all system data used at the Drupal level to track the basics. Property Value nid The local ID for a node uuid The global ID for any entity title The title for a node created Timestamp of when node was created changed Timestamp of when a node was last updated type Content type (e.g. which group of fields are present on the node) status Published, unpublished, etc... Compared to Islandora 7 These node properties directly correspond to following Islandora 7.x object properties: Islandora 7 Islandora 8 owner uid dc.title title PID uuid status status Fields In addition to the basic node properties identified above, Islandora objects (like all Drupal nodes) can have fields. Most of what we would think of as descriptive metadata is stored as fields. Since a specific set of required and optional fields is assigned to a node by giving it a content type, we can think of content types as metadata profiles for our objects. For example, you might have a content type for a set of repository objects that have very specialized metadata requirements but another content type for generic repository objects that share a more general set of metadata fields. The section on metadata describes in more detail how fields on Islandora objects work. Islandora has a notion of a content model , which is used to identify what type of content is being represented by a node (e.g. an image, a video, a collection of other items, etc...). This is done using a special field, \"Model\", which accepts taxonomy terms from the \"Islandora Models\" vocabulary. By applying a term from the Islandora Models vocabulary to a node, Islandora will become aware of how to handle the node in response to certain events, like choosing a viewer or generating derivatives. Compared to Islandora 7 Content models in Islandora 7 were immutable, and contained restrictions as to what types of datastreams could be associated with an object. Islandora 8 imposes no such restrictions. Content models can be changed at any time, and they in no way dictate what types of media can be associated with a node. Members Islandora has a notion of membership , which is used to create a parent/child relationship between two nodes. Any two nodes can be related in this way, though typically, the parent node has a content model of Collection. Membership (to a Collection or otherwise) is denoted using another special field, \"Member Of\". The \"Member Of\" field can hold multiple references, so it is possible for a single child to belong to multiple parents. Compared to Islandora 7 In Islandora 7, there was a distinction between belonging to a collection and belonging to a compound object. In Islandora 8, this distinction is not present, essentially making every object a compound object. For any node, its \"Members\" tab can be used to see all its members. You can also perform Actions in bulk on members using the check boxes and the Actions drop down. Media All nodes can contain any number of media. The media for any node can be managed using the \"Media\" tab when viewing a node. Much like the \"Members\" tab, Actions can be performed in bulk using the check boxes and Actions drop down. Display Hints Media are displayed in Islandora 8 via \"View modes\". View modes are Drupal's name for alternative ways to present content to users. You may be familiar with the \"full\" and \"teaser\" versions of nodes, which are rendered using two corresponding kinds of View modes. In Islandora, media content is displayed within a node field, and the View mode applies to that field. Islandora provides two View modes, one which renders the OpenSeadragon viewer and the other which renders the PDFjs viewer. These two View modes can be set explicitly in the node edit form, or you can configure Islandora to use a specific View mode for all media with a specific Mime type. At the node level, in the \"Display hints\" field, simply check the View mode you want to use for that node: The selected View mode will then be used when the node is rendered. At a global level, there are a couple of ways to tell Drupal to use the PDFjs viewer to render the content of the media field whenever the media has a Mime type of application/pdf . The first way is to edit the \"PDFjs\" Context. By default, this Context tells Drupal to use the PDFjs viewer if the node has the term \"PDFjs\" (yes, that's a taxonomy term): If you add the Condition \"Media has Mime type\" and configure it to use application/pdf as the Mime type, like this: Context will use whichever Condition applies (as long as you don't check \"Require all conditions\"). That is, if the \"PDFjs\" display hint option in the node edit form is checked, or if the node's media has a Mime type of application/pdf , the media content will be rendered using the PDFjs viewer. The second way to use the media's Mime type to render its content with the PDFjs viewer is to create separate Context that will detect the media's Mime type and use the configured View mode automatically. To do this, create a new Context. Add a \"Media has Mime type\" condition and specify the Mime type, and then add a \"Change View mode\" Reaction that selects the desired view mode: Finally, save your Context. From that point on, whenever the media for a node has the configured Mime type, Drupal will render the media using the corresponding view mode. The node-level and global approaches are not exclusive to one another. One Context can override another depending the order of execution. Whichever Condition applies last between the node-level Condition (which in this case is the \"Node has term\" condition) the global Condition (which is \"Media has Mime type\"), that one will override the other. An example of having the View mode specified in the node edit form intentionally override the View mode based on Mime type is to have media with the image/jp2 mimetype configured to use to use the OpenSeadragon viewer, but to manually select the OpenSeadragon view mode for nodes with JPEG media (for example, a very large JPEG image of a map, where the OpenSeadragon's pan and zoom features would be useful).","title":"Nodes"},{"location":"user-documentation/objects/#properties","text":"Nodes have some basic properties that are common to all nodes, regardless of content type. These properties are not fields. This means that they cannot changed or removed. Their name, what type of data they hold, etc... are all baked in. Here's an example of the basic properties you'll see on a node: nid: 1 uid: 1 title: I am an Islandora 8 object created: 1550703004 changed: 1550703512 uuid: 02932f2c-e4c2-4b7e-95e1-4aceab78c638 type: islandora_object status: 1 As you can see, it's all system data used at the Drupal level to track the basics. Property Value nid The local ID for a node uuid The global ID for any entity title The title for a node created Timestamp of when node was created changed Timestamp of when a node was last updated type Content type (e.g. which group of fields are present on the node) status Published, unpublished, etc... Compared to Islandora 7 These node properties directly correspond to following Islandora 7.x object properties: Islandora 7 Islandora 8 owner uid dc.title title PID uuid status status","title":"Properties"},{"location":"user-documentation/objects/#fields","text":"In addition to the basic node properties identified above, Islandora objects (like all Drupal nodes) can have fields. Most of what we would think of as descriptive metadata is stored as fields. Since a specific set of required and optional fields is assigned to a node by giving it a content type, we can think of content types as metadata profiles for our objects. For example, you might have a content type for a set of repository objects that have very specialized metadata requirements but another content type for generic repository objects that share a more general set of metadata fields. The section on metadata describes in more detail how fields on Islandora objects work. Islandora has a notion of a content model , which is used to identify what type of content is being represented by a node (e.g. an image, a video, a collection of other items, etc...). This is done using a special field, \"Model\", which accepts taxonomy terms from the \"Islandora Models\" vocabulary. By applying a term from the Islandora Models vocabulary to a node, Islandora will become aware of how to handle the node in response to certain events, like choosing a viewer or generating derivatives. Compared to Islandora 7 Content models in Islandora 7 were immutable, and contained restrictions as to what types of datastreams could be associated with an object. Islandora 8 imposes no such restrictions. Content models can be changed at any time, and they in no way dictate what types of media can be associated with a node.","title":"Fields"},{"location":"user-documentation/objects/#members","text":"Islandora has a notion of membership , which is used to create a parent/child relationship between two nodes. Any two nodes can be related in this way, though typically, the parent node has a content model of Collection. Membership (to a Collection or otherwise) is denoted using another special field, \"Member Of\". The \"Member Of\" field can hold multiple references, so it is possible for a single child to belong to multiple parents. Compared to Islandora 7 In Islandora 7, there was a distinction between belonging to a collection and belonging to a compound object. In Islandora 8, this distinction is not present, essentially making every object a compound object. For any node, its \"Members\" tab can be used to see all its members. You can also perform Actions in bulk on members using the check boxes and the Actions drop down.","title":"Members"},{"location":"user-documentation/objects/#media","text":"All nodes can contain any number of media. The media for any node can be managed using the \"Media\" tab when viewing a node. Much like the \"Members\" tab, Actions can be performed in bulk using the check boxes and Actions drop down.","title":"Media"},{"location":"user-documentation/objects/#display-hints","text":"Media are displayed in Islandora 8 via \"View modes\". View modes are Drupal's name for alternative ways to present content to users. You may be familiar with the \"full\" and \"teaser\" versions of nodes, which are rendered using two corresponding kinds of View modes. In Islandora, media content is displayed within a node field, and the View mode applies to that field. Islandora provides two View modes, one which renders the OpenSeadragon viewer and the other which renders the PDFjs viewer. These two View modes can be set explicitly in the node edit form, or you can configure Islandora to use a specific View mode for all media with a specific Mime type. At the node level, in the \"Display hints\" field, simply check the View mode you want to use for that node: The selected View mode will then be used when the node is rendered. At a global level, there are a couple of ways to tell Drupal to use the PDFjs viewer to render the content of the media field whenever the media has a Mime type of application/pdf . The first way is to edit the \"PDFjs\" Context. By default, this Context tells Drupal to use the PDFjs viewer if the node has the term \"PDFjs\" (yes, that's a taxonomy term): If you add the Condition \"Media has Mime type\" and configure it to use application/pdf as the Mime type, like this: Context will use whichever Condition applies (as long as you don't check \"Require all conditions\"). That is, if the \"PDFjs\" display hint option in the node edit form is checked, or if the node's media has a Mime type of application/pdf , the media content will be rendered using the PDFjs viewer. The second way to use the media's Mime type to render its content with the PDFjs viewer is to create separate Context that will detect the media's Mime type and use the configured View mode automatically. To do this, create a new Context. Add a \"Media has Mime type\" condition and specify the Mime type, and then add a \"Change View mode\" Reaction that selects the desired view mode: Finally, save your Context. From that point on, whenever the media for a node has the configured Mime type, Drupal will render the media using the corresponding view mode. The node-level and global approaches are not exclusive to one another. One Context can override another depending the order of execution. Whichever Condition applies last between the node-level Condition (which in this case is the \"Node has term\" condition) the global Condition (which is \"Media has Mime type\"), that one will override the other. An example of having the View mode specified in the node edit form intentionally override the View mode based on Mime type is to have media with the image/jp2 mimetype configured to use to use the OpenSeadragon viewer, but to manually select the OpenSeadragon view mode for nodes with JPEG media (for example, a very large JPEG image of a map, where the OpenSeadragon's pan and zoom features would be useful).","title":"Display Hints"},{"location":"user-documentation/placing-blocks/","text":"Placing Blocks Using Block Layout In Drupal, blocks are snippets of content that can be placed on pages within your website's layout. Some examples of blocks are your site's menu, breadcrumbs, search block, etc... You have a lot of control over when and where you see blocks using Drupal's administrative interface. You can create and delete blocks, as well as move them around in different locations on the page (called 'regions' in Drupal theme terminology). You can also control on which pages the blocks are visible, allowing you to conditionally show/hide them as appropriate. Blocks are made available to place by enabling the Drupal modules that provide them, and there's lots out there to choose from. Placing blocks is an essential skill for any site administrator, so let's jump right in and get our hands dirty. Using the admin toolbar, navigate to Admin Structure Block layout (admin/structure/block). You will see a table listing all of the available regions provided by the current theme for block placement. You can switch between available themes using the tabs above the table. For each region, enabled blocks are listed and can be re-arranged. Take a look at the \"Main Content\" region for example. If you wanted to move the content above its tabs, you could drag the \"Main page content\" block above the \"Tabs\" block. If you scroll all the way down to the bottom and click the \"Save blocks\" button, now when you go to view content you should see something like this If you want to add a new block to a region, hit the \"Place block\" button for that region and you'll be brought to a modal that will let you select which block to place. After selecting your block, you will be brought to its configuration form. Here you can give the block a different title, change its region using a dropdown, and control its visibility settings by configuring various conditions. In our case, we're adding the \"Development\" block to the \"Footer\" region. And since we want to see this block everywhere, we'll leave the visibility settings alone for now. Click the \"Save block\" button, and now if we go view some content we should see the \"Development\" menu in the footer of our site. If we want to limit this eyesore to only the front page of our site, we can revisit the visibility settings of the block. Navigate to the block we just placed on the block placement page, and click its \"Configure\" button. Here you can limit the block to show only for certain roles or content types. You can also explicitly set a white or black list of pages, which is what we'll do. Click the Pages tab and you'll have a text area you can list pages in. We're going to enter front , which is a special value that means \"The front page of your site\". Underneath the text area, you can select whether you are showing or hiding the block for this list of pages. We want to show this only on the front page, so we'll leave it set at \"Show for the listed pages\". Click \"Save block\" and go back to a piece of content. You shouldn't see the development menu. But go to the frontpage and... Using Context The visibility conditions in the block placement UI are simple and effective. They cover the majority of use cases, however, there are times when you need even more control. This is where the Context module really shines. Any condition available to the Context module can be used to control block visibility. And you can even combine conditions using Boolean (AND/OR) logic. For example, in the islandora_demo feature, we provide a context specifically for showing a list of members of a collection. All of our content is the same content type (Repository Item), and Collections are distinguished by being tagged with the \"Collection\" taxonomy term. Using the admin toolbar, if you navigate to Admin Structure Context (admin/structure/context), you should see a list of all contexts available to the site. Click the \"Configure\" button on the \"Collection\" context. You can see in its \"Condition\" section, we have the \"Node has term\" condition, which checks for content tagged with the term provided by the user. In this case, it's set to look for the \"Collection\" tag. Underneath, in the \"Reaction\" section, you can see that the \"Block\" reaction has been selected, and its configuration looks a lot like the core block placement UI. The only difference here is that when the \"Include blocks from block layout\" box is checked, you are only placing the blocks you want to add in addition to an already existing block layout. If you uncheck the box, you are creating an entirely new block layout from scratch, and will have to replace basic things like breadcrumbs and menus. Here you can see we've added only the members block to this block layout. If we go and navigate to a collection, you'll see its list of members underneath its content. If we edit the collection and change its model tag from \"Collection\" to anything else, you'll see the block disappears! As you can see, block placement can be very flexible, and allow you to customize your site in a very granular fashion. Between using core block placement and the context module, there's no block you can't get into the right place on your site.","title":"Blocks"},{"location":"user-documentation/placing-blocks/#placing-blocks","text":"","title":"Placing Blocks"},{"location":"user-documentation/placing-blocks/#using-block-layout","text":"In Drupal, blocks are snippets of content that can be placed on pages within your website's layout. Some examples of blocks are your site's menu, breadcrumbs, search block, etc... You have a lot of control over when and where you see blocks using Drupal's administrative interface. You can create and delete blocks, as well as move them around in different locations on the page (called 'regions' in Drupal theme terminology). You can also control on which pages the blocks are visible, allowing you to conditionally show/hide them as appropriate. Blocks are made available to place by enabling the Drupal modules that provide them, and there's lots out there to choose from. Placing blocks is an essential skill for any site administrator, so let's jump right in and get our hands dirty. Using the admin toolbar, navigate to Admin Structure Block layout (admin/structure/block). You will see a table listing all of the available regions provided by the current theme for block placement. You can switch between available themes using the tabs above the table. For each region, enabled blocks are listed and can be re-arranged. Take a look at the \"Main Content\" region for example. If you wanted to move the content above its tabs, you could drag the \"Main page content\" block above the \"Tabs\" block. If you scroll all the way down to the bottom and click the \"Save blocks\" button, now when you go to view content you should see something like this If you want to add a new block to a region, hit the \"Place block\" button for that region and you'll be brought to a modal that will let you select which block to place. After selecting your block, you will be brought to its configuration form. Here you can give the block a different title, change its region using a dropdown, and control its visibility settings by configuring various conditions. In our case, we're adding the \"Development\" block to the \"Footer\" region. And since we want to see this block everywhere, we'll leave the visibility settings alone for now. Click the \"Save block\" button, and now if we go view some content we should see the \"Development\" menu in the footer of our site. If we want to limit this eyesore to only the front page of our site, we can revisit the visibility settings of the block. Navigate to the block we just placed on the block placement page, and click its \"Configure\" button. Here you can limit the block to show only for certain roles or content types. You can also explicitly set a white or black list of pages, which is what we'll do. Click the Pages tab and you'll have a text area you can list pages in. We're going to enter front , which is a special value that means \"The front page of your site\". Underneath the text area, you can select whether you are showing or hiding the block for this list of pages. We want to show this only on the front page, so we'll leave it set at \"Show for the listed pages\". Click \"Save block\" and go back to a piece of content. You shouldn't see the development menu. But go to the frontpage and...","title":"Using Block Layout"},{"location":"user-documentation/placing-blocks/#using-context","text":"The visibility conditions in the block placement UI are simple and effective. They cover the majority of use cases, however, there are times when you need even more control. This is where the Context module really shines. Any condition available to the Context module can be used to control block visibility. And you can even combine conditions using Boolean (AND/OR) logic. For example, in the islandora_demo feature, we provide a context specifically for showing a list of members of a collection. All of our content is the same content type (Repository Item), and Collections are distinguished by being tagged with the \"Collection\" taxonomy term. Using the admin toolbar, if you navigate to Admin Structure Context (admin/structure/context), you should see a list of all contexts available to the site. Click the \"Configure\" button on the \"Collection\" context. You can see in its \"Condition\" section, we have the \"Node has term\" condition, which checks for content tagged with the term provided by the user. In this case, it's set to look for the \"Collection\" tag. Underneath, in the \"Reaction\" section, you can see that the \"Block\" reaction has been selected, and its configuration looks a lot like the core block placement UI. The only difference here is that when the \"Include blocks from block layout\" box is checked, you are only placing the blocks you want to add in addition to an already existing block layout. If you uncheck the box, you are creating an entirely new block layout from scratch, and will have to replace basic things like breadcrumbs and menus. Here you can see we've added only the members block to this block layout. If we go and navigate to a collection, you'll see its list of members underneath its content. If we edit the collection and change its model tag from \"Collection\" to anything else, you'll see the block disappears! As you can see, block placement can be very flexible, and allow you to customize your site in a very granular fashion. Between using core block placement and the context module, there's no block you can't get into the right place on your site.","title":"Using Context"},{"location":"user-documentation/searching/","text":"Setup and Configure Search Islandora 8 comes with the Drupal 8 Search API and SOLR modules enabled with a corresponding SOLR instance. This guide gives an overview to the setup provided by the claw-playbook. Much more detail is available in the Search API documentation . Another helpful resource is Adam Fuch's \"Drupal 8 Custom Site Search with Search API\" (https://www.electriccitizen.com, 2018-01-10; last accessed 2019-03-08). Indexing Islandora 8 with SOLR To access the search indexing settings navigate to '/admin/config/search/search-api'. SOLR Server Configuration Use the 'Solr Server' link to view the SOLR server's configuration and the 'Default Solr content index' link to view or update the index settings. In most cases, where the site was built using Ansible, the 'Solr Server' settings that were configured during installation should be left alone. SOLR Index Configuration The Default Solr content index user interface is divided into four tabs: 'View', 'Edit', 'Fields', and 'Processors'. View Tab The 'View' tab gives an overview of the index and its status: - 'Index status' is a progress bar that indicates how many items have been indexed. - 'Status' allows you to enable/disable the index from being used. - 'Datasource' indicates what types of entities are being indexed and how many have. - 'Tracker' states which item tracker is being used. - 'Server' provides a link to the SOLR server's configuration page. - 'Server index status' is a count of the total number of items returned from an unfiltered empty search. Generally speaking, this should match the total number of items indexed. See the Drupal 8 Search API FAQ for more details. - 'Cron batch size' displays how many items will be indexed when Drupal's cron runs. The 'View' tab also provides links to some common actions. 'Start Indexing Now' allows you to start a indexing job for a specified number of items (default is 'all'). You can also specify how many items should be indexed in each batch (default is '50'). The other links allow a repository manager to queue all objects for reindexing, clear the index, or rebuild tracking information. Edit Tab The 'Edit' tab allows repository managers to configure how the index works as a whole, including the Index name, the data sources\u2014entity types\u2014it can index (including which specific content types or taxonomies will be indexed), which server it is connected to, and other SOLR-specific options. 'Content' (types) is the only data source enabled by default. Selecting 'Taxonomy term' will enable searching taxonomies which is recommended if the repository uses taxonomies for subjects or other discovery points. Once the data sources are enabled a configuration box for each of them will appear in a section just below the list of data sources. This allows repository managers to select which content types (or taxonomy vocabularies) will be included in the index. By default all the content types, and vocabularies if the taxonomy data source is enabled, are indexed. Note: the defaults assume a repository is adding content using the web interface. If a repository manager plans on bulk-loading content they should disable the 'Index items immediately' option in the expandable 'Index Options' box and increase the 'Cron batch size' option. Fields Tab The 'Fields' tab allows repository managers to select which fields will be indexed. The default set of fields enabled come from a standard Drupal installation and do not reflect the fields Islandora adds for 'Repository Item'. Repository managers need to add the fields necessary for their Islandora instance. To add a field, click the '+ Add fields' button. A shadow-box will appear with a list of the fields available for the index. Some fields, such as the 'Body' ('body') field provided by Drupal, have multiple properties which can be completely different values or variations on the same value. Click on the plus-sign next to the field to show the properties available to index. In most cases repository managers can ignore the properties list and click the 'Add' button by the field to index the default property ('value'). Only select a different field property if you understand how it will impact user searching. Entity reference fields, such as Tags ('field_tags'), allow you to select fields or their properties from the referenced entity for indexing, such as a referenced taxonomy term's name field. Once the fields are added they can be configured further on the 'Fields' tab, although the label, machine name, and type usually don't need to be changed. The 'Type' dropdown has several different Full-text processing options available, which may be of interest. Each is described in the expandable 'Data Types' box at the bottom of the page. The 'Boost' setting allows repository managers to increase the weight of particular fields when calculating search relevancy. Processors Tab The 'Processors' tab allows repository managers to adjust how data and search queries are processed to adjust results. The defaults are acceptable in most cases. Searching Islandora 8 The Search API SOLR module comes with a search page pre-configured (accessible at '/solr-search/content'). To edit the search page, navigate to '/admin/structure/views/view/solr_search_content'. Repository managers may want to change the URL used to access the page, add it to the site navigation, or add a search box. In the 'Page Settings' box in the middle of the page, click on the existing path to open a shadow-box with an edit field. Change the URL as desired, for example, to 'search' and click 'Apply'. Then, click the 'No menu' link just below it to open the menu settings shadow-box. Selecting 'Normal menu entry' will allow a repository manager to add a menu link text, description, and place it within the site menu tree (the default, Main navigation works for most sites). A search box can be added by expanding the 'Advanced' options and changing the 'Exposed form in block' setting and then use the 'Block Layout' interface (found at '/admin/structure/block') to place the block where desired. After making changes to the View's settings, click the 'Save' button to ensure the changes are not lost. Islandora's Repository Items are displayed in the search results as a fully rendered entity by default. Repository managers can choose which view mode should be used for each search datasource by clicking the 'Settings' link next to the 'Show:' setting under the 'Format' section of the search view configuration page (shown in a red box in the screenshot below). The 'Teaser' and 'Search result highlighting input' are the two most likely options. Alternatively, repository managers can select specific fields to display instead by clicking the 'Rendered Entity' link and changing it to 'Fields' and then choosing which fields will be displayed in the 'Fields' section underneath. Note: thumbnails will not immediately be available using the Fields display option without more advanced configurations.","title":"Searching"},{"location":"user-documentation/searching/#setup-and-configure-search","text":"Islandora 8 comes with the Drupal 8 Search API and SOLR modules enabled with a corresponding SOLR instance. This guide gives an overview to the setup provided by the claw-playbook. Much more detail is available in the Search API documentation . Another helpful resource is Adam Fuch's \"Drupal 8 Custom Site Search with Search API\" (https://www.electriccitizen.com, 2018-01-10; last accessed 2019-03-08).","title":"Setup and Configure Search"},{"location":"user-documentation/searching/#indexing-islandora-8-with-solr","text":"To access the search indexing settings navigate to '/admin/config/search/search-api'.","title":"Indexing Islandora 8 with SOLR"},{"location":"user-documentation/searching/#solr-server-configuration","text":"Use the 'Solr Server' link to view the SOLR server's configuration and the 'Default Solr content index' link to view or update the index settings. In most cases, where the site was built using Ansible, the 'Solr Server' settings that were configured during installation should be left alone.","title":"SOLR Server Configuration"},{"location":"user-documentation/searching/#solr-index-configuration","text":"The Default Solr content index user interface is divided into four tabs: 'View', 'Edit', 'Fields', and 'Processors'.","title":"SOLR Index Configuration"},{"location":"user-documentation/searching/#view-tab","text":"The 'View' tab gives an overview of the index and its status: - 'Index status' is a progress bar that indicates how many items have been indexed. - 'Status' allows you to enable/disable the index from being used. - 'Datasource' indicates what types of entities are being indexed and how many have. - 'Tracker' states which item tracker is being used. - 'Server' provides a link to the SOLR server's configuration page. - 'Server index status' is a count of the total number of items returned from an unfiltered empty search. Generally speaking, this should match the total number of items indexed. See the Drupal 8 Search API FAQ for more details. - 'Cron batch size' displays how many items will be indexed when Drupal's cron runs. The 'View' tab also provides links to some common actions. 'Start Indexing Now' allows you to start a indexing job for a specified number of items (default is 'all'). You can also specify how many items should be indexed in each batch (default is '50'). The other links allow a repository manager to queue all objects for reindexing, clear the index, or rebuild tracking information.","title":"View Tab"},{"location":"user-documentation/searching/#edit-tab","text":"The 'Edit' tab allows repository managers to configure how the index works as a whole, including the Index name, the data sources\u2014entity types\u2014it can index (including which specific content types or taxonomies will be indexed), which server it is connected to, and other SOLR-specific options. 'Content' (types) is the only data source enabled by default. Selecting 'Taxonomy term' will enable searching taxonomies which is recommended if the repository uses taxonomies for subjects or other discovery points. Once the data sources are enabled a configuration box for each of them will appear in a section just below the list of data sources. This allows repository managers to select which content types (or taxonomy vocabularies) will be included in the index. By default all the content types, and vocabularies if the taxonomy data source is enabled, are indexed. Note: the defaults assume a repository is adding content using the web interface. If a repository manager plans on bulk-loading content they should disable the 'Index items immediately' option in the expandable 'Index Options' box and increase the 'Cron batch size' option.","title":"Edit Tab"},{"location":"user-documentation/searching/#fields-tab","text":"The 'Fields' tab allows repository managers to select which fields will be indexed. The default set of fields enabled come from a standard Drupal installation and do not reflect the fields Islandora adds for 'Repository Item'. Repository managers need to add the fields necessary for their Islandora instance. To add a field, click the '+ Add fields' button. A shadow-box will appear with a list of the fields available for the index. Some fields, such as the 'Body' ('body') field provided by Drupal, have multiple properties which can be completely different values or variations on the same value. Click on the plus-sign next to the field to show the properties available to index. In most cases repository managers can ignore the properties list and click the 'Add' button by the field to index the default property ('value'). Only select a different field property if you understand how it will impact user searching. Entity reference fields, such as Tags ('field_tags'), allow you to select fields or their properties from the referenced entity for indexing, such as a referenced taxonomy term's name field. Once the fields are added they can be configured further on the 'Fields' tab, although the label, machine name, and type usually don't need to be changed. The 'Type' dropdown has several different Full-text processing options available, which may be of interest. Each is described in the expandable 'Data Types' box at the bottom of the page. The 'Boost' setting allows repository managers to increase the weight of particular fields when calculating search relevancy.","title":"Fields Tab"},{"location":"user-documentation/searching/#processors-tab","text":"The 'Processors' tab allows repository managers to adjust how data and search queries are processed to adjust results. The defaults are acceptable in most cases.","title":"Processors Tab"},{"location":"user-documentation/searching/#searching-islandora-8","text":"The Search API SOLR module comes with a search page pre-configured (accessible at '/solr-search/content'). To edit the search page, navigate to '/admin/structure/views/view/solr_search_content'. Repository managers may want to change the URL used to access the page, add it to the site navigation, or add a search box. In the 'Page Settings' box in the middle of the page, click on the existing path to open a shadow-box with an edit field. Change the URL as desired, for example, to 'search' and click 'Apply'. Then, click the 'No menu' link just below it to open the menu settings shadow-box. Selecting 'Normal menu entry' will allow a repository manager to add a menu link text, description, and place it within the site menu tree (the default, Main navigation works for most sites). A search box can be added by expanding the 'Advanced' options and changing the 'Exposed form in block' setting and then use the 'Block Layout' interface (found at '/admin/structure/block') to place the block where desired. After making changes to the View's settings, click the 'Save' button to ensure the changes are not lost. Islandora's Repository Items are displayed in the search results as a fully rendered entity by default. Repository managers can choose which view mode should be used for each search datasource by clicking the 'Settings' link next to the 'Show:' setting under the 'Format' section of the search view configuration page (shown in a red box in the screenshot below). The 'Teaser' and 'Search result highlighting input' are the two most likely options. Alternatively, repository managers can select specific fields to display instead by clicking the 'Rendered Entity' link and changing it to 'Fields' and then choosing which fields will be displayed in the 'Fields' section underneath. Note: thumbnails will not immediately be available using the Fields display option without more advanced configurations.","title":"Searching Islandora 8"},{"location":"user-documentation/usage-stats/","text":"Drupal 8 supports various web analytics integrations such as google analytics and Matomo . For privacy reasons, Islandora 8 integrates Matomo web analytics platforms by default. The Matomo server is installed here: http://localhost:8000/matomo. The default configurations can be found in http://localhost:8000/admin/config/system/matomo . You can login to the Matomo server using username admin and password islandora . To see page views, login to Matomo and go to Behaviour Pages. Further Reading Matomo User Guides","title":"Usage Stats"},{"location":"user-documentation/usage-stats/#further-reading","text":"Matomo User Guides","title":"Further Reading"},{"location":"user-documentation/user-intro/","text":"This User Documentation section is aimed at site admins and repository managers who need to understand and configure their Islandora. It will go in depth on how Islandora allows you to use the various features of Drupal to construct and display repository items. Islandora, like Drupal, provides tools to create a site, but does not force you to conform to any specific site structure, organization, or navigation. There is a hope that we can provide something useful out of the box, while also allowing the full suite of Drupal configuration options. This out-of-the-box configuration is the Islandora Demo module. It is recommended to be familiar with the basics of Drupal, including content types, fields, users, and views. The Official Drupal 8 User Guide and the Community Guide to Drupal 8 are a good place to start. Object Modeling In Islandora, when we say object , we mean a collection of properties describing something. And when we say datastream , we mean a file that is a digital representation of an object. Content in our repositories is stored as an object that is associated with any number of datastreams. In Drupal terms, that makes everything an entity , where An object is a node (a.k.a. content ). Nodes have properties that can be configured called fields . Fields for nodes are grouped together as content types . Datastreams are media , which are files that can have their own fields and media types . Metadata used to categorize entities are taxonomy terms , which also have their own fields and vocabularies . They can represent everything from simple labels to more complex concepts such as people, places, and subjects. Fedora Islandora 7.x basically inherits its object model from Fedora 3.x. In 7.x, Fedora stores all properties and content associated with an object - not only its owner, dc.title, status, PID, and status, but also any content files such as OBJ, DC, MODS, and RELS-EXT. In Islandora 7.x, Fedora is the authoritative, primary source for all aspects of an object. Fedora 3.x is not an optional component of an Islandora 7.x repository, it is the primary datastore. In Islandora 8, using Fedora is optional. That's right, optional. Drupal, and not Fedora, is the primary source of all aspects of an Islandora 8 object, and, with some variations, Drupal, not Fedora, is the primary datastore in an Islandora repository. If Fedora is present in an Islandora 8 repository, content in it is a tightly synchronized copy of object properties and files managed by Drupal. Even though Fedora is optional in Islandora 8, most repositories will use it since it provides its own set of services that are worth taking advantage of, such as: flexible, and configurable, disk storage architecture fixity digest generation Memento versioning integration with RDF/Linked Data triplestores Integration with Microservices via API-X WebAC Policies for access control In Islandora repositories that use Fedora, all properties about Drupal nodes are mirrored in Fedora as RDF properties. But, even if an Islandora instance does not use Fedora, Drupal can provide an object's properties as RDF (again, Drupal is the primary source of data in Islandora 8). In addition, the Drupal media associated with Islandora 8 objects are persisted to Fedora, although exactly which media is configurable within the Islandora 8 admin interface. Just as Drupal out of the box has a public and private filesystem, Islandora adds a third filesystem to Drupal called, not surprisingly, \"fedora\", and it is to this filesystem that media are persisted. We will provide more information about Fedora's role in an Islandora 8 repository in the metadata and media sections. Architecture Todo Islandora is middleware The Chimera diagram Reference to dev section for more info.","title":"Introduction"},{"location":"user-documentation/user-intro/#object-modeling","text":"In Islandora, when we say object , we mean a collection of properties describing something. And when we say datastream , we mean a file that is a digital representation of an object. Content in our repositories is stored as an object that is associated with any number of datastreams. In Drupal terms, that makes everything an entity , where An object is a node (a.k.a. content ). Nodes have properties that can be configured called fields . Fields for nodes are grouped together as content types . Datastreams are media , which are files that can have their own fields and media types . Metadata used to categorize entities are taxonomy terms , which also have their own fields and vocabularies . They can represent everything from simple labels to more complex concepts such as people, places, and subjects.","title":"Object Modeling"},{"location":"user-documentation/user-intro/#fedora","text":"Islandora 7.x basically inherits its object model from Fedora 3.x. In 7.x, Fedora stores all properties and content associated with an object - not only its owner, dc.title, status, PID, and status, but also any content files such as OBJ, DC, MODS, and RELS-EXT. In Islandora 7.x, Fedora is the authoritative, primary source for all aspects of an object. Fedora 3.x is not an optional component of an Islandora 7.x repository, it is the primary datastore. In Islandora 8, using Fedora is optional. That's right, optional. Drupal, and not Fedora, is the primary source of all aspects of an Islandora 8 object, and, with some variations, Drupal, not Fedora, is the primary datastore in an Islandora repository. If Fedora is present in an Islandora 8 repository, content in it is a tightly synchronized copy of object properties and files managed by Drupal. Even though Fedora is optional in Islandora 8, most repositories will use it since it provides its own set of services that are worth taking advantage of, such as: flexible, and configurable, disk storage architecture fixity digest generation Memento versioning integration with RDF/Linked Data triplestores Integration with Microservices via API-X WebAC Policies for access control In Islandora repositories that use Fedora, all properties about Drupal nodes are mirrored in Fedora as RDF properties. But, even if an Islandora instance does not use Fedora, Drupal can provide an object's properties as RDF (again, Drupal is the primary source of data in Islandora 8). In addition, the Drupal media associated with Islandora 8 objects are persisted to Fedora, although exactly which media is configurable within the Islandora 8 admin interface. Just as Drupal out of the box has a public and private filesystem, Islandora adds a third filesystem to Drupal called, not surprisingly, \"fedora\", and it is to this filesystem that media are persisted. We will provide more information about Fedora's role in an Islandora 8 repository in the metadata and media sections.","title":"Fedora"},{"location":"user-documentation/user-intro/#architecture","text":"Todo Islandora is middleware The Chimera diagram Reference to dev section for more info.","title":"Architecture"},{"location":"user-documentation/users/","text":"Managing Users How to Add a User Log in to Drupal. You will need the Administrator role to Manage Users. Click the Manage tab from the top toolbar. Select the People tab from the resulting menu to bring up the People page. Click the blue Add user button to bring up the Add user page. Enter all required fields, as indicated by red asterisks, in the Add user page. In the Roles section, click on the roles that the new user will need. Click on \"Administrator\" if the new user will need to be able to run administrative tasks in Drupal or Islandora 8. Click on \"fedoraAdmin\" if the new user will need to be able to write to Fedora. This is required by the WebAC authentication so Islandora 8 and Fedora can communicate. Review other settings available for a new user such as: Site language English selected by default. Contact Settings section Personal contact form selected by default. Click on the Create New Account button at the bottom of the Add user page to finish adding a new user. To review/edit the permission for each role, in the People page click the Permissions tab in the set of tabs above the Add user button. How to Create a New User Role Log in to Drupal. You will need the Administrator role to edit or add roles. Click the Manage tab from the top toolbar. Select the People tab from the resulting menu. Click the Roles tab in the set of tabs above the Add user button. Click the blue Add role button to bring up the Add role page. Name the role in a way that it can be disambiguated from related activities or similar groups. For example: use the course code for a particular class of students working on a particular collection. Click the blue Save button. How to Edit Role Permissions Log in to Drupal. You will need the Administrator role to edit permissions. Click the Manage tab from the top toolbar. Select the People tab from the resulting menu. Click the Roles tab in the set of tabs above the Add user button. To edit the permissions for a role click the Edit dropdown menu to the right of a role and select Edit Permissions to bring up the Edit role page. Scroll down or search for options that have an Islandora prefix or contain the word Islandora . For example, Islandora Access: Create terms . Further Reading on Managing Users in Drupal For more information on managing users in Drupal visit the section Managing User Accounts of Drupal.org.","title":"Users"},{"location":"user-documentation/users/#managing-users","text":"","title":"Managing Users"},{"location":"user-documentation/users/#how-to-add-a-user","text":"Log in to Drupal. You will need the Administrator role to Manage Users. Click the Manage tab from the top toolbar. Select the People tab from the resulting menu to bring up the People page. Click the blue Add user button to bring up the Add user page. Enter all required fields, as indicated by red asterisks, in the Add user page. In the Roles section, click on the roles that the new user will need. Click on \"Administrator\" if the new user will need to be able to run administrative tasks in Drupal or Islandora 8. Click on \"fedoraAdmin\" if the new user will need to be able to write to Fedora. This is required by the WebAC authentication so Islandora 8 and Fedora can communicate. Review other settings available for a new user such as: Site language English selected by default. Contact Settings section Personal contact form selected by default. Click on the Create New Account button at the bottom of the Add user page to finish adding a new user. To review/edit the permission for each role, in the People page click the Permissions tab in the set of tabs above the Add user button.","title":"How to Add a User"},{"location":"user-documentation/users/#how-to-create-a-new-user-role","text":"Log in to Drupal. You will need the Administrator role to edit or add roles. Click the Manage tab from the top toolbar. Select the People tab from the resulting menu. Click the Roles tab in the set of tabs above the Add user button. Click the blue Add role button to bring up the Add role page. Name the role in a way that it can be disambiguated from related activities or similar groups. For example: use the course code for a particular class of students working on a particular collection. Click the blue Save button.","title":"How to Create a New User Role"},{"location":"user-documentation/users/#how-to-edit-role-permissions","text":"Log in to Drupal. You will need the Administrator role to edit permissions. Click the Manage tab from the top toolbar. Select the People tab from the resulting menu. Click the Roles tab in the set of tabs above the Add user button. To edit the permissions for a role click the Edit dropdown menu to the right of a role and select Edit Permissions to bring up the Edit role page. Scroll down or search for options that have an Islandora prefix or contain the word Islandora . For example, Islandora Access: Create terms .","title":"How to Edit Role Permissions"},{"location":"user-documentation/users/#further-reading-on-managing-users-in-drupal","text":"For more information on managing users in Drupal visit the section Managing User Accounts of Drupal.org.","title":"Further Reading on Managing Users in Drupal"}]}