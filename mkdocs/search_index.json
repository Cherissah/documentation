{
    "docs": [
        {
            "location": "/", 
            "text": "About Islandora\n\n\nIslandora\n is an open-source software framework designed to help institutions and organizations and their audiences collaboratively manage, and discover digital assets using a best-practices framework.  Islandora was originally developed by the University of Prince Edward Island's Robertson Library, but is now implemented and contributed to by an ever-growing international community.\n\n\nIslandora consists of:\n\n\n\n\nSync\n - Event driven middleware based on Apache Camel that synchronizes a Fedora 4 JCR with a Drupal CMS.\n\n\nIslandora\n - Fedora 4 Repository module\n\n\nInstall\n - The is a development environment virtual machine for the Islandora and Fedora 4 project. It should work on any operating system that supports VirtualBox and Vagrant.\n\n\n\n\nAbout this guide\n\n\nThe Technical documentation will help you understand:\n\n\n\n\n7.x-2.x archtecture\n\n\nMiddleware services\n\n\nIslandoraCommand\n\n\n\n\nThe \nHow to build documentation\n provides and overview on how the documentation is created, built, and deployed.\n\n\nThe \nMigration\n provides and overview of Fedora 3 -\n Fedora 4 mappings, along with lists of Fedora and Islandora namespace predicates that are in use in a standard Islandora installation.\n\n\nInstallation\n\n\nThe \ninstallation section\n provides and overview on how to create a virtual development environment.\n\n\nContributing\n\n\nIf you would like to contribute, please get involved with the \nIslandora Fedora 4 Interest Group\n, and check out the \ncontributing section\n. We love to hear from you!\n\n\nIf you would like to contribute code to the project, you will need to be covered by an Islandora Foundation \nContributor License Agreement\n or \nCorporate Contributor Licencse Agreement\n. Please see the \nContributors\n page on Islandora.ca for more information.\n\n\nSponsors\n\n\n\n\nDiscoverygarden\n\n\nLYRASIS\n\n\nYork University\n\n\nMcMaster University\n\n\nUniversity of Prince Edward Island\n\n\nUniversity of Manitoba\n\n\nUniversity of Limerick\n\n\nSimon Fraser University\n\n\nPALS\n\n\n\n\nMaintainers\n\n\n\n\nNick Ruest\n\n\nDaniel Lamb\n\n\n\n\nLicensing\n\n\nIslandora is licensed under the GNU General Public License, Version 3. See \nLICENSE\n for the full license text.", 
            "title": "Islandora"
        }, 
        {
            "location": "/#about-islandora", 
            "text": "Islandora  is an open-source software framework designed to help institutions and organizations and their audiences collaboratively manage, and discover digital assets using a best-practices framework.  Islandora was originally developed by the University of Prince Edward Island's Robertson Library, but is now implemented and contributed to by an ever-growing international community.  Islandora consists of:   Sync  - Event driven middleware based on Apache Camel that synchronizes a Fedora 4 JCR with a Drupal CMS.  Islandora  - Fedora 4 Repository module  Install  - The is a development environment virtual machine for the Islandora and Fedora 4 project. It should work on any operating system that supports VirtualBox and Vagrant.", 
            "title": "About Islandora"
        }, 
        {
            "location": "/#about-this-guide", 
            "text": "The Technical documentation will help you understand:   7.x-2.x archtecture  Middleware services  IslandoraCommand   The  How to build documentation  provides and overview on how the documentation is created, built, and deployed.  The  Migration  provides and overview of Fedora 3 -  Fedora 4 mappings, along with lists of Fedora and Islandora namespace predicates that are in use in a standard Islandora installation.", 
            "title": "About this guide"
        }, 
        {
            "location": "/#installation", 
            "text": "The  installation section  provides and overview on how to create a virtual development environment.", 
            "title": "Installation"
        }, 
        {
            "location": "/#contributing", 
            "text": "If you would like to contribute, please get involved with the  Islandora Fedora 4 Interest Group , and check out the  contributing section . We love to hear from you!  If you would like to contribute code to the project, you will need to be covered by an Islandora Foundation  Contributor License Agreement  or  Corporate Contributor Licencse Agreement . Please see the  Contributors  page on Islandora.ca for more information.", 
            "title": "Contributing"
        }, 
        {
            "location": "/#sponsors", 
            "text": "Discoverygarden  LYRASIS  York University  McMaster University  University of Prince Edward Island  University of Manitoba  University of Limerick  Simon Fraser University  PALS", 
            "title": "Sponsors"
        }, 
        {
            "location": "/#maintainers", 
            "text": "Nick Ruest  Daniel Lamb", 
            "title": "Maintainers"
        }, 
        {
            "location": "/#licensing", 
            "text": "Islandora is licensed under the GNU General Public License, Version 3. See  LICENSE  for the full license text.", 
            "title": "Licensing"
        }, 
        {
            "location": "/camel/sync/README/", 
            "text": "Islandora-Sync\n\n\nIntroduction\n\n\nEvent driven middleware based on Apache Camel that synchronizes a Fedora 4 JCR with a Drupal CMS.  \n\n\nRequirements\n\n\n\n\nJava 7\n\n\nMaven 3\n\n\nA servlet container\n\n\n\n\nCompilation\n\n\nmvn install\n\n\nDeployment\n\n\nAfter successful compilation, copy the resulting war from the target directory to the deployment directory of your servlet container.\n\n\nMaintainers/Sponsors\n\n\nCurrent maintainers:\n\n\n\n\nNick Ruest\n\n\nDaniel Lamb\n\n\n\n\nDevelopment\n\n\nIf you would like to contribute, please check out our helpful \nDocumentation for Developers\n info, as well as our \nDevelopers\n section on the Islandora.ca site.\n\n\nLicense\n\n\nGPLv3", 
            "title": "Islandora-Sync"
        }, 
        {
            "location": "/camel/sync/README/#islandora-sync", 
            "text": "", 
            "title": "Islandora-Sync"
        }, 
        {
            "location": "/camel/sync/README/#introduction", 
            "text": "Event driven middleware based on Apache Camel that synchronizes a Fedora 4 JCR with a Drupal CMS.", 
            "title": "Introduction"
        }, 
        {
            "location": "/camel/sync/README/#requirements", 
            "text": "Java 7  Maven 3  A servlet container", 
            "title": "Requirements"
        }, 
        {
            "location": "/camel/sync/README/#compilation", 
            "text": "mvn install", 
            "title": "Compilation"
        }, 
        {
            "location": "/camel/sync/README/#deployment", 
            "text": "After successful compilation, copy the resulting war from the target directory to the deployment directory of your servlet container.", 
            "title": "Deployment"
        }, 
        {
            "location": "/camel/sync/README/#maintainerssponsors", 
            "text": "Current maintainers:   Nick Ruest  Daniel Lamb", 
            "title": "Maintainers/Sponsors"
        }, 
        {
            "location": "/camel/sync/README/#development", 
            "text": "If you would like to contribute, please check out our helpful  Documentation for Developers  info, as well as our  Developers  section on the Islandora.ca site.", 
            "title": "Development"
        }, 
        {
            "location": "/camel/sync/README/#license", 
            "text": "GPLv3", 
            "title": "License"
        }, 
        {
            "location": "/drupal/islandora/README/", 
            "text": "Islandora \n\n\nIntroduction\n\n\nIslandora Fedora 4 Repository Module\n\n\nMaintainers/Sponsors\n\n\nCurrent maintainers:\n\n\n\n\nNick Ruest\n\n\nDaniel Lamb\n\n\n\n\nDevelopment\n\n\nIf you would like to contribute to this module, please check out our helpful \nDocumentation for Developers\n info, as well as our \nDevelopers\n section on the Islandora.ca site.\n\n\nLicense\n\n\nGPLv3", 
            "title": "Islandora (Drupal module)"
        }, 
        {
            "location": "/drupal/islandora/README/#islandora", 
            "text": "", 
            "title": "Islandora"
        }, 
        {
            "location": "/drupal/islandora/README/#introduction", 
            "text": "Islandora Fedora 4 Repository Module", 
            "title": "Introduction"
        }, 
        {
            "location": "/drupal/islandora/README/#maintainerssponsors", 
            "text": "Current maintainers:   Nick Ruest  Daniel Lamb", 
            "title": "Maintainers/Sponsors"
        }, 
        {
            "location": "/drupal/islandora/README/#development", 
            "text": "If you would like to contribute to this module, please check out our helpful  Documentation for Developers  info, as well as our  Developers  section on the Islandora.ca site.", 
            "title": "Development"
        }, 
        {
            "location": "/drupal/islandora/README/#license", 
            "text": "GPLv3", 
            "title": "License"
        }, 
        {
            "location": "/install/README/", 
            "text": "Introduction\n\n\nThe is a development environment virtual machine for the Islandora and Fedora 4 project. It should work on any operating system that supports VirtualBox and Vagrant.\n\n\nN.B. This virtual machine \nshould not\n be used in production.\n\n\nRequirements\n\n\n\n\nVirtualBox\n\n\nVagrant\n\n\n\n\nUse\n\n\nVirtualBox:\n\n\n\n\ngit clone https://github.com/islandora-labs/islandora\n\n\ncd islandora/install\n\n\nvagrant up\n\n\n\n\nDigitalOcean:\n\n\n\n\ngit clone https://github.com/islandora-labs/islandora\n\n\ncd islandora/install\n\n\nvagrant plugin install vagrant-digitalocean\n\n\nSet the following environment variables:\n\n\nDIGITALOCEAN_TOKEN\n -- Your DigitalOcean API token\n\n\nDIGITALOCEAN_KEYNAME\n -- Your DigitalOcean ssh key name\n\n\nDIGITALOCEAN_KEYPATH\n -- Path to your ssh keys that you've setup with DigitalOcean\n\n\nvagrant up --provider=digital_ocean\n\n\n\n\nAmazon:\n\n\n\n\ngit clone https://github.com/islandora-labs/islandora\n\n\ncd islandora/install\n\n\nvagrant plugin install vagrant-aws\n\n\nSet the following environment variables:\n\n\nAWS_KEY\n\n\nAWS_SECRET\n\n\nAWS_KEYNAME\n\n\nAWS_KEYPATH\n\n\nvagrant up --provider=aws\n\n\n\n\nN.B. You may not be able to connect to your AWS instance depending on VPC settings.\n\n\nConnect\n\n\nYou can connect to the machine via the browser at \nhttp://localhost:8000\n.\n\n\nThe default Drupal login details are:\n\n\n\n\nusername: admin\n\n\npassword: islandora\n\n\n\n\nMySQL:\n\n\n\n\nusername: root\n\n\npassword: islandora\n\n\n\n\nThe Fedora 4 REST API can be accessed at \nhttp://localhost:8080/fcrepo/rest\n.  It currently has authentication disabled.\n\n\nTomcat Manager:\n\n\n\n\nusername: islandora\n\n\npassword: islandora\n\n\n\n\nYou can connect to the machine via ssh: \nssh -p 2222 vagrant@localhost\n\n\nThe default VM login details are:\n\n\n\n\nusername: vagrant\n\n\npassword: vagrant\n\n\n\n\nEnvironment\n\n\n\n\nUbuntu 14.04\n\n\nDrupal 7.37\n\n\nMySQL 5.5.41\n\n\nApache 2.26\n\n\nTomcat 7.0.52\n\n\nSolr 4.10.3\n\n\nCamel 2.14.1\n\n\nFedora 4.3.0\n\n\nFedora Camel Component 4.2.0\n\n\nBlazeGraph 1.5.1\n\n\nKaraf 3.0.4\n\n\nSync 0.0.0\n\n\nIslandora 7.x-2.x\n\n\nPHP 5.5.9 \n\n\nJava 8 (Oracle)", 
            "title": "Vagrant"
        }, 
        {
            "location": "/install/README/#introduction", 
            "text": "The is a development environment virtual machine for the Islandora and Fedora 4 project. It should work on any operating system that supports VirtualBox and Vagrant.  N.B. This virtual machine  should not  be used in production.", 
            "title": "Introduction"
        }, 
        {
            "location": "/install/README/#requirements", 
            "text": "VirtualBox  Vagrant", 
            "title": "Requirements"
        }, 
        {
            "location": "/install/README/#use", 
            "text": "VirtualBox:   git clone https://github.com/islandora-labs/islandora  cd islandora/install  vagrant up   DigitalOcean:   git clone https://github.com/islandora-labs/islandora  cd islandora/install  vagrant plugin install vagrant-digitalocean  Set the following environment variables:  DIGITALOCEAN_TOKEN  -- Your DigitalOcean API token  DIGITALOCEAN_KEYNAME  -- Your DigitalOcean ssh key name  DIGITALOCEAN_KEYPATH  -- Path to your ssh keys that you've setup with DigitalOcean  vagrant up --provider=digital_ocean   Amazon:   git clone https://github.com/islandora-labs/islandora  cd islandora/install  vagrant plugin install vagrant-aws  Set the following environment variables:  AWS_KEY  AWS_SECRET  AWS_KEYNAME  AWS_KEYPATH  vagrant up --provider=aws   N.B. You may not be able to connect to your AWS instance depending on VPC settings.", 
            "title": "Use"
        }, 
        {
            "location": "/install/README/#connect", 
            "text": "You can connect to the machine via the browser at  http://localhost:8000 .  The default Drupal login details are:   username: admin  password: islandora   MySQL:   username: root  password: islandora   The Fedora 4 REST API can be accessed at  http://localhost:8080/fcrepo/rest .  It currently has authentication disabled.  Tomcat Manager:   username: islandora  password: islandora   You can connect to the machine via ssh:  ssh -p 2222 vagrant@localhost  The default VM login details are:   username: vagrant  password: vagrant", 
            "title": "Connect"
        }, 
        {
            "location": "/install/README/#environment", 
            "text": "Ubuntu 14.04  Drupal 7.37  MySQL 5.5.41  Apache 2.26  Tomcat 7.0.52  Solr 4.10.3  Camel 2.14.1  Fedora 4.3.0  Fedora Camel Component 4.2.0  BlazeGraph 1.5.1  Karaf 3.0.4  Sync 0.0.0  Islandora 7.x-2.x  PHP 5.5.9   Java 8 (Oracle)", 
            "title": "Environment"
        }, 
        {
            "location": "/contributing/contributing/", 
            "text": "Welcome!\n\n\nIf you are reading this document then you are interested in contributing to the Islandora and Fedora 4 project. All contributions are welcome: use-cases, documentation, code, patches, bug reports, feature requests, etc. You do not need to be a programmer to speak up!\n\n\nWorkflows\n\n\nFor the time being, the community around this project is centred at the \nIslandora Foundation, Fedora 4 Interest Group\n. The group meets on the fourth Friday of each month at 1PM EST. The meetings usually happen via Skype, and meeting announcements/agendas are posted to the \nIslandora community list\n and the \nIslandora developers list\n.\n\n\nUse cases\n\n\nIf you would like to submit a use case for the Islandora and Fedora integration project, please submit and issue \nhere\n using the \nUse Case template\n, assign the \"use case\" label to the issue.\n\n\nDocumentation\n\n\nYou can contribute documentation in two different ways. One way is to create an issue \nhere\n assign the \"documentation\" label to the issue. Another way is to by pull request, as same as code contribution. All documentation resides in \ndocs\n.\n\n\nRequest a new feature\n\n\nTo request a new feature you should \nopen an issue\n or create a \nuse case\n (see \nuse case\n section above), and summarize the desired functionality. Select the label \"enhancement\" if creating an issue on the project repo, and \"use case\" if creating a use case in the interest group repo.\n\n\nReport a bug\n\n\nTo report a bug you should \nopen an issue\n that summarizes the bug. Set the label to \"bug\".\n\n\nIn order to help us understand and fix the bug it would be great if you could provide us with:\n\n\n\n\nThe steps to reproduce the bug. This includes information about e.g. the Islandora version you were using along with version of stack components.\n\n\nThe expected behavior.\n\n\nThe actual, incorrect behavior.\n\n\n\n\nFeel free to search the issue queue for existing issues (aka tickets) that already describe the problem; if there is such a ticket please add your information as a comment.\n\n\nIf you want to provide a pull along with your bug report:\n\n\nThat is great! In this case please send us a pull request as described in section \nCreate a pull request\n below.\n\n\nContribute code\n\n\nBefore you set out to contribute code you will need to have completed a \nContributor License Agreement\n or be covered by a \nCorporate Contributor Licencse Agreement\n. The signed copy of the license agreement should be sent to \n\n\nIf you are interested in contributing code to Islandora but do not know where to begin:\n\n\nIn this case you should \nbrowse open issues\n, and or \nuse cases\n.\n\n\nIf you are contributing Drupal code, it must adhere to \nDrupal Coding Standards\n; Travis CI will check for this on pull requests.\n\n\nContributions to the Islandora codebase should be sent as GitHub pull requests. See section \nCreate a pull request\n below for details. If there is any problem with the pull request we can work through it using the commenting features of GitHub.\n\n\n\n\nFor \nsmall patches\n, feel free to submit pull requests directly for those patches.\n\n\n\n\nFor \nlarger code contributions\n, please use the following process. The idea behind this process is to prevent any wasted work and catch design issues early on.\n\n\n\n\nOpen an issue\n and assign it the label of \"enhancement\", if a similar issue does not exist already. If a similar issue does exist, then you may consider participating in the work on the existing issue.\n\n\nComment on the issue with your plan for implementing the issue. Explain what pieces of the codebase you are going to touch and how everything is going to fit together.\n\n\nIslandora committers will work with you on the design to make sure you are on the right track.\n\n\nImplement your issue, create a pull request (see below), and iterate from there.\n\n\n\n\n\n\n\n\nCreate a pull request\n\n\nTake a look at \nCreating a pull request\n.  In a nutshell you\nneed to:\n\n\n\n\nFork\n the Islandora GitHub repository at \nhttps://github.com/islandora-labs/islandora\n to your personal GitHub account.  See \nFork a repo\n for detailed instructions.\n\n\nCommit any changes to your fork.\n\n\nSend a \npull request\n to the Islandora GitHub repository that you forked in step 1.  If your pull request is related to an existing Islandora issue -- for instance, because you reported a bug/issue earlier -- then prefix the title of your pull request with the corresponding issue number (e.g. \nISLANDORA-123: ...\n).\n\n\n\n\nYou may want to read \nSyncing a fork\n for instructions on how to keep your fork up to date with the latest changes of the upstream (official) \nislandora\n repository.\n\n\nLicense Agreements\n\n\nThe Islandora Foundation requires that contributors complete a \nContributor License Agreement\n or be covered by a \nCorporate Contributor Licencse Agreement\n. The signed copy of the license agreement should be sent to \ncommunity@islandora.ca\n. This license is for your protection as a contributor as well as the protection of the Foundation and its users; it does not change your rights to use your own contributions for any other purpose.", 
            "title": "How to contribute"
        }, 
        {
            "location": "/contributing/contributing/#welcome", 
            "text": "If you are reading this document then you are interested in contributing to the Islandora and Fedora 4 project. All contributions are welcome: use-cases, documentation, code, patches, bug reports, feature requests, etc. You do not need to be a programmer to speak up!", 
            "title": "Welcome!"
        }, 
        {
            "location": "/contributing/contributing/#workflows", 
            "text": "For the time being, the community around this project is centred at the  Islandora Foundation, Fedora 4 Interest Group . The group meets on the fourth Friday of each month at 1PM EST. The meetings usually happen via Skype, and meeting announcements/agendas are posted to the  Islandora community list  and the  Islandora developers list .  Use cases  If you would like to submit a use case for the Islandora and Fedora integration project, please submit and issue  here  using the  Use Case template , assign the \"use case\" label to the issue.  Documentation  You can contribute documentation in two different ways. One way is to create an issue  here  assign the \"documentation\" label to the issue. Another way is to by pull request, as same as code contribution. All documentation resides in  docs .  Request a new feature  To request a new feature you should  open an issue  or create a  use case  (see  use case  section above), and summarize the desired functionality. Select the label \"enhancement\" if creating an issue on the project repo, and \"use case\" if creating a use case in the interest group repo.  Report a bug  To report a bug you should  open an issue  that summarizes the bug. Set the label to \"bug\".  In order to help us understand and fix the bug it would be great if you could provide us with:   The steps to reproduce the bug. This includes information about e.g. the Islandora version you were using along with version of stack components.  The expected behavior.  The actual, incorrect behavior.   Feel free to search the issue queue for existing issues (aka tickets) that already describe the problem; if there is such a ticket please add your information as a comment.  If you want to provide a pull along with your bug report:  That is great! In this case please send us a pull request as described in section  Create a pull request  below.  Contribute code  Before you set out to contribute code you will need to have completed a  Contributor License Agreement  or be covered by a  Corporate Contributor Licencse Agreement . The signed copy of the license agreement should be sent to   If you are interested in contributing code to Islandora but do not know where to begin:  In this case you should  browse open issues , and or  use cases .  If you are contributing Drupal code, it must adhere to  Drupal Coding Standards ; Travis CI will check for this on pull requests.  Contributions to the Islandora codebase should be sent as GitHub pull requests. See section  Create a pull request  below for details. If there is any problem with the pull request we can work through it using the commenting features of GitHub.   For  small patches , feel free to submit pull requests directly for those patches.   For  larger code contributions , please use the following process. The idea behind this process is to prevent any wasted work and catch design issues early on.   Open an issue  and assign it the label of \"enhancement\", if a similar issue does not exist already. If a similar issue does exist, then you may consider participating in the work on the existing issue.  Comment on the issue with your plan for implementing the issue. Explain what pieces of the codebase you are going to touch and how everything is going to fit together.  Islandora committers will work with you on the design to make sure you are on the right track.  Implement your issue, create a pull request (see below), and iterate from there.     Create a pull request  Take a look at  Creating a pull request .  In a nutshell you\nneed to:   Fork  the Islandora GitHub repository at  https://github.com/islandora-labs/islandora  to your personal GitHub account.  See  Fork a repo  for detailed instructions.  Commit any changes to your fork.  Send a  pull request  to the Islandora GitHub repository that you forked in step 1.  If your pull request is related to an existing Islandora issue -- for instance, because you reported a bug/issue earlier -- then prefix the title of your pull request with the corresponding issue number (e.g.  ISLANDORA-123: ... ).   You may want to read  Syncing a fork  for instructions on how to keep your fork up to date with the latest changes of the upstream (official)  islandora  repository.", 
            "title": "Workflows"
        }, 
        {
            "location": "/contributing/contributing/#license-agreements", 
            "text": "The Islandora Foundation requires that contributors complete a  Contributor License Agreement  or be covered by a  Corporate Contributor Licencse Agreement . The signed copy of the license agreement should be sent to  community@islandora.ca . This license is for your protection as a contributor as well as the protection of the Foundation and its users; it does not change your rights to use your own contributions for any other purpose.", 
            "title": "License Agreements"
        }, 
        {
            "location": "/contributing/committers/", 
            "text": "Islandora Committers (7.x-2.x)\n\n\nIslandora is open source and released under GPLv3. The software and associated documentation is developed collectively by a community of contributors and committers. All interested community members are encouraged to contribute to the project. Contributors who demonstrate sustained engagement with the project through quality participation in meetings, mailing lists, documentation and code updates can be nominated by existing committers to also become a committers. It should be emphasized that committers need not be limited to software developers. Community members with skills in documentation and testing, for example, can also be committers.\n\n\nRights\n\n\nCommitters share the following rights:\n\n\n\n\nWrite access to the codebase\n\n\nNomination privileges of new committers\n\n\nRelease management privileges\n\n\nBinding votes on procedural, code modification, and release issues\n\n\nAccess to the private committers mailing list\n\n\n\n\nResponsibilities\n\n\nCommitters share the following responsibilities:\n\n\n\n\nMonitor and respond to project mailing lists\n\n\nAttend project and technical meetings\n\n\nMonitor and vet bug-tracker issues\n\n\nReview and commit code contributions\n\n\nEnsure code contributions are properly licensed\n\n\nGuide and mentor new committers\n\n\n\n\nCommitters\n\n\nThe following is an alphabetized list of the current Islandora committers:\n\n\n\n\n\n\n\n\nName\n\n\nOrganization\n\n\n\n\n\n\n\n\n\n\nAaron Coburn\n\n\nAmherst College\n\n\n\n\n\n\nDanny Lamb\n\n\ndiscoverygarden inc.\n\n\n\n\n\n\nDiego Pino\n\n\nREUNA\n\n\n\n\n\n\nNick Ruest\n\n\nYork University\n\n\n\n\n\n\nJared Whiklo\n\n\nUniversity of Manitoba\n\n\n\n\n\n\n\n\nGuidelines for assessing new candidates for committership\n\n\nWhen a contributor is nominated to become a committer, the following guidelines should be used by existing committers to evaluate the nominee's suitability.\n\n\nAbility to work cooperatively with peers\n\n\nHow do we evaluate? By the interactions they have through mail. By how they respond to criticism. By how they participate in decision-making process.\n\n\nAbility to be a mentor\n\n\nHow do we evaluate? By the interactions they have through mail. By how clear they are and how willing they are to point at appropriate background materials (or even create them).\n\n\nCommunity\n\n\nHow do we evaluate? By the interactions they have through mail. Do they help to answer questions raised on the mailing list; do they show a helpful attitude and respect for other's ideas.\n\n\nCommittment\n\n\nHow do we evaluate? By time, by sticking through tough issues, by helping on not-so-fun tasks as well.\n\n\nPersonal skill/ability\n\n\nHow do we evaluate? A solid general understanding of the project. Quality of discussion in mail. Patches (where applicable) easy to apply with only a cursory review.\n\n\nNew Committer Process\n\n\nThis section describes the process for handling the voting of a new committer.\n\n\nSummary:\n\n\n\n\nCall a vote (\ntemplates/committerVote.txt\n)\n\n\nClose a vote (\ntemplates/closeCommitterVote.txt\n)\n\n\nInvite the new committer (\ntemplates/committerInvite.txt\n), if no CLA is on file (\ntemplates/committerInviteCLA.txt\n)\n\n\n\n\nIf they accept, then do:\n\n\n\n\nAdd to Committer team of GitHub Islandora organization\n\n\nAdd to Committer team of GitHub Islandora-Labs organization\n\n\nAdd to islandora-committers google-group\n\n\nAdd to committers wiki page: Islandora Committers \n\n\nAnnounce the new committer (\ntemplate/committerAnnounce.txt\n)", 
            "title": "Committers"
        }, 
        {
            "location": "/contributing/committers/#islandora-committers-7x-2x", 
            "text": "Islandora is open source and released under GPLv3. The software and associated documentation is developed collectively by a community of contributors and committers. All interested community members are encouraged to contribute to the project. Contributors who demonstrate sustained engagement with the project through quality participation in meetings, mailing lists, documentation and code updates can be nominated by existing committers to also become a committers. It should be emphasized that committers need not be limited to software developers. Community members with skills in documentation and testing, for example, can also be committers.", 
            "title": "Islandora Committers (7.x-2.x)"
        }, 
        {
            "location": "/contributing/committers/#rights", 
            "text": "Committers share the following rights:   Write access to the codebase  Nomination privileges of new committers  Release management privileges  Binding votes on procedural, code modification, and release issues  Access to the private committers mailing list", 
            "title": "Rights"
        }, 
        {
            "location": "/contributing/committers/#responsibilities", 
            "text": "Committers share the following responsibilities:   Monitor and respond to project mailing lists  Attend project and technical meetings  Monitor and vet bug-tracker issues  Review and commit code contributions  Ensure code contributions are properly licensed  Guide and mentor new committers", 
            "title": "Responsibilities"
        }, 
        {
            "location": "/contributing/committers/#committers", 
            "text": "The following is an alphabetized list of the current Islandora committers:     Name  Organization      Aaron Coburn  Amherst College    Danny Lamb  discoverygarden inc.    Diego Pino  REUNA    Nick Ruest  York University    Jared Whiklo  University of Manitoba", 
            "title": "Committers"
        }, 
        {
            "location": "/contributing/committers/#guidelines-for-assessing-new-candidates-for-committership", 
            "text": "When a contributor is nominated to become a committer, the following guidelines should be used by existing committers to evaluate the nominee's suitability.  Ability to work cooperatively with peers  How do we evaluate? By the interactions they have through mail. By how they respond to criticism. By how they participate in decision-making process.  Ability to be a mentor  How do we evaluate? By the interactions they have through mail. By how clear they are and how willing they are to point at appropriate background materials (or even create them).  Community  How do we evaluate? By the interactions they have through mail. Do they help to answer questions raised on the mailing list; do they show a helpful attitude and respect for other's ideas.  Committment  How do we evaluate? By time, by sticking through tough issues, by helping on not-so-fun tasks as well.  Personal skill/ability  How do we evaluate? A solid general understanding of the project. Quality of discussion in mail. Patches (where applicable) easy to apply with only a cursory review.", 
            "title": "Guidelines for assessing new candidates for committership"
        }, 
        {
            "location": "/contributing/committers/#new-committer-process", 
            "text": "This section describes the process for handling the voting of a new committer.  Summary:   Call a vote ( templates/committerVote.txt )  Close a vote ( templates/closeCommitterVote.txt )  Invite the new committer ( templates/committerInvite.txt ), if no CLA is on file ( templates/committerInviteCLA.txt )   If they accept, then do:   Add to Committer team of GitHub Islandora organization  Add to Committer team of GitHub Islandora-Labs organization  Add to islandora-committers google-group  Add to committers wiki page: Islandora Committers   Announce the new committer ( template/committerAnnounce.txt )", 
            "title": "New Committer Process"
        }, 
        {
            "location": "/contributing/hacking-on-islandora/", 
            "text": "Hacking on Islandora\n\n\nOne of the goals of the 7.x-2.x project is to lower the barrier to entry for working on and with Islandora.  A shared, consistent environment amongst developers is one of the best ways to do this.  To get started hacking on Islandora with your very own development environment, all you need to do follow these steps:\n\n\n\n\nInstall \nVirtualBox\n\n\nInstall \nVagrant\n\n\nFork \nIslandora 7.x-2.x\n and clone it onto your machine using the 7.x-2.x branch\n\n\n\n\n~ $ git clone -b 7.x-2.x https://github.com/your_github_name/islandora.git\n\n\n\n\nOR\nIf you're already a developer and have previously forked and cloned Islandora, just add the 7.x-2.x branch from Islandora-Labs to your existing checkout:\n\n\n~ $ cd /path/to/islandora\n/path/to/islandora $ git remote add labs https://github.com/Islandora-Labs/islandora.git\n/path/to/islandora $ git fetch labs\n/path/to/islandora $ git checkout 7.x-2.x\n\n\n\n\n\n\nNavigate into the \ninstall\n directory of your 7.x-2.x checkout\n\n\n\n\n~ $ cd /path/to/islandora/install\n\n\n\n\n\n\nBuild your vm using \nvagrant up\n\n\n\n\n/path/to/islandora/install $ vagrant up\n\n\n\n\nSit back and relax as your development environment is created for you!  In a few minutes you\u2019ll have a brand new Islandora install that you can use and abuse as much as you\u2019d like.  If you ever ruin your environment (trust me, it\u2019ll happen), you can always destroy it and bring up a new one at any time.\n\n\n~ $ cd /path/to/islandora/install\n/path/to/islandora/install $ vagrant destroy\n/path/to/islandora/install $ vagrant up\n\n\n\n\nLogging in to your development environment\n\n\nYou can ssh into your development environment at any time by doing the following:\n\n\n~ $ cd /path/to/islandora/install\n/path/to/islandora/install $ vagrant ssh\nWelcome to Ubuntu 14.04.2 LTS (GNU/Linux 3.13.0-45-generic x86_64)\n\n * Documentation:  https://help.ubuntu.com/\n\n System information disabled due to load higher than 1.0\n\n  Get cloud support with Ubuntu Advantage Cloud Guest:\n    http://www.ubuntu.com/business/services/cloud\n\n\nLast login: Fri Jul 17 13:51:38 2015 from 10.0.2.2\nvagrant@islandora:~$\n\n\n\n\nYou'll be logged in as the vagrant user, with your github repo in your home directory.\n\n\nPort Forwarding\n\n\nMany ports are forwarded from your virtual machine to your personal computer, so care must be taken that there are no conflicts. Here's a list of all the ports that get forwarded:\n- Apache: 80 -\n 8000\n- Tomcat: 8080 -\n 8080\n- Karaf: 8181 -\n 8181\n- MySQL: 3306 -\n 3306\n\n\nAt any point in time, you can edit how the ports are forwarded by clicking on the Port Forwarding button in your virtual machine's Network settings in Virtualbox.\n\n\n\n\nYou can also edit the section of the Vagrantfile that controls the default port forwarding, which looks something like this:\n\n\n  config.vm.network :forwarded_port, guest: 8080, host: 8080 # Tomcat\n  config.vm.network :forwarded_port, guest: 8181, host: 8181 # Karaf\n  config.vm.network :forwarded_port, guest: 3306, host: 3306 # MySQL\n  config.vm.network :forwarded_port, guest: 5432, host: 5432 # PostgreSQL\n  config.vm.network :forwarded_port, guest: 80, host: 8000 # Apache\n\n\n\n\nImportant locations\n\n\n\n\nDrupal: \n/var/www/html/drupal\n\n\nApache Logs: \n/var/log/apache2/error.log\n\n\nTomcat: \n/var/lib/tomcat7\n\n\nLogs: \n/var/log/tomcat7\n\n\nFedora 4: \n/var/lib/tomcat7/webapps/fcrepo\n\n\nSolr: \n/var/lib/tomcat7/webapps/solr\n\n\nBlazeGraph: \n/var/lib/tomcat7/webapps/bigdata\n\n\nFcrepoCamelToolbox: \n/var/lib/tomcat7/webapps/fcrepo-camel-toolbox\n\n\n\n\n\n\nKaraf: \n/opt/karaf\n\n\nLogs: \n/opt/karaf/data/log\n\n\nConfiguration: \n/opt/karaf/etc\n\n\n\n\n\n\nIslandora: \n/home/vagrant/islandora\n\n\n\n\nShared folders\n\n\nBy default, the vagrant environment uses a shared folder between your computer and the virtual machine it has created.  This folder points to your Islandora github repo on your computer and is available at \n~/islandora\n (\n/home/vagrant/islandora\n) on the virtual machine.  On top of that, in Drupal, \nsites/all/modules/islandora\n is a symlink pointing to \n~/islandora/drupal\n.  This has a few profound consequences:\n- You can use the IDE you're comfortable with on your own machine, without the need to scp/rsync code over to the development environment\n- Changes to Drupal module code are automatically reflected on your Drupal site since that code is symlinked (although you may need to be ssh'd in to \ndrush cc all\n on occassion)\n- When testing the Vagrant install after adding changes, the code from your fork and your branch on your computer is used to generate the virtual machine\n\n\nCompiling Camel Bundles\n\n\nDespite being nothing but Blueprint xml files, Camel projects still have to be compiled using Maven.  The \ninstall\n directive is the default, so all one has to do is navigate to the appropriate directory and issue a \nmvn\n in the command line.  For example, to compile the collection service:\n\n\n~ $ cd /path/to/islandora/camel/services/collection-service\n/path/to/islandora/camel/serices/collection-service $ mvn\n\n\n\n\nThe only caveat here is that this is best done on the virtual machine itself.  While your virtual machine was being built, it's Karaf installation was set to monitor the vagrant user's Maven repository for changes, and autodeploy in response to \nmvn install\n.  So while you can always run Maven from your own machine, it will get installed in your personal Maven repository on your machine.  So to take advantage of the auto-redeploy capabilities of Karaf, you need to do this as the vagrant user.\n\n\nIf for any reason, you have to shutdown or restart Karaf, it will cease to monitor the vagrant user's Maven repository.  In order to turn this back on, you'll have to issue the appropriate commands to get monitoring working again.  The easiest way to do this is to re-run the karaf script the install process uses to set up monitoring by executing \n/opt/karaf/bin/client \n ~/islandora/install/karaf/monitor.script\n.", 
            "title": "Hacking on Islandora"
        }, 
        {
            "location": "/contributing/hacking-on-islandora/#hacking-on-islandora", 
            "text": "One of the goals of the 7.x-2.x project is to lower the barrier to entry for working on and with Islandora.  A shared, consistent environment amongst developers is one of the best ways to do this.  To get started hacking on Islandora with your very own development environment, all you need to do follow these steps:   Install  VirtualBox  Install  Vagrant  Fork  Islandora 7.x-2.x  and clone it onto your machine using the 7.x-2.x branch   ~ $ git clone -b 7.x-2.x https://github.com/your_github_name/islandora.git  OR\nIf you're already a developer and have previously forked and cloned Islandora, just add the 7.x-2.x branch from Islandora-Labs to your existing checkout:  ~ $ cd /path/to/islandora\n/path/to/islandora $ git remote add labs https://github.com/Islandora-Labs/islandora.git\n/path/to/islandora $ git fetch labs\n/path/to/islandora $ git checkout 7.x-2.x   Navigate into the  install  directory of your 7.x-2.x checkout   ~ $ cd /path/to/islandora/install   Build your vm using  vagrant up   /path/to/islandora/install $ vagrant up  Sit back and relax as your development environment is created for you!  In a few minutes you\u2019ll have a brand new Islandora install that you can use and abuse as much as you\u2019d like.  If you ever ruin your environment (trust me, it\u2019ll happen), you can always destroy it and bring up a new one at any time.  ~ $ cd /path/to/islandora/install\n/path/to/islandora/install $ vagrant destroy\n/path/to/islandora/install $ vagrant up", 
            "title": "Hacking on Islandora"
        }, 
        {
            "location": "/contributing/hacking-on-islandora/#logging-in-to-your-development-environment", 
            "text": "You can ssh into your development environment at any time by doing the following:  ~ $ cd /path/to/islandora/install\n/path/to/islandora/install $ vagrant ssh\nWelcome to Ubuntu 14.04.2 LTS (GNU/Linux 3.13.0-45-generic x86_64)\n\n * Documentation:  https://help.ubuntu.com/\n\n System information disabled due to load higher than 1.0\n\n  Get cloud support with Ubuntu Advantage Cloud Guest:\n    http://www.ubuntu.com/business/services/cloud\n\n\nLast login: Fri Jul 17 13:51:38 2015 from 10.0.2.2\nvagrant@islandora:~$  You'll be logged in as the vagrant user, with your github repo in your home directory.", 
            "title": "Logging in to your development environment"
        }, 
        {
            "location": "/contributing/hacking-on-islandora/#port-forwarding", 
            "text": "Many ports are forwarded from your virtual machine to your personal computer, so care must be taken that there are no conflicts. Here's a list of all the ports that get forwarded:\n- Apache: 80 -  8000\n- Tomcat: 8080 -  8080\n- Karaf: 8181 -  8181\n- MySQL: 3306 -  3306  At any point in time, you can edit how the ports are forwarded by clicking on the Port Forwarding button in your virtual machine's Network settings in Virtualbox.   You can also edit the section of the Vagrantfile that controls the default port forwarding, which looks something like this:    config.vm.network :forwarded_port, guest: 8080, host: 8080 # Tomcat\n  config.vm.network :forwarded_port, guest: 8181, host: 8181 # Karaf\n  config.vm.network :forwarded_port, guest: 3306, host: 3306 # MySQL\n  config.vm.network :forwarded_port, guest: 5432, host: 5432 # PostgreSQL\n  config.vm.network :forwarded_port, guest: 80, host: 8000 # Apache", 
            "title": "Port Forwarding"
        }, 
        {
            "location": "/contributing/hacking-on-islandora/#important-locations", 
            "text": "Drupal:  /var/www/html/drupal  Apache Logs:  /var/log/apache2/error.log  Tomcat:  /var/lib/tomcat7  Logs:  /var/log/tomcat7  Fedora 4:  /var/lib/tomcat7/webapps/fcrepo  Solr:  /var/lib/tomcat7/webapps/solr  BlazeGraph:  /var/lib/tomcat7/webapps/bigdata  FcrepoCamelToolbox:  /var/lib/tomcat7/webapps/fcrepo-camel-toolbox    Karaf:  /opt/karaf  Logs:  /opt/karaf/data/log  Configuration:  /opt/karaf/etc    Islandora:  /home/vagrant/islandora", 
            "title": "Important locations"
        }, 
        {
            "location": "/contributing/hacking-on-islandora/#shared-folders", 
            "text": "By default, the vagrant environment uses a shared folder between your computer and the virtual machine it has created.  This folder points to your Islandora github repo on your computer and is available at  ~/islandora  ( /home/vagrant/islandora ) on the virtual machine.  On top of that, in Drupal,  sites/all/modules/islandora  is a symlink pointing to  ~/islandora/drupal .  This has a few profound consequences:\n- You can use the IDE you're comfortable with on your own machine, without the need to scp/rsync code over to the development environment\n- Changes to Drupal module code are automatically reflected on your Drupal site since that code is symlinked (although you may need to be ssh'd in to  drush cc all  on occassion)\n- When testing the Vagrant install after adding changes, the code from your fork and your branch on your computer is used to generate the virtual machine", 
            "title": "Shared folders"
        }, 
        {
            "location": "/contributing/hacking-on-islandora/#compiling-camel-bundles", 
            "text": "Despite being nothing but Blueprint xml files, Camel projects still have to be compiled using Maven.  The  install  directive is the default, so all one has to do is navigate to the appropriate directory and issue a  mvn  in the command line.  For example, to compile the collection service:  ~ $ cd /path/to/islandora/camel/services/collection-service\n/path/to/islandora/camel/serices/collection-service $ mvn  The only caveat here is that this is best done on the virtual machine itself.  While your virtual machine was being built, it's Karaf installation was set to monitor the vagrant user's Maven repository for changes, and autodeploy in response to  mvn install .  So while you can always run Maven from your own machine, it will get installed in your personal Maven repository on your machine.  So to take advantage of the auto-redeploy capabilities of Karaf, you need to do this as the vagrant user.  If for any reason, you have to shutdown or restart Karaf, it will cease to monitor the vagrant user's Maven repository.  In order to turn this back on, you'll have to issue the appropriate commands to get monitoring working again.  The easiest way to do this is to re-run the karaf script the install process uses to set up monitoring by executing  /opt/karaf/bin/client   ~/islandora/install/karaf/monitor.script .", 
            "title": "Compiling Camel Bundles"
        }, 
        {
            "location": "/technical-documentation/architecture/", 
            "text": "Architecture\n\n\nOverview\n\n\nIslandora 7.x-2.x is a large and comprehensive technology stack that encompasses a Fedora 4 repository, a Drupal CMS, and an Apache Camel based middleware layer to integrate the two along with all of the other complementary technologies required for digital asset management and preservation (full text search engine, triplestore, command line tools, etc...).  Here is a (somewhat) exhaustive list of the technologies in an Islandora stack:\n\n\n\n\nFedora 4 (deployed in a servlet container such as Tomcat or Jetty)\n\n\nDrupal 7 (deployed in an Apache 2 web server), which includes:\n\n\nA relational database such as MySQL or PostgreSQL\n\n\nSeveral third-party Drupal modules from drupal.org\n\n\nSeveral Islandora Drupal modules\n\n\nSeveral JavaScript viewers for rendering content (PDF.js, Video.js, etc...)\n\n\n\n\n\n\nApache Solr (deployed in either an OSGi or servlet container)\n\n\nBlazegraph (or the triple store of your choice, most likely deployed in a servlet container)\n\n\nApache Camel based middleware (all deployed in an OSGi container), which includes:\n\n\nIslandora Sync - Asynchronous and event driven software to generate derivatives and align Drupal fields with Fedora RDF\n\n\nIslandora Services - RESTful web services exposed through the OSGi container that accept Drupal information and manipulate Fedora resources\n\n\nFedora Messaging Application Toolbox - Indexes Fedora content in the triplestore\n\n\n\n\n\n\nIslandora Commands - A command-line PHP script utilized by Services and Sync to provide processing capabilities beyond what can be done in a Blueprint XML file\n\n\nSeveral command line tools for derivative generation:\n\n\nImageMagick - For image manipulation\n\n\nTesseract - For OCR generation\n\n\nFFmpeg - For video processing\n\n\nLAME - For audio processing\n\n\nFITS - For technical metadata generation\n\n\nand much much more as functionality requires...\n\n\n\n\n\n\n\n\nHere's an image representing the various components of the stack and how they interoperate:\n\n\nScalability\n\n\nOne of the main goals with the 7.x-2.x project is to allow for horizontal scalability, and the architecture of the stack has been designed with this in mind.  No assumptions are made requiring any of the components to be on the same machine, so it can all be split apart onto multiple resources.  Most of the components also provide some sort of horizontal scalability through sharding, replication, or both.  If desired, the following components can be clustered through configuration and their respective installation procedures:\n\n\n\n\nFedora 4\n\n\nFedora 4 sits on top of Modeshape, which provides both replication and sharding capabilities.  See https://docs.jboss.org/author/display/MODE/Clustering\n\n\n\n\n\n\nApache Solr\n\n\nSolr indices can be sharded to allow for distributed searching. See https://cwiki.apache.org/confluence/display/solr/Distributed+Search+with+Index+Sharding\n\n\n\n\n\n\nBlazegraph\n\n\nBlazegraph was chosen as the \u2018default\u2019 triplestore for Islandora because it is well known to provide both sharding and replication capabilities.  See https://wiki.blazegraph.com/wiki/index.php/HAJournalServer and  https://wiki.blazegraph.com/wiki/index.php/ClusterSetupGuide\n\n\n\n\n\n\nDrupal\n\n\nThe Drupal front end can be scaled out by having multiple Apache webservers behind a load balancer\n\n\nScaling the relational database (while difficult) is possible, though typical vertical scaling is the first approach taken\n\n\n\n\n\n\n\n\nWhile not yet implemented, it will be possible to scale the Camel based middleware both the web services and the sync based listeners through the use of Camel's load balancer design pattern. See https://camel.apache.org/load-balancer.html", 
            "title": "Architecture"
        }, 
        {
            "location": "/technical-documentation/architecture/#architecture", 
            "text": "", 
            "title": "Architecture"
        }, 
        {
            "location": "/technical-documentation/architecture/#overview", 
            "text": "Islandora 7.x-2.x is a large and comprehensive technology stack that encompasses a Fedora 4 repository, a Drupal CMS, and an Apache Camel based middleware layer to integrate the two along with all of the other complementary technologies required for digital asset management and preservation (full text search engine, triplestore, command line tools, etc...).  Here is a (somewhat) exhaustive list of the technologies in an Islandora stack:   Fedora 4 (deployed in a servlet container such as Tomcat or Jetty)  Drupal 7 (deployed in an Apache 2 web server), which includes:  A relational database such as MySQL or PostgreSQL  Several third-party Drupal modules from drupal.org  Several Islandora Drupal modules  Several JavaScript viewers for rendering content (PDF.js, Video.js, etc...)    Apache Solr (deployed in either an OSGi or servlet container)  Blazegraph (or the triple store of your choice, most likely deployed in a servlet container)  Apache Camel based middleware (all deployed in an OSGi container), which includes:  Islandora Sync - Asynchronous and event driven software to generate derivatives and align Drupal fields with Fedora RDF  Islandora Services - RESTful web services exposed through the OSGi container that accept Drupal information and manipulate Fedora resources  Fedora Messaging Application Toolbox - Indexes Fedora content in the triplestore    Islandora Commands - A command-line PHP script utilized by Services and Sync to provide processing capabilities beyond what can be done in a Blueprint XML file  Several command line tools for derivative generation:  ImageMagick - For image manipulation  Tesseract - For OCR generation  FFmpeg - For video processing  LAME - For audio processing  FITS - For technical metadata generation  and much much more as functionality requires...     Here's an image representing the various components of the stack and how they interoperate:", 
            "title": "Overview"
        }, 
        {
            "location": "/technical-documentation/architecture/#scalability", 
            "text": "One of the main goals with the 7.x-2.x project is to allow for horizontal scalability, and the architecture of the stack has been designed with this in mind.  No assumptions are made requiring any of the components to be on the same machine, so it can all be split apart onto multiple resources.  Most of the components also provide some sort of horizontal scalability through sharding, replication, or both.  If desired, the following components can be clustered through configuration and their respective installation procedures:   Fedora 4  Fedora 4 sits on top of Modeshape, which provides both replication and sharding capabilities.  See https://docs.jboss.org/author/display/MODE/Clustering    Apache Solr  Solr indices can be sharded to allow for distributed searching. See https://cwiki.apache.org/confluence/display/solr/Distributed+Search+with+Index+Sharding    Blazegraph  Blazegraph was chosen as the \u2018default\u2019 triplestore for Islandora because it is well known to provide both sharding and replication capabilities.  See https://wiki.blazegraph.com/wiki/index.php/HAJournalServer and  https://wiki.blazegraph.com/wiki/index.php/ClusterSetupGuide    Drupal  The Drupal front end can be scaled out by having multiple Apache webservers behind a load balancer  Scaling the relational database (while difficult) is possible, though typical vertical scaling is the first approach taken     While not yet implemented, it will be possible to scale the Camel based middleware both the web services and the sync based listeners through the use of Camel's load balancer design pattern. See https://camel.apache.org/load-balancer.html", 
            "title": "Scalability"
        }, 
        {
            "location": "/technical-documentation/services/", 
            "text": "Middleware Services\n\n\nIslandora middleware services utilize the Fedora 4 REST API and the Drupal Services module to create an API for the majority of interactions between the two systems. The Drupal uuid will be used to identify \npcdm:Objects\n (and \npcdm:Files\n thereof) when using these services.  The breakdown of services is as follows:\n\n\n\n\nThere will be a services to provide CRUD operations for \npcdm:Collections\n, \npcdm:Objects\n and \npcdm:Files\n.\n\n\nThere will be a service to provide creational operations using zip content based on content model.  For example:\n\n\nPOST\n a zip file containing book pages Islandora Book Batch format to create an entire book object (with pages and derivatives processed asynchronously, of course).\n\n\nThere will be services per derivative type to perform operations based on the node UUID of the parent.\n\n\nPATCH\n to generate a new thumbnail for a \npcdm:Object\n.\n\n\n\n\nFor more information on PCDM, please see \nthis\n page.\n\n\nCollection Service\n\n\nUsed for manipulating \npcdm:Collections\n. Essentially wraps the Fedora 4 API requests for manipulating a Container identified by Drupal uuid.  Node content in \napplication/json\n format is massaged into \napplication/sparql-update\n format in order to interact with Fedora.\n\n\nEndpoint\n: http://localhost:8080/islandora-services/collection/\n\n\nActions\n:\n\n\n\n\n\n\nGET\n http://localhost:8080/islandora-services/collection/{uuid}\n\n\n\n\nReturns \napplication/ld+json\n RDF metadata for the \npcdm:Collection\n identified by the supplied Drupal uuid.\n\n\n\n\n\n\n\n\nPOST\n http://localhost:8080/islandora-services/collection/\n\n\n\n\nAccepts \napplication/json\n serialized node data.\n\n\nCreates a \npcdm:Collection\n in Fedora using the Drupal node data, associating the newly minted path with the node's uuid. If \nfedora:hasParent\n is supplied supplied in \nPOST\n data, that location will be used to create the new object as a child.\n\n\n\n\n\n\n\n\nPUT\n http://localhost:8080/islandora-services/collection/{uuid}\n\n\n\n\nAccepts \napplication/json\n serialized node data.\n\n\nUpdates metadata in Fedora for the \npcdm:Collection\n associated with the provided Drupal uuid.\n\n\n\n\n\n\n\n\nDELETE\n http://localhost:8080/islandora-services/collection/{uuid}\n\n\n\n\nDeletes the \npcdm:Collection\n in Fedora associated with provided Drupal uuid.\n\n\n\n\n\n\n\n\nObject Service\n\n\nUsed for manipulating \npcdm:Objects\n. Essentially wraps the Fedora 4 API requests for manipulating a Container identified by Drupal uuid.  Node content in \napplication/json\n format is massaged into \napplication/sparql-update\n format in order to interact with Fedora.  Certain field values, as well as other files sent along in the message will be converted into \npcdm:Files\n and attached to the newly created \npcdm:Object\n.\n\n\nEndpoint\n: http://localhost:8080/islandora-services/object/\n\n\nActions\n:\n\n\n\n\n\n\nGET\n http://localhost:8080/islandora-services/object/{uuid}\n\n\n\n\nReturns \napplication/ld+json\n RDF metadata for the \npcdm:Object\n identified by the supplied Drupal uuid.\n\n\n\n\n\n\n\n\nPOST\n http://localhost:8080/islandora-services/object/\n\n\n\n\nAccepts \nmultipart/form-data\n messages.  One \"part\" of the message will be the JSON serialized Drupal node content.  Other \"parts\" will be files used to create \npcdm:Files\n for the \npcdm:Object\n.\n\n\nCreates a \npcdm:Object\n in Fedora using the Drupal node data, associating the newly minted path with the node's uuid. If \nfedora:hasParent\n is supplied supplied in \nPOST\n data, that location will be used to create the new object as a child.  Certain field values as well as any other files contained in the message will be used to create \npcdm:Files\n associated with this \npcdm:Object\n.\n\n\n\n\n\n\n\n\nPUT\n http://localhost:8080/islandora-services/object/{uuid}\n\n\n\n\nAccepts \nmultipart/form-data\n messages.  One \"part\" of the message will be the JSON serialized Drupal node content.  Other \"parts\" will be files used to create \npcdm:Files\n for the \npcdm:Object\n.\n\n\nUpdates metadata in Fedora for the \npcdm:Object\n associated with the provided Drupal uuid. Certain field values as well as any other files contained in the message will be used to update \npcdm:Files\n associated with this \npcdm:Object\n.\n\n\n\n\n\n\n\n\nDELETE\n http://localhost:8080/islandora-services/object/{uuid}\n\n\n\n\nDeletes the \npcdm:Object\n in Fedora associated with provided Drupal uuid. Also deletes any \npcdm:Files\n directly contained by the \npcdm:Object\n.\n\n\n\n\n\n\n\n\nFile Services\n\n\nUsed for manipulating \npcdm:Files\n associated with a \npcdm:Object\n. They will essentially wrap the Fedora 4 API requests for manipulating a \nNonRDFSourceDescription\n identified by \ndcterms:title\n (obj, mods, dc, etc...) and its parent's Drupal uuid. There will be seperate implementations for each applicable \ndcterms:title\n, though each service will abide by a common conventions and behavior. This allows implementations to vary independently based on file type (technical metadata, descriptive metadata, archival binary), while allowing for new services to be easily added over time.\n\n\nGeneral Convention\n\n\nEndpoint\n: http://localhost:8080/islandora-services/file/{uuid}/{dcterms:title}\n\nActions\n:\n\n\n\n\n\n\nGET\n http://localhost:8080/islandora-services/file/{uuid}/{dcterms:title}\n\n\n\n\nRetrieves the \npcdm:File\n content belonging to the \npcdm:Object\n. The \npcdm:File\n is identified by \ndcterms:title\n and its parents Drupal uuid.\n\n\n\n\n\n\n\n\nPOST\n http://localhost:8080/islandora-services/file/{uuid}/{dcterms:title}\n\n\n\n\nAdds a \npcdm:File\n to the \npcdm:Object\n identified by the provided Drupal uuid. The file's content will be set using the \nPOST\n content, and the provided \ndcterms:title\n will be given to the newly created \npcdm:File\n.\n\n\n\n\n\n\n\n\nPUT\n http://localhost:8080/islandora-services/file/{uuid}/{dcterms:title}\n\n\n\n\nUpdates the \npcdm:File\n with \ndcterms:title\n owned by the \npcdm:Object\n identified by the provided Drupal uuid. The file's content will be set using the \nPUT\n content.\n\n\n\n\n\n\n\n\nDELETE\n http://localhost:8080/islandora-services/file/{uuid}/{dcterms:title}\n\n\n\n\nDeletes the \npcdm:File\n with \ndcterms:title\n owned by the \npcdm:Object\n identified by the provided Drupal uuid.\n\n\n\n\n\n\n\n\nExample Services\n\n\nSome example services would include:\n\n\n\n\nhttp://localhost:8080/islandora/services/file/{uuid}/obj\n\n\nhttp://localhost:8080/islandora/services/file/{uuid}/dc\n\n\nhttp://localhost:8080/islandora/services/file/{uuid}/mods\n\n\nhttp://localhost:8080/islandora/services/file/{uuid}/fits\n\n\n\n\nImplementations would differ in the sense that accept headers would be different, and data may have to be transformed differently before being inserted as the \npcdm:File\n.\n\n\nDerivative Services\n\n\nDerivatives (while generally dealt with through Islandora Sync) may need to be dealt with manually, so services will be provided to handle all the common derivatives types an Islandora installation may require. Much like the file services, a general convention on naming and behavior will be enforced, but seperate implementations will be provided. This will allow for maximum flexibility and encourage new services to be easily added and contributed. \n\n\nGeneral Convention\n\n\nEndpoint\n: http://localhost:8080/islandora-services/derivative/{uuid}/{type}\n\nActions\n:\n\n\n\n\n\n\nGET\n http://localhost:8080/islandora-services/derivative/{uuid}/{type}\n\n\n\n\nRetrieves the derivative belonging to the \npcdm:Object\n or \npcdm:Collection\n. The derivative is identified by its type and its parents Drupal uuid.\n\n\n\n\n\n\n\n\nPOST\n http://localhost:8080/islandora-services/derivative/{uuid}/{type}\n\n\n\n\nAdds a derivative to the \npcdm:Object\n or \npcdm:Collection\n identified by the provided Drupal uuid. The derivative's content will be set using the \nPOST\n content. The result will reside in either Fedora or Drupal, depending on the derivative.\n\n\n\n\n\n\n\n\nPUT\n http://localhost:8080/islandora-services/derivative/{uuid}/{type}\n\n\n\n\nUpdates the derviative for a \npcdm:Object\n or \npcdm:Collection\n identified by the provided Drupal uuid. The derivative's content will be set using the \nPUT\n content. The result will reside in either Fedora or Drupal, depending on the derivative.\n\n\n\n\n\n\n\n\nPATCH\n http://localhost:8080/islandora-services/derivative/{uuid}/{type}\n\n\n\n\nAsynchronously regenerates the derivative for a \npcdm:Object\n or \npcdm:Collection\n identified by the provided Drupal uuid. The result will reside in either Fedora or Drupal, depending on the derivative.\n\n\n\n\n\n\n\n\nDELETE\n http://localhost:8080/islandora-services/derivative/{uuid}/{type}\n\n\n\n\nDeletes the derivative for the \npcdm:Object\n or \npcdm:Collection\n identified by the provided Drupal uuid. The derivative will be removed from either Fedora or Drupal, depending on the derivative.\n\n\n\n\n\n\n\n\nExample Services\n\n\nSome example services would include:\n\n\n\n\nhttp://localhost:8080/islandora/services/derivative/{uuid}/tn\n\n\nhttp://localhost:8080/islandora/services/derivative/{uuid}/medium_size\n\n\nhttp://localhost:8080/islandora/services/derivative/{uuid}/jp2\n\n\nhttp://localhost:8080/islandora/services/derivative/{uuid}/techmd\n\n\nhttp://localhost:8080/islandora/services/derivative/{uuid}/mp3\n\n\nhttp://localhost:8080/islandora/services/derivative/{uuid}/mp4\n\n\nhttp://localhost:8080/islandora/services/derivative/{uuid}/mkv\n\n\n\n\nImplementations would differ in the sense that different derivatives will be created from varying sources using varying programs. Also, display derivatives should reside in Drupal (TN, JP2, etc...) while technical metadata should reside in Fedora.  Within Drupal, different derivatives will reside as different field types.\n\n\nZip Ingest Services\n\n\nInstead of multipart/form-data reqeusts, application/zip requests can be accepted to construct a pcdm:Object based on content model.  While this is convienent for basic object types, it's required for more complicated content models such as Book, Newspaper, and Compound.  Message bodies are assumed to be in Islandora Zip Importer format.\n\n\nGeneral Convention\n\n\nEndpoint\n: http://localhost:8080/islandora/services/zip/ingest/{content_model}/\n\nActions\n:\n\n\n\n\nPOST\n http://localhost:8080/islandora/services/zip/ingest/{content_model}/\n\n\nAccepts \napplication/zip\n messages\n\n\nTakes the supplied zip file, extracts its contents, and uses it to completely construct an object of the specified content-model.\n\n\n\n\n\n\n\n\nExample services\n\n\n\n\nhttp://localhost:8080/islandora/services/zip/large_image\n\n\nhttp://localhost:8080/islandora/services/zip/audio\n\n\nhttp://localhost:8080/islandora/services/zip/video\n\n\nhttp://localhost:8080/islandora/services/zip/book\n\n\nhttp://localhost:8080/islandora/services/zip/newspaper\n\n\nhttp://localhost:8080/islandora/services/zip/compound", 
            "title": "Middleware Services"
        }, 
        {
            "location": "/technical-documentation/services/#middleware-services", 
            "text": "Islandora middleware services utilize the Fedora 4 REST API and the Drupal Services module to create an API for the majority of interactions between the two systems. The Drupal uuid will be used to identify  pcdm:Objects  (and  pcdm:Files  thereof) when using these services.  The breakdown of services is as follows:   There will be a services to provide CRUD operations for  pcdm:Collections ,  pcdm:Objects  and  pcdm:Files .  There will be a service to provide creational operations using zip content based on content model.  For example:  POST  a zip file containing book pages Islandora Book Batch format to create an entire book object (with pages and derivatives processed asynchronously, of course).  There will be services per derivative type to perform operations based on the node UUID of the parent.  PATCH  to generate a new thumbnail for a  pcdm:Object .   For more information on PCDM, please see  this  page.", 
            "title": "Middleware Services"
        }, 
        {
            "location": "/technical-documentation/services/#collection-service", 
            "text": "Used for manipulating  pcdm:Collections . Essentially wraps the Fedora 4 API requests for manipulating a Container identified by Drupal uuid.  Node content in  application/json  format is massaged into  application/sparql-update  format in order to interact with Fedora.  Endpoint : http://localhost:8080/islandora-services/collection/  Actions :    GET  http://localhost:8080/islandora-services/collection/{uuid}   Returns  application/ld+json  RDF metadata for the  pcdm:Collection  identified by the supplied Drupal uuid.     POST  http://localhost:8080/islandora-services/collection/   Accepts  application/json  serialized node data.  Creates a  pcdm:Collection  in Fedora using the Drupal node data, associating the newly minted path with the node's uuid. If  fedora:hasParent  is supplied supplied in  POST  data, that location will be used to create the new object as a child.     PUT  http://localhost:8080/islandora-services/collection/{uuid}   Accepts  application/json  serialized node data.  Updates metadata in Fedora for the  pcdm:Collection  associated with the provided Drupal uuid.     DELETE  http://localhost:8080/islandora-services/collection/{uuid}   Deletes the  pcdm:Collection  in Fedora associated with provided Drupal uuid.", 
            "title": "Collection Service"
        }, 
        {
            "location": "/technical-documentation/services/#object-service", 
            "text": "Used for manipulating  pcdm:Objects . Essentially wraps the Fedora 4 API requests for manipulating a Container identified by Drupal uuid.  Node content in  application/json  format is massaged into  application/sparql-update  format in order to interact with Fedora.  Certain field values, as well as other files sent along in the message will be converted into  pcdm:Files  and attached to the newly created  pcdm:Object .  Endpoint : http://localhost:8080/islandora-services/object/  Actions :    GET  http://localhost:8080/islandora-services/object/{uuid}   Returns  application/ld+json  RDF metadata for the  pcdm:Object  identified by the supplied Drupal uuid.     POST  http://localhost:8080/islandora-services/object/   Accepts  multipart/form-data  messages.  One \"part\" of the message will be the JSON serialized Drupal node content.  Other \"parts\" will be files used to create  pcdm:Files  for the  pcdm:Object .  Creates a  pcdm:Object  in Fedora using the Drupal node data, associating the newly minted path with the node's uuid. If  fedora:hasParent  is supplied supplied in  POST  data, that location will be used to create the new object as a child.  Certain field values as well as any other files contained in the message will be used to create  pcdm:Files  associated with this  pcdm:Object .     PUT  http://localhost:8080/islandora-services/object/{uuid}   Accepts  multipart/form-data  messages.  One \"part\" of the message will be the JSON serialized Drupal node content.  Other \"parts\" will be files used to create  pcdm:Files  for the  pcdm:Object .  Updates metadata in Fedora for the  pcdm:Object  associated with the provided Drupal uuid. Certain field values as well as any other files contained in the message will be used to update  pcdm:Files  associated with this  pcdm:Object .     DELETE  http://localhost:8080/islandora-services/object/{uuid}   Deletes the  pcdm:Object  in Fedora associated with provided Drupal uuid. Also deletes any  pcdm:Files  directly contained by the  pcdm:Object .", 
            "title": "Object Service"
        }, 
        {
            "location": "/technical-documentation/services/#file-services", 
            "text": "Used for manipulating  pcdm:Files  associated with a  pcdm:Object . They will essentially wrap the Fedora 4 API requests for manipulating a  NonRDFSourceDescription  identified by  dcterms:title  (obj, mods, dc, etc...) and its parent's Drupal uuid. There will be seperate implementations for each applicable  dcterms:title , though each service will abide by a common conventions and behavior. This allows implementations to vary independently based on file type (technical metadata, descriptive metadata, archival binary), while allowing for new services to be easily added over time.  General Convention  Endpoint : http://localhost:8080/islandora-services/file/{uuid}/{dcterms:title} Actions :    GET  http://localhost:8080/islandora-services/file/{uuid}/{dcterms:title}   Retrieves the  pcdm:File  content belonging to the  pcdm:Object . The  pcdm:File  is identified by  dcterms:title  and its parents Drupal uuid.     POST  http://localhost:8080/islandora-services/file/{uuid}/{dcterms:title}   Adds a  pcdm:File  to the  pcdm:Object  identified by the provided Drupal uuid. The file's content will be set using the  POST  content, and the provided  dcterms:title  will be given to the newly created  pcdm:File .     PUT  http://localhost:8080/islandora-services/file/{uuid}/{dcterms:title}   Updates the  pcdm:File  with  dcterms:title  owned by the  pcdm:Object  identified by the provided Drupal uuid. The file's content will be set using the  PUT  content.     DELETE  http://localhost:8080/islandora-services/file/{uuid}/{dcterms:title}   Deletes the  pcdm:File  with  dcterms:title  owned by the  pcdm:Object  identified by the provided Drupal uuid.     Example Services  Some example services would include:   http://localhost:8080/islandora/services/file/{uuid}/obj  http://localhost:8080/islandora/services/file/{uuid}/dc  http://localhost:8080/islandora/services/file/{uuid}/mods  http://localhost:8080/islandora/services/file/{uuid}/fits   Implementations would differ in the sense that accept headers would be different, and data may have to be transformed differently before being inserted as the  pcdm:File .", 
            "title": "File Services"
        }, 
        {
            "location": "/technical-documentation/services/#derivative-services", 
            "text": "Derivatives (while generally dealt with through Islandora Sync) may need to be dealt with manually, so services will be provided to handle all the common derivatives types an Islandora installation may require. Much like the file services, a general convention on naming and behavior will be enforced, but seperate implementations will be provided. This will allow for maximum flexibility and encourage new services to be easily added and contributed.   General Convention  Endpoint : http://localhost:8080/islandora-services/derivative/{uuid}/{type} Actions :    GET  http://localhost:8080/islandora-services/derivative/{uuid}/{type}   Retrieves the derivative belonging to the  pcdm:Object  or  pcdm:Collection . The derivative is identified by its type and its parents Drupal uuid.     POST  http://localhost:8080/islandora-services/derivative/{uuid}/{type}   Adds a derivative to the  pcdm:Object  or  pcdm:Collection  identified by the provided Drupal uuid. The derivative's content will be set using the  POST  content. The result will reside in either Fedora or Drupal, depending on the derivative.     PUT  http://localhost:8080/islandora-services/derivative/{uuid}/{type}   Updates the derviative for a  pcdm:Object  or  pcdm:Collection  identified by the provided Drupal uuid. The derivative's content will be set using the  PUT  content. The result will reside in either Fedora or Drupal, depending on the derivative.     PATCH  http://localhost:8080/islandora-services/derivative/{uuid}/{type}   Asynchronously regenerates the derivative for a  pcdm:Object  or  pcdm:Collection  identified by the provided Drupal uuid. The result will reside in either Fedora or Drupal, depending on the derivative.     DELETE  http://localhost:8080/islandora-services/derivative/{uuid}/{type}   Deletes the derivative for the  pcdm:Object  or  pcdm:Collection  identified by the provided Drupal uuid. The derivative will be removed from either Fedora or Drupal, depending on the derivative.     Example Services  Some example services would include:   http://localhost:8080/islandora/services/derivative/{uuid}/tn  http://localhost:8080/islandora/services/derivative/{uuid}/medium_size  http://localhost:8080/islandora/services/derivative/{uuid}/jp2  http://localhost:8080/islandora/services/derivative/{uuid}/techmd  http://localhost:8080/islandora/services/derivative/{uuid}/mp3  http://localhost:8080/islandora/services/derivative/{uuid}/mp4  http://localhost:8080/islandora/services/derivative/{uuid}/mkv   Implementations would differ in the sense that different derivatives will be created from varying sources using varying programs. Also, display derivatives should reside in Drupal (TN, JP2, etc...) while technical metadata should reside in Fedora.  Within Drupal, different derivatives will reside as different field types.", 
            "title": "Derivative Services"
        }, 
        {
            "location": "/technical-documentation/services/#zip-ingest-services", 
            "text": "Instead of multipart/form-data reqeusts, application/zip requests can be accepted to construct a pcdm:Object based on content model.  While this is convienent for basic object types, it's required for more complicated content models such as Book, Newspaper, and Compound.  Message bodies are assumed to be in Islandora Zip Importer format.  General Convention  Endpoint : http://localhost:8080/islandora/services/zip/ingest/{content_model}/ Actions :   POST  http://localhost:8080/islandora/services/zip/ingest/{content_model}/  Accepts  application/zip  messages  Takes the supplied zip file, extracts its contents, and uses it to completely construct an object of the specified content-model.     Example services   http://localhost:8080/islandora/services/zip/large_image  http://localhost:8080/islandora/services/zip/audio  http://localhost:8080/islandora/services/zip/video  http://localhost:8080/islandora/services/zip/book  http://localhost:8080/islandora/services/zip/newspaper  http://localhost:8080/islandora/services/zip/compound", 
            "title": "Zip Ingest Services"
        }, 
        {
            "location": "/technical-documentation/commands/", 
            "text": "Islandora Commands\n\n\nIntroduction\n\n\nSometimes you need to do deeper logic in a Camel route than can realistically be done within a Blueprint XML. Since Apache Camel is an \nintegration\n framework, we can call out to command line PHP instead of having to use Java for the majority of our tasks. Though Java is still always an option to those who are inclined (and may be required for more advanced use cases), there are many advantages to sticking with PHP. Not only is it the language we're most comfortable with as a community, but its also well suited for dealing with both JSON-LD from Fedora and node content from Drupal (much more so than Java). We also get the full advantages of modern PHP, including object oriented programming and tools like Composer. \n\n\nBasic Usage\n\n\nIn your git project's root, head on over to the \nbin\n folder of the \ncamel/commands\n directory and execute the \nislandora.php\n script to see what it has to say.\n\n\nvagrant@islandora:~/islandora$ cd camel/commands/bin\nvagrant@islandora:~/islandora/camel/commands/bin$ php islandora.php\nIslandora Command Tool version 0.0.0-SNAPSHOT\n\nUsage:\n command [options] [arguments]\n\nOptions:\n -h, --help      Display this help message\n -q, --quiet      Do not output any message\n -V, --version     Display this application version\n   --ansi      Force ANSI output\n   --no-ansi     Disable ANSI output\n -n, --no-interaction Do not ask any interactive question\n -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug\n\nAvailable commands:\n help              Displays help for a command\n list              Lists commands\n collectionService\n collectionService:nodeToSparql Converts Drupal node JSON for a collection to a SPARQL Update query\n rdf\n rdf:createNode         Creates a Drupal node from Fedora RDF.\n rdf:extractContentType     Extracts a Drupal content type from Fedora RDF.\n rdf:updateNode         Updates a Drupal node from Fedora RDF.\n\n\n\n\nWow, that's a lot. How did we get all that nice output? It's because we're using the Symfony Console component as a framework for our script. We get all kinds of stuff for free because of it, including versioning, exception catching, and this helpful message.\n\n\nAs you can see, this tool expects a command to be provided. Notice that the commands are even namespaced! Normally, commands would accept arguments and parameters optionally after the command. But from Camel, message bodies are piped to the tool using STDIN, which the tool will gladly accept. Let's try running a command that will convert a node represented in JSON from Drupal into a SPARQL update query. First, we'll save the input to a file so that when we run the command we can just dump its contents into STDIN to emulate how Camel behaves. Go find a node on your site and get its UUID by looking at its devel tab. \n\n\nPUT PICTURE OF DEVEL TAB HERE\n\n\nYou can get its JSON representation by visiting \nhttp://yoursite/islandora/node/your_nodes_uuid\n. If you're running on the vagrant environment, and have a uuid of 38f7d551-28f7-49ac-9ceb-d6adcc6cc9c0, then the url would look like \nlocalhost:8000/islandora/node/38f7d551-28f7-49ac-9ceb-d6adcc6cc9c0\n.\n\n\nPUT A PICTURE OF THE JSON OUTPUT HERE\n\n\nSave the response somewhere, like \n/tmp/node.json\n. Then you can run the command like so:\n\n\nvagrant@islandora:~/islandora/camel/commands/bin$ cat /tmp/node.json | php islandora.php collectionService:nodeToSparql\nPREFIX islandora: \nhttp://islandora.ca/ontology/v2/\n\nPREFIX rdf: \nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#\n\nPREFIX fedora: \nhttp://fedora.info/definitions/v4/repository#\n\nPREFIX pcdm: \nhttp://pcdm.org/models#\n\nPREFIX nfo: \nhttp://www.semanticdesktop.org/ontologies/2007/03/22/nfo/v1.2/\n\nPREFIX nt: \nhttp://www.jcp.org/jcr/nt/1.0\n\nPREFIX mix: \nhttp://www.jcp.org/jcr/mix/1.0\n\nPREFIX ldp: \nhttp://www.w3.org/ns/ldp#\n\nPREFIX dc11: \nhttp://purl.org/dc/elements/1.1/\n\nPREFIX modsrdf: \nhttp://www.loc.gov/mods/modsrdf/v1#\n\nPREFIX content: \nhttp://purl.org/rss/1.0/modules/content/\n\nPREFIX dc: \nhttp://purl.org/dc/terms/\n\nPREFIX foaf: \nhttp://xmlns.com/foaf/0.1/\n\nPREFIX og: \nhttp://ogp.me/ns#\n\nPREFIX rdfs: \nhttp://www.w3.org/2000/01/rdf-schema#\n\nPREFIX sioc: \nhttp://rdfs.org/sioc/ns#\n\nPREFIX sioct: \nhttp://rdfs.org/sioc/types#\n\nPREFIX skos: \nhttp://www.w3.org/2004/02/skos/core#\n\nPREFIX xsd: \nhttp://www.w3.org/2001/XMLSchema#\n\n\nDELETE WHERE {\n  \n \nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#type\n ?o0 .\n  \n \nhttp://www.semanticdesktop.org/ontologies/2007/03/22/nfo/v1.2/uuid\n ?o1 .\n  \n \nhttp://purl.org/dc/terms/title\n ?o2 .\n  \n \nhttp://purl.org/dc/terms/date\n ?o3 .\n  \n \nhttp://purl.org/dc/terms/created\n ?o4 .\n  \n \nhttp://purl.org/dc/terms/modified\n ?o5 .\n  \n \nhttp://rdfs.org/sioc/ns#has_creator\n ?o6 .\n  \n \nhttp://xmlns.com/foaf/0.1/name\n ?o7 .\n};\nINSERT DATA {\n  \n \nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#type\n \nhttp://www.w3.org/ns/ldp#RDFSource\n .\n  \n \nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#type\n \nhttp://www.w3.org/ns/ldp#Container\n .\n  \n \nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#type\n \nhttp://www.jcp.org/jcr/nt/1.0hierarchyNode\n .\n  \n \nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#type\n \nhttp://www.jcp.org/jcr/nt/1.0folder\n .\n  \n \nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#type\n \nhttp://www.jcp.org/jcr/nt/1.0base\n .\n  \n \nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#type\n \nhttp://www.jcp.org/jcr/mix/1.0referenceable\n .\n  \n \nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#type\n \nhttp://fedora.info/definitions/v4/repository#Resource\n .\n  \n \nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#type\n \nhttp://fedora.info/definitions/v4/repository#Container\n .\n  \n \nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#type\n \nhttp://pcdm.org/models#Collection\n .\n  \n \nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#type\n \nhttp://islandora.ca/ontology/v2/collection\n .\n  \n \nhttp://www.semanticdesktop.org/ontologies/2007/03/22/nfo/v1.2/uuid\n \n38f7d551-28f7-49ac-9ceb-d6adcc6cc9c0\n .\n  \n \nhttp://purl.org/dc/terms/title\n \nTest Collection\n .\n  \n \nhttp://purl.org/dc/terms/date\n \n1970-01-01T00:33:35+00:00\n^^\nhttp://www.w3.org/2001/XMLSchema#dateTime\n .\n  \n \nhttp://purl.org/dc/terms/created\n \n1970-01-01T00:33:35+00:00\n^^\nhttp://www.w3.org/2001/XMLSchema#dateTime\n .\n  \n \nhttp://purl.org/dc/terms/modified\n \n2015-07-16T13:49:27+00:00\n^^\nhttp://www.w3.org/2001/XMLSchema#dateTime\n .\n  \n \nhttp://rdfs.org/sioc/ns#has_creator\n 1 .\n  \n \nhttp://xmlns.com/foaf/0.1/name\n \nadmin\n .\n}\n\n\n\n\nAnd you can see that we have our SPARQL output. Executing commands like this is a great way to test without having to trigger anything via Camel.\n\n\nIf you are within a Camel route in the Blueprint DSL, the message body is automatically provided to the command, and you can utilize the Islandora component to execute one like so:\n\n\nto uri=\nislandora:namespace:command\n/\n\n\n\n\n\nFor example, in order to run the same command we just did from inside Camel, you can simply do this (assuming the message body is the same JSON data from Drupal services):\n\n\nto uri=\nislandora:collectionService:nodeToSparql\n/\n\n\n\n\n\nSee the documentation on the Islandora command for more information about using a command from within Camel.\n\n\nCreating a new Command\n\n\nLet's go through the steps required to make your own Camel command. As is tradition, we're going to make a simple \"Hello World\" command.\n\n\nAll that's required for creating a command is to extend IslandoraCommand (or one of its subclasses). It already handles everything for you, including accepting input from STDIN. The bare minimum that is required of an IslandoraCommand is to implement two methods: \nconfigure()\n and \nexecute(InputInterface $input, OutputInterface $output)\n. From your project's root, create the \ncamel/commands/src/Greeter\n directory and open up a new file called \nHelloGreeter.php\n. Place the following code inside and be sure to save it to the newly created \nGreeter\n directory.\n\n\n\n\n?php\n\n/**\n * This file is part of Islandora.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\n * PHP Version 5.5.9\n *\n * @category Islandora\n * @package Islandora\\Greeter\n * @author  Your Name \nyour_email@your_employer.com\n\n * @license http://www.gnu.org/licenses/gpl-3.0.en.html GPL\n * @link   http://www.islandora.ca\n */\n\nuse Islandora\\IslandoraCommand;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * Says hello!\n *\n * @category Islandora\n * @package Islandora\\Greeter\n * @author  Your Name \nyour_email@your_employer.com\n\n * @license http://www.gnu.org/licenses/gpl-3.0.en.html GPL\n * @link   http://www.islandora.ca\n */\nclass HelloGreeter extends IslandoraCommand\n{\n  /**\n   * Sets command configuration.\n   *\n   * @return null\n   */\n  protected function configure()\n  {\n    $this-\nsetName('greeter:hello')\n      -\nsetDescription(\n        \nSays hello!\n\n      );\n  }\n\n  /**\n   * Says hello!\n   *\n   * @param InputInterface $input An InputInterface instance\n   * @param OutputInterface $output An OutputInterface instance\n   *\n   * @return null\n   */\n  protected function execute(InputInterface $input, OutputInterface $output)\n  {\n    $name = $this-\ndata;\n    $output-\nwriteln(\nHello \n . trim($name) . \n!\n);\n  }\n}\n\n\n\n\nIn the \nconfigure()\n method, we set some properties for the command. A command's setters all return the command itself, so we can chain the calls together. We set the name of the command, complete with namespace and ':' delimiter. We also give a description of the command that will show up when listing available commands.\n\n\nThe \nexecute(InputInterface $input, OutputInterface $output)\n method is where we do our actual work. Since we extended Islandora command, all input from STDIN is provided as a String and can be accessed any time through \n$this-\ndata\n.\n\n\nSo let's try it out! Go back to the \ncamel/commands/bin\n directory and get a listing of all the commands to make sure it appears.\n\n\nvagrant@islandora:~/islandora/camel/commands/bin$ cd ~/islandora/camel/commands/bin\nvagrant@islandora:~/islandora/camel/commands/bin$ php islandora.php\nIslandora Command Tool version 0.0.0-SNAPSHOT\n\nUsage:\n command [options] [arguments]\n\nOptions:\n -h, --help      Display this help message\n -q, --quiet      Do not output any message\n -V, --version     Display this application version\n   --ansi      Force ANSI output\n   --no-ansi     Disable ANSI output\n -n, --no-interaction Do not ask any interactive question\n -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug\n\nAvailable commands:\n help              Displays help for a command\n list              Lists commands\n collectionService\n collectionService:nodeToSparql Converts Drupal node JSON for a collection to a SPARQL Update query\n greeter\n greeter:hello          Says hello!\n rdf\n rdf:createNode         Creates a Drupal node from Fedora RDF.\n rdf:extractContentType     Extracts a Drupal content type from Fedora RDF.\n rdf:updateNode         Updates a Drupal node from Fedora RDF.\n\n\n\n\nAnd sure enough, it does! We now have the \ngreeter:hello\n command from the \ngreeter\n namespace! Let's use it! As is tradition, we're going to greet the world.\n\n\nvagrant@islandora:~/islandora/camel/commands/bin$ echo \nWorld\n | php islandora.php greeter:hello\nHello World!\n\n\n\n\nWorking with JSON data\n\n\nMost of the time, we're dealing with JSON output. Often, we're working with node data from Drupal or ld+json RDF from Fedora 4. As a convienence, the JsonInputIslandoraCommand can be extended instead of IslandoraCommand. With a JsonInputIslandoraCommand, \n$this-\ndata\n is an associative array that is automatically parsed from JSON input through STDIN. Let's trying writing another Greeter, only this time it will accept JSON input of the form \n{\"name\": \"some_name\"}\n.\n\n\n?php\n\n/**\n * This file is part of Islandora.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\n * PHP Version 5.5.9\n *\n * @category Islandora\n * @package Islandora\\Greeter\n * @author  Your Name \nyour_email@your_employer.com\n\n * @license http://www.gnu.org/licenses/gpl-3.0.en.html GPL\n * @link   http://www.islandora.ca\n */\n\nuse Islandora\\JsonInputIslandoraCommand;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * Says hello! Accepts JSON data in the form {\nname\n : \nyour_name\n}.\n *\n * @category Islandora\n * @package Islandora\\Greeter\n * @author  Your Name \nyour_email@your_employer.com\n\n * @license http://www.gnu.org/licenses/gpl-3.0.en.html GPL\n * @link   http://www.islandora.ca\n */\nclass JsonHelloGreeter extends JsonInputIslandoraCommand\n{\n  /**\n   * Sets command configuration.\n   *\n   * @return null\n   */\n  protected function configure()\n  {\n    $this-\nsetName('greeter:helloUsingJson')\n      -\nsetDescription(\n        'Says hello! Accepts JSON data in the form {\nname\n : \nyour_name\n}.'\n      );\n  }\n\n  /**\n   * Says hello! Accepts JSON data in the form {\nname\n : \nyour_name\n}.\n   *\n   * @param InputInterface $input An InputInterface instance\n   * @param OutputInterface $output An OutputInterface instance\n   *\n   * @return null\n   */\n  protected function execute(InputInterface $input, OutputInterface $output)\n  {\n    $name = $this-\ndata['name'];\n    $output-\nwriteln(\nHello \n . trim($name) . \n!\n);\n  }\n}\n\n\n\n\nThis command is almost exactly the same as the last, except it extends JsonInputIslandoraCommand and its execute function pulls the name of the person to greet out of \n$this-\ndata\n using the key 'name'.\n\n\nLet's make sure the command is available.\n\n\nvagrant@islandora:~/islandora/camel/commands/bin$ php islandora.php\nIslandora Command Tool version 0.0.0-SNAPSHOT\n\nUsage:\n command [options] [arguments]\n\nOptions:\n -h, --help      Display this help message\n -q, --quiet      Do not output any message\n -V, --version     Display this application version\n   --ansi      Force ANSI output\n   --no-ansi     Disable ANSI output\n -n, --no-interaction Do not ask any interactive question\n -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug\n\nAvailable commands:\n help              Displays help for a command\n list              Lists commands\n collectionService\n collectionService:nodeToSparql Converts Drupal node JSON for a collection to a SPARQL Update query\n greeter\n greeter:hello          Says hello!\n greeter:helloUsingJson     Says hello! Accepts JSON data in the form {\nname\n : \nyour_name\n}.\n rdf\n rdf:createNode         Creates a Drupal node from Fedora RDF.\n rdf:extractContentType     Extracts a Drupal content type from Fedora RDF.\n rdf:updateNode         Updates a Drupal node from Fedora RDF.\n\n\n\n\nOnce you've confirmed that \ngreeter:helloUsingJson\n is available, you can run it using:\n\n\nvagrant@islandora:~/islandora/camel/commands/bin$ echo '{\nname\n : \nWorld\n}' | php islandora.php greeter:helloUsingJson\nHello World!\n\n\n\n\nAnd there you have it! That's how you can create your own commands for use in Camel routes, and also how to experiment with them outside of Camel! Remember, when experimenting with more complicated data, you'll probably want to pipe the contents of a file to the command like we did above.", 
            "title": "Commands"
        }, 
        {
            "location": "/technical-documentation/commands/#islandora-commands", 
            "text": "", 
            "title": "Islandora Commands"
        }, 
        {
            "location": "/technical-documentation/commands/#introduction", 
            "text": "Sometimes you need to do deeper logic in a Camel route than can realistically be done within a Blueprint XML. Since Apache Camel is an  integration  framework, we can call out to command line PHP instead of having to use Java for the majority of our tasks. Though Java is still always an option to those who are inclined (and may be required for more advanced use cases), there are many advantages to sticking with PHP. Not only is it the language we're most comfortable with as a community, but its also well suited for dealing with both JSON-LD from Fedora and node content from Drupal (much more so than Java). We also get the full advantages of modern PHP, including object oriented programming and tools like Composer.", 
            "title": "Introduction"
        }, 
        {
            "location": "/technical-documentation/commands/#basic-usage", 
            "text": "In your git project's root, head on over to the  bin  folder of the  camel/commands  directory and execute the  islandora.php  script to see what it has to say.  vagrant@islandora:~/islandora$ cd camel/commands/bin\nvagrant@islandora:~/islandora/camel/commands/bin$ php islandora.php\nIslandora Command Tool version 0.0.0-SNAPSHOT\n\nUsage:\n command [options] [arguments]\n\nOptions:\n -h, --help      Display this help message\n -q, --quiet      Do not output any message\n -V, --version     Display this application version\n   --ansi      Force ANSI output\n   --no-ansi     Disable ANSI output\n -n, --no-interaction Do not ask any interactive question\n -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug\n\nAvailable commands:\n help              Displays help for a command\n list              Lists commands\n collectionService\n collectionService:nodeToSparql Converts Drupal node JSON for a collection to a SPARQL Update query\n rdf\n rdf:createNode         Creates a Drupal node from Fedora RDF.\n rdf:extractContentType     Extracts a Drupal content type from Fedora RDF.\n rdf:updateNode         Updates a Drupal node from Fedora RDF.  Wow, that's a lot. How did we get all that nice output? It's because we're using the Symfony Console component as a framework for our script. We get all kinds of stuff for free because of it, including versioning, exception catching, and this helpful message.  As you can see, this tool expects a command to be provided. Notice that the commands are even namespaced! Normally, commands would accept arguments and parameters optionally after the command. But from Camel, message bodies are piped to the tool using STDIN, which the tool will gladly accept. Let's try running a command that will convert a node represented in JSON from Drupal into a SPARQL update query. First, we'll save the input to a file so that when we run the command we can just dump its contents into STDIN to emulate how Camel behaves. Go find a node on your site and get its UUID by looking at its devel tab.   PUT PICTURE OF DEVEL TAB HERE  You can get its JSON representation by visiting  http://yoursite/islandora/node/your_nodes_uuid . If you're running on the vagrant environment, and have a uuid of 38f7d551-28f7-49ac-9ceb-d6adcc6cc9c0, then the url would look like  localhost:8000/islandora/node/38f7d551-28f7-49ac-9ceb-d6adcc6cc9c0 .  PUT A PICTURE OF THE JSON OUTPUT HERE  Save the response somewhere, like  /tmp/node.json . Then you can run the command like so:  vagrant@islandora:~/islandora/camel/commands/bin$ cat /tmp/node.json | php islandora.php collectionService:nodeToSparql\nPREFIX islandora:  http://islandora.ca/ontology/v2/ \nPREFIX rdf:  http://www.w3.org/1999/02/22-rdf-syntax-ns# \nPREFIX fedora:  http://fedora.info/definitions/v4/repository# \nPREFIX pcdm:  http://pcdm.org/models# \nPREFIX nfo:  http://www.semanticdesktop.org/ontologies/2007/03/22/nfo/v1.2/ \nPREFIX nt:  http://www.jcp.org/jcr/nt/1.0 \nPREFIX mix:  http://www.jcp.org/jcr/mix/1.0 \nPREFIX ldp:  http://www.w3.org/ns/ldp# \nPREFIX dc11:  http://purl.org/dc/elements/1.1/ \nPREFIX modsrdf:  http://www.loc.gov/mods/modsrdf/v1# \nPREFIX content:  http://purl.org/rss/1.0/modules/content/ \nPREFIX dc:  http://purl.org/dc/terms/ \nPREFIX foaf:  http://xmlns.com/foaf/0.1/ \nPREFIX og:  http://ogp.me/ns# \nPREFIX rdfs:  http://www.w3.org/2000/01/rdf-schema# \nPREFIX sioc:  http://rdfs.org/sioc/ns# \nPREFIX sioct:  http://rdfs.org/sioc/types# \nPREFIX skos:  http://www.w3.org/2004/02/skos/core# \nPREFIX xsd:  http://www.w3.org/2001/XMLSchema# \n\nDELETE WHERE {\n     http://www.w3.org/1999/02/22-rdf-syntax-ns#type  ?o0 .\n     http://www.semanticdesktop.org/ontologies/2007/03/22/nfo/v1.2/uuid  ?o1 .\n     http://purl.org/dc/terms/title  ?o2 .\n     http://purl.org/dc/terms/date  ?o3 .\n     http://purl.org/dc/terms/created  ?o4 .\n     http://purl.org/dc/terms/modified  ?o5 .\n     http://rdfs.org/sioc/ns#has_creator  ?o6 .\n     http://xmlns.com/foaf/0.1/name  ?o7 .\n};\nINSERT DATA {\n     http://www.w3.org/1999/02/22-rdf-syntax-ns#type   http://www.w3.org/ns/ldp#RDFSource  .\n     http://www.w3.org/1999/02/22-rdf-syntax-ns#type   http://www.w3.org/ns/ldp#Container  .\n     http://www.w3.org/1999/02/22-rdf-syntax-ns#type   http://www.jcp.org/jcr/nt/1.0hierarchyNode  .\n     http://www.w3.org/1999/02/22-rdf-syntax-ns#type   http://www.jcp.org/jcr/nt/1.0folder  .\n     http://www.w3.org/1999/02/22-rdf-syntax-ns#type   http://www.jcp.org/jcr/nt/1.0base  .\n     http://www.w3.org/1999/02/22-rdf-syntax-ns#type   http://www.jcp.org/jcr/mix/1.0referenceable  .\n     http://www.w3.org/1999/02/22-rdf-syntax-ns#type   http://fedora.info/definitions/v4/repository#Resource  .\n     http://www.w3.org/1999/02/22-rdf-syntax-ns#type   http://fedora.info/definitions/v4/repository#Container  .\n     http://www.w3.org/1999/02/22-rdf-syntax-ns#type   http://pcdm.org/models#Collection  .\n     http://www.w3.org/1999/02/22-rdf-syntax-ns#type   http://islandora.ca/ontology/v2/collection  .\n     http://www.semanticdesktop.org/ontologies/2007/03/22/nfo/v1.2/uuid   38f7d551-28f7-49ac-9ceb-d6adcc6cc9c0  .\n     http://purl.org/dc/terms/title   Test Collection  .\n     http://purl.org/dc/terms/date   1970-01-01T00:33:35+00:00 ^^ http://www.w3.org/2001/XMLSchema#dateTime  .\n     http://purl.org/dc/terms/created   1970-01-01T00:33:35+00:00 ^^ http://www.w3.org/2001/XMLSchema#dateTime  .\n     http://purl.org/dc/terms/modified   2015-07-16T13:49:27+00:00 ^^ http://www.w3.org/2001/XMLSchema#dateTime  .\n     http://rdfs.org/sioc/ns#has_creator  1 .\n     http://xmlns.com/foaf/0.1/name   admin  .\n}  And you can see that we have our SPARQL output. Executing commands like this is a great way to test without having to trigger anything via Camel.  If you are within a Camel route in the Blueprint DSL, the message body is automatically provided to the command, and you can utilize the Islandora component to execute one like so:  to uri= islandora:namespace:command /   For example, in order to run the same command we just did from inside Camel, you can simply do this (assuming the message body is the same JSON data from Drupal services):  to uri= islandora:collectionService:nodeToSparql /   See the documentation on the Islandora command for more information about using a command from within Camel.", 
            "title": "Basic Usage"
        }, 
        {
            "location": "/technical-documentation/commands/#creating-a-new-command", 
            "text": "Let's go through the steps required to make your own Camel command. As is tradition, we're going to make a simple \"Hello World\" command.  All that's required for creating a command is to extend IslandoraCommand (or one of its subclasses). It already handles everything for you, including accepting input from STDIN. The bare minimum that is required of an IslandoraCommand is to implement two methods:  configure()  and  execute(InputInterface $input, OutputInterface $output) . From your project's root, create the  camel/commands/src/Greeter  directory and open up a new file called  HelloGreeter.php . Place the following code inside and be sure to save it to the newly created  Greeter  directory.   ?php\n\n/**\n * This file is part of Islandora.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\n * PHP Version 5.5.9\n *\n * @category Islandora\n * @package Islandora\\Greeter\n * @author  Your Name  your_email@your_employer.com \n * @license http://www.gnu.org/licenses/gpl-3.0.en.html GPL\n * @link   http://www.islandora.ca\n */\n\nuse Islandora\\IslandoraCommand;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * Says hello!\n *\n * @category Islandora\n * @package Islandora\\Greeter\n * @author  Your Name  your_email@your_employer.com \n * @license http://www.gnu.org/licenses/gpl-3.0.en.html GPL\n * @link   http://www.islandora.ca\n */\nclass HelloGreeter extends IslandoraCommand\n{\n  /**\n   * Sets command configuration.\n   *\n   * @return null\n   */\n  protected function configure()\n  {\n    $this- setName('greeter:hello')\n      - setDescription(\n         Says hello! \n      );\n  }\n\n  /**\n   * Says hello!\n   *\n   * @param InputInterface $input An InputInterface instance\n   * @param OutputInterface $output An OutputInterface instance\n   *\n   * @return null\n   */\n  protected function execute(InputInterface $input, OutputInterface $output)\n  {\n    $name = $this- data;\n    $output- writeln( Hello   . trim($name) .  ! );\n  }\n}  In the  configure()  method, we set some properties for the command. A command's setters all return the command itself, so we can chain the calls together. We set the name of the command, complete with namespace and ':' delimiter. We also give a description of the command that will show up when listing available commands.  The  execute(InputInterface $input, OutputInterface $output)  method is where we do our actual work. Since we extended Islandora command, all input from STDIN is provided as a String and can be accessed any time through  $this- data .  So let's try it out! Go back to the  camel/commands/bin  directory and get a listing of all the commands to make sure it appears.  vagrant@islandora:~/islandora/camel/commands/bin$ cd ~/islandora/camel/commands/bin\nvagrant@islandora:~/islandora/camel/commands/bin$ php islandora.php\nIslandora Command Tool version 0.0.0-SNAPSHOT\n\nUsage:\n command [options] [arguments]\n\nOptions:\n -h, --help      Display this help message\n -q, --quiet      Do not output any message\n -V, --version     Display this application version\n   --ansi      Force ANSI output\n   --no-ansi     Disable ANSI output\n -n, --no-interaction Do not ask any interactive question\n -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug\n\nAvailable commands:\n help              Displays help for a command\n list              Lists commands\n collectionService\n collectionService:nodeToSparql Converts Drupal node JSON for a collection to a SPARQL Update query\n greeter\n greeter:hello          Says hello!\n rdf\n rdf:createNode         Creates a Drupal node from Fedora RDF.\n rdf:extractContentType     Extracts a Drupal content type from Fedora RDF.\n rdf:updateNode         Updates a Drupal node from Fedora RDF.  And sure enough, it does! We now have the  greeter:hello  command from the  greeter  namespace! Let's use it! As is tradition, we're going to greet the world.  vagrant@islandora:~/islandora/camel/commands/bin$ echo  World  | php islandora.php greeter:hello\nHello World!", 
            "title": "Creating a new Command"
        }, 
        {
            "location": "/technical-documentation/commands/#working-with-json-data", 
            "text": "Most of the time, we're dealing with JSON output. Often, we're working with node data from Drupal or ld+json RDF from Fedora 4. As a convienence, the JsonInputIslandoraCommand can be extended instead of IslandoraCommand. With a JsonInputIslandoraCommand,  $this- data  is an associative array that is automatically parsed from JSON input through STDIN. Let's trying writing another Greeter, only this time it will accept JSON input of the form  {\"name\": \"some_name\"} .  ?php\n\n/**\n * This file is part of Islandora.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n *\n * PHP Version 5.5.9\n *\n * @category Islandora\n * @package Islandora\\Greeter\n * @author  Your Name  your_email@your_employer.com \n * @license http://www.gnu.org/licenses/gpl-3.0.en.html GPL\n * @link   http://www.islandora.ca\n */\n\nuse Islandora\\JsonInputIslandoraCommand;\nuse Symfony\\Component\\Console\\Input\\InputInterface;\nuse Symfony\\Component\\Console\\Output\\OutputInterface;\n\n/**\n * Says hello! Accepts JSON data in the form { name  :  your_name }.\n *\n * @category Islandora\n * @package Islandora\\Greeter\n * @author  Your Name  your_email@your_employer.com \n * @license http://www.gnu.org/licenses/gpl-3.0.en.html GPL\n * @link   http://www.islandora.ca\n */\nclass JsonHelloGreeter extends JsonInputIslandoraCommand\n{\n  /**\n   * Sets command configuration.\n   *\n   * @return null\n   */\n  protected function configure()\n  {\n    $this- setName('greeter:helloUsingJson')\n      - setDescription(\n        'Says hello! Accepts JSON data in the form { name  :  your_name }.'\n      );\n  }\n\n  /**\n   * Says hello! Accepts JSON data in the form { name  :  your_name }.\n   *\n   * @param InputInterface $input An InputInterface instance\n   * @param OutputInterface $output An OutputInterface instance\n   *\n   * @return null\n   */\n  protected function execute(InputInterface $input, OutputInterface $output)\n  {\n    $name = $this- data['name'];\n    $output- writeln( Hello   . trim($name) .  ! );\n  }\n}  This command is almost exactly the same as the last, except it extends JsonInputIslandoraCommand and its execute function pulls the name of the person to greet out of  $this- data  using the key 'name'.  Let's make sure the command is available.  vagrant@islandora:~/islandora/camel/commands/bin$ php islandora.php\nIslandora Command Tool version 0.0.0-SNAPSHOT\n\nUsage:\n command [options] [arguments]\n\nOptions:\n -h, --help      Display this help message\n -q, --quiet      Do not output any message\n -V, --version     Display this application version\n   --ansi      Force ANSI output\n   --no-ansi     Disable ANSI output\n -n, --no-interaction Do not ask any interactive question\n -v|vv|vvv, --verbose Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug\n\nAvailable commands:\n help              Displays help for a command\n list              Lists commands\n collectionService\n collectionService:nodeToSparql Converts Drupal node JSON for a collection to a SPARQL Update query\n greeter\n greeter:hello          Says hello!\n greeter:helloUsingJson     Says hello! Accepts JSON data in the form { name  :  your_name }.\n rdf\n rdf:createNode         Creates a Drupal node from Fedora RDF.\n rdf:extractContentType     Extracts a Drupal content type from Fedora RDF.\n rdf:updateNode         Updates a Drupal node from Fedora RDF.  Once you've confirmed that  greeter:helloUsingJson  is available, you can run it using:  vagrant@islandora:~/islandora/camel/commands/bin$ echo '{ name  :  World }' | php islandora.php greeter:helloUsingJson\nHello World!  And there you have it! That's how you can create your own commands for use in Camel routes, and also how to experiment with them outside of Camel! Remember, when experimenting with more complicated data, you'll probably want to pipe the contents of a file to the command like we did above.", 
            "title": "Working with JSON data"
        }, 
        {
            "location": "/technical-documentation/docs-build/", 
            "text": "Introduction\n\n\nThis documentation is built using \nmkdocs\n, a static site generator that is geared towards building project documentation. The documentation is created in the \nMarkdown\n format, and it all resides in the \ndocs\n directory in the repository. The organization of the documenation is controlled by the \nmkdocs.yml\n in the root of the repository.\n\n\nBuild and Deploy documentation\n\n\nDocumentation is build by running to the following command in the root of the repository:\n\n\nmkdocs build --clean\n\n\nThis command will create a static \nsite\n folder in the root of the repository. \n\n\nYou can preview any changes you have made to the documentation by running the following command:\n\n\nmkdocs serve\n\n\nAnd then visiting http://localhost:8111 in your browser.\n\n\nTo deploy documenation to GitHub Pages, issue the following command:\n\n\nmkdocs gh-deploy --clean", 
            "title": "How to build documenation"
        }, 
        {
            "location": "/technical-documentation/docs-build/#introduction", 
            "text": "This documentation is built using  mkdocs , a static site generator that is geared towards building project documentation. The documentation is created in the  Markdown  format, and it all resides in the  docs  directory in the repository. The organization of the documenation is controlled by the  mkdocs.yml  in the root of the repository.", 
            "title": "Introduction"
        }, 
        {
            "location": "/technical-documentation/docs-build/#build-and-deploy-documentation", 
            "text": "Documentation is build by running to the following command in the root of the repository:  mkdocs build --clean  This command will create a static  site  folder in the root of the repository.   You can preview any changes you have made to the documentation by running the following command:  mkdocs serve  And then visiting http://localhost:8111 in your browser.  To deploy documenation to GitHub Pages, issue the following command:  mkdocs gh-deploy --clean", 
            "title": "Build and Deploy documentation"
        }, 
        {
            "location": "/migration/migration/", 
            "text": "fcrepo3 Object properties to fcrepo4\n\n\n\n\n\n\n\n\nfcrepo 3\n\n\nfcrepo4\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nPID\n\n\nfedora3model:PID\u2020\n\n\nyul:328697\n\n\n\n\n\n\nstate\n\n\nfedoraaccess:objState\n\n\nActive\n\n\n\n\n\n\nlabel\n\n\nfedora3model:label\u2020\n\n\nElvis Presley\n\n\n\n\n\n\ncreateDate\n\n\npremis:hasDateCreatedByApplication\n\n\n2015-03-16T20:11:06.683Z\n\n\n\n\n\n\nlastModifiedDate\n\n\nmetadataModification\n\n\n2015-03-16T20:11:06.683Z\n\n\n\n\n\n\nownerId\n\n\nfedora3model:ownerId\u2020\n\n\nnruest\n\n\n\n\n\n\n\n\n\u2020 The \nfedora3model\n namespace is not a published namespace. It is a representation of the fcrepo3 namespace \ninfo:fedora/fedora-system:def/model\n. \n\n\u2021 Not yet implemented\n\n\nfcrepo3 Datastream properties to fcrepo4\n\n\n\n\n\n\n\n\nfcrepo3\n\n\nfcrepo4\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nDSID\n\n\ndcterms:identifier\n\n\nOBJ\n\n\n\n\n\n\nLabel\n\n\ndcterms:title\u2021\n\n\nASC19109.tif\n\n\n\n\n\n\nMIME Type\n\n\nebucore:hasMimeType\u2020\n\n\nimage/tiff\n\n\n\n\n\n\nState\n\n\nfedoraaccess:objState\n\n\nActive\n\n\n\n\n\n\nCreated\n\n\npremis:hasDateCreatedByApplication\n\n\n2015-03-16T20:11:06.683Z\n\n\n\n\n\n\nVersionable\n\n\nfedora:hasVersions\u2021\n\n\ntrue\n\n\n\n\n\n\nFormat URI\n\n\npremis:formatDesignation\u2021\n\n\ninfo:pronom/fmt/156\n\n\n\n\n\n\nAlternate IDs\n\n\ndcterms:identifier\u2021\n\n\n\n\n\n\n\n\nAccess URL\n\n\ndcterms:identifier\u2021\n\n\n\n\n\n\n\n\nChecksum\n\n\ncryptofunc:\nhashalgorithm\n\u2021\n\n\ncryptofunc:sha1 \"c91342b705b15cb4f6ac5362cc6a47d9425aec86\"\n\n\n\n\n\n\n\n\n\u2020 The \nfedora3model\n namespace is not a published namespace. It is a representation of the fcrepo3 namespace \ninfo:fedora/fedora-system:def/model\n. \n\n\u2021 Not yet implemented\n\n\nfcrepo3 RELS-EXT to fcrepo4 Mapping\n\n\n\n\n\n\n\n\nfcrepo3\n\n\nExample\n\n\nfcrepo4\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nfedora:isMemberOfCollection\n\n\nrdf:resource=\"info:fedora/yul:F0433\"\n\n\nfedora:hasParent\n\n\n\n\n\n\n\n\nfedora-model:hasModel\n\n\nrdf:resource=\"info:fedora/islandora:sp_large_image_cmodel\"\n\n\nrdf:type\n\n\nislandora:largeImage\n\n\n\n\n\n\nislandora:inheritXacmlFrom\n\n\nrdf:resource=\"info:fedora/yul:F0433\"\n\n\n\n\n\n\n\n\n\n\nislandora:hasLanguage\n\n\nfra\n\n\ndcterms:language\n\n\nfra\n\n\n\n\n\n\nislandora:isPageOf\n\n\nrdf:resource=\"info:fedora/yul:336566\"\n\n\n\n\n\n\n\n\n\n\nislandora:isSequenceNumber\n\n\n213\n\n\n\n\n\n\n\n\n\n\nislandora:isPageNumber\n\n\n213\n\n\n\n\n\n\n\n\n\n\nislandora:isSection\n\n\n1\n\n\n\n\n\n\n\n\n\n\nfedora:isConstituentOf\n\n\nrdf:resource=\"info:fedora/yul:271119\"\n\n\nfedora:hasParent\n\n\n\n\n\n\n\n\nislandora:isSequenceNumberOfyul_271119\n\n\n1\n\n\n\n\n\n\n\n\n\n\nislandora:dateIssued\n\n\n1945-10-31\n\n\n\n\n\n\n\n\n\n\nislandora:isSequenceNumber\n\n\n2023\n\n\n\n\n\n\n\n\n\n\nislandora:isMemberOf\n\n\nislandora:sp_large_image_cmodel\n\n\nfedora:hasParent\n\n\n\n\n\n\n\n\nfedora:isAnnotationOf\n\n\nrdf:resource=\"info:fedora/islandora:96\n\n\n\n\n\n\n\n\n\n\nislandora:targetedBy\n\n\nadmin\n\n\n\n\n\n\n\n\n\n\nislandora:isAnnotationType\n\n\nmy type\n\n\n\n\n\n\n\n\n\n\nislandora:hasURN\n\n\nurn:uuid:C691142D-FCC0-0001-F6B3-1390128014A5\n\n\n\n\n\n\n\n\n\n\nislandora:targets\n\n\ninfo:fedora/islandora:96\n\n\n\n\n\n\n\n\n\n\nislandora:isViewableByUser\n\n\nnruest\n\n\n\n\n\n\n\n\n\n\nislandora:isViewableByRole\n\n\nislandora creator\n\n\n\n\n\n\n\n\n\n\nislandora:isManageableByUser\n\n\nnruest\n\n\n\n\n\n\n\n\n\n\nislandora:isManageableByRole\n\n\nislandora administrator\n\n\n\n\n\n\n\n\n\n\n\n\nSamples\n\n\nLarge Image object\n\n\n\n\nrdf:RDF xmlns:rdf=\nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#\n xmlns:fedora=\ninfo:fedora/fedora-system:def/relations-external#\n xmlns:fedora-model=\ninfo:fedora/fedora-system:def/model#\n xmlns:islandora=\nhttp://islandora.ca/ontology/relsext#\n\n  \nrdf:Description rdf:about=\ninfo:fedora/yul:328697\n\n    \nfedora:isMemberOfCollection rdf:resource=\ninfo:fedora/yul:F0433\n/fedora:isMemberOfCollection\n\n    \nfedora-model:hasModel rdf:resource=\ninfo:fedora/islandora:sp_large_image_cmodel\n/fedora-model:hasModel\n\n    \nislandora:inheritXacmlFrom rdf:resource=\ninfo:fedora/yul:F0433\n/islandora:inheritXacmlFrom\n\n  \n/rdf:Description\n\n\n/rdf:RDF\n\n\n\n\n\nPage object\n\n\n\n\nrdf:RDF xmlns:rdf=\nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#\n xmlns:fedora=\ninfo:fedora/fedora-system:def/relations-external#\n xmlns:fedora-model=\ninfo:fedora/fedora-system:def/model#\n xmlns:islandora=\nhttp://islandora.ca/ontology/relsext#\n\n  \nrdf:Description rdf:about=\ninfo:fedora/yul:336779\n\n    \nfedora-model:hasModel rdf:resource=\ninfo:fedora/islandora:pageCModel\n/fedora-model:hasModel\n\n    \nislandora:hasLanguage\nfra\n/islandora:hasLanguage\n\n    \nislandora:isPageOf rdf:resource=\ninfo:fedora/yul:336566\n/islandora:isPageOf\n\n    \nislandora:isSequenceNumber\n213\n/islandora:isSequenceNumber\n\n    \nislandora:isPageNumber\n213\n/islandora:isPageNumber\n\n    \nislandora:isSection\n1\n/islandora:isSection\n\n    \nfedora:isMemberOf rdf:resource=\ninfo:fedora/yul:336566\n/fedora:isMemberOf\n\n    \nislandora:inheritXacmlFrom rdf:resource=\ninfo:fedora/yul:336566\n/islandora:inheritXacmlFrom\n\n  \n/rdf:Description\n\n\n/rdf:RDF\n\n\n\n\n\nCompound object (child)\n\n\n\n\nrdf:RDF xmlns:fedora=\ninfo:fedora/fedora-system:def/relations-external#\n xmlns:fedora-model=\ninfo:fedora/fedora-system:def/model#\n xmlns:islandora=\nhttp://islandora.ca/ontology/relsext#\n xmlns:rdf=\nhttp://www.w3.org/1999/02/22-rdf-syntax-ns#\n\n  \nrdf:Description rdf:about=\ninfo:fedora/yul:271117\n\n    \nfedora:isMemberOfCollection rdf:resource=\ninfo:fedora/yul:F0375\n/fedora:isMemberOfCollection\n\n    \nfedora-model:hasModel rdf:resource=\ninfo:fedora/islandora:sp_large_image_cmodel\n/fedora-model:hasModel\n\n    \nislandora:inheritXacmlFrom rdf:resource=\ninfo:fedora/yul:F0375\n/islandora:inheritXacmlFrom\n\n    \nfedora:isConstituentOf rdf:resource=\ninfo:fedora/yul:271119\n/fedora:isConstituentOf\n\n    \nislandora:isSequenceNumberOfyul_271119\n1\n/islandora:isSequenceNumberOfyul_271119\n\n  \n/rdf:Description\n\n\n/rdf:RDF\n\n\n\n\n\nNewspaper object\n\n\n\n\nrdf:RDF\n\n  \nrdf:Description rdf:about=\ninfo:fedora/uofm:1243378\n\n    \nfedora-model:hasModel rdf:resource=\ninfo:fedora/islandora:newspaperCModel\n/\n\n    \nfedora:isMemberOfCollection rdf:resource=\ninfo:fedora/uofm:libraries\n/\n\n  \n/rdf:Description\n\n\n/rdf:RDF\n\n\n\n\n\nNewspaper issue object\n\n\n\n\nrdf:RDF\n\n  \nrdf:Description rdf:about=\ninfo:fedora/uofm:1351347\n\n    \nfedora:isMemberOf rdf:resource=\ninfo:fedora/uofm:1243378\n/\n\n    \nfedora-model:hasModel rdf:resource=\ninfo:fedora/islandora:newspaperIssueCModel\n/\n\n    \nislandora:dateIssued\n1945-10-31\n/islandora:dateIssued\n\n    \nislandora:isSequenceNumber\n2023\n/islandora:isSequenceNumber\n\n  \n/rdf:Description\n\n\n/rdf:RDF\n\n\n\n\n\nNewspaper page object\n\n\n\n\nrdf:RDF\n\n  \nrdf:Description rdf:about=\ninfo:fedora/uofm:1351348\n\n    \nfedora-model:hasModel rdf:resource=\ninfo:fedora/islandora:newspaperPageCModel\n/\n\n    \nfedora:isMemberOf rdf:resource=\ninfo:fedora/uofm:1351347\n/\n\n    \nislandora:isPageOf rdf:resource=\ninfo:fedora/uofm:1351347\n/\n\n    \nislandora:isSequenceNumber\n1\n/islandora:isSequenceNumber\n\n    \nislandora:isPageNumber\n1\n/islandora:isPageNumber\n\n  \n/rdf:Description\n\n\n/rdf:RDF\n\n\n\n\n\nAudit log migration\n\n\nauditTrail mapping\n\n\n\n\n\n\n\n\nfcrepo3 event\n\n\nfcrepo4 Event Type\n\n\n\n\n\n\n\n\n\n\naddDatastream\n\n\npremis:ing\u2021\n\n\n\n\n\n\nmodifyDatastreamByReference\n\n\naudit:contentModification/metadataModification\u2021\n\n\n\n\n\n\nmodifyObject\n\n\naudit:resourceModification\u2021\n\n\n\n\n\n\nmodifyObject (checksum validation)\n\n\npremis:validation\u2021\n\n\n\n\n\n\nmodifyDatastreamByValue\n\n\naudit:contentModification/metadataModification\u2021\n\n\n\n\n\n\npurgeDatastream\n\n\naudit:contentRemoval\u2021\n\n\n\n\n\n\n\n\n\u2020 The \nfedora3model\n namespace is not a published namespace. It is a representation of the fcrepo3 namespace \ninfo:fedora/fedora-system:def/model\n. \n\n\u2021 Not yet implemented\n\n\nExamples\n:\n\n\naddDatastream\n\n\naudit:record ID=\nAUDREC1\n\n\naudit:process type=\nFedora API-M\n/\n\n\naudit:action\naddDatastream\n/audit:action\n\n\naudit:componentID\nTECHMD_FITS\n/audit:componentID\n\n\naudit:responsibility\njoanna\n/audit:responsibility\n\n\naudit:date\n2013-06-21T14:54:27.396Z\n/audit:date\n\n\naudit:justification\nCopied datastream from yul:61282.\n/audit:justification\n\n\n/audit:record\n\n\n\n\n\nmodifyDatastreamByReference\n\n\naudit:record ID=\nAUDREC4\n\n\naudit:process type=\nFedora API-M\n/\n\n\naudit:action\nmodifyDatastreamByReference\n/audit:action\n\n\naudit:componentID\nTN\n/audit:componentID\n\n\naudit:responsibility\nfedoraAdmin\n/audit:responsibility\n\n\naudit:date\n2013-06-22T05:14:34.443Z\n/audit:date\n\n\naudit:justification\n/audit:justification\n\n\n/audit:record\n\n\n\n\n\nmodifyObject\n\n\naudit:record ID=\nAUDREC5\n\n\naudit:process type=\nFedora API-M\n/\n\n\naudit:action\nmodifyObject\n/audit:action\n\n\naudit:componentID\n/audit:componentID\n\n\naudit:responsibility\njoanna\n/audit:responsibility\n\n\naudit:date\n2013-07-02T14:31:59.699Z\n/audit:date\n\n\naudit:justification\n/audit:justification\n\n\n/audit:record\n\n\n\n\n\nmodifyObject (checksum validation)\n\n\naudit:record ID=\nAUDREC23\n\n\naudit:process type=\nFedora API-M\n/\n\n\naudit:action\nmodifyObject\n/audit:action\n\n\naudit:componentID\n/audit:componentID\n\n\naudit:responsibility\nanonymous\n/audit:responsibility\n\n\naudit:date\n2014-01-22T21:07:43.502Z\n/audit:date\n\n\naudit:justification\nPREMIS:file=yul:96031+FULL_TEXT+FULL_TEXT.0; PREMIS:eventType=fixity check; PREMIS:eventOutcome=SHA-1 checksum validated.\n/audit:justification\n\n\n/audit:record\n\n\n\n\n\nmodifyDatastreamByValue\n\n\naudit:record ID=\nAUDREC16\n\n\naudit:process type=\nFedora API-M\n/\n\n\naudit:action\nmodifyDatastreamByValue\n/audit:action\n\n\naudit:componentID\nRELS-EXT\n/audit:componentID\n\n\naudit:responsibility\nnruest\n/audit:responsibility\n\n\naudit:date\n2013-11-27T15:42:08.823Z\n/audit:date\n\n\naudit:justification\n/audit:justification\n\n\n/audit:record\n\n\n\n\n\npurgeDatastream\n\n\naudit:record ID=\nAUDREC15\n\n\naudit:process type=\nFedora API-M\n/\n\n\naudit:action\npurgeDatastream\n/audit:action\n\n\naudit:componentID\nMKV\n/audit:componentID\n\n\naudit:responsibility\nfedoraAdmin\n/audit:responsibility\n\n\naudit:date\n2015-04-08T14:37:54.963Z\n/audit:date\n\n\naudit:justification\nPurged datastream (ID=MKV), versions ranging from the beginning of time to the end of time.  This resulted in the permanent removal of 1 datastream version(s) (2015-02-19T21:01:56.235Z) and all associated audit records.\n/audit:justification\n\n\n\n\n\nDiagrams\n\n\nExample Islandora (Large Image Object), PCDM, and Fedora 4 structure", 
            "title": "Migration"
        }, 
        {
            "location": "/migration/migration/#fcrepo3-object-properties-to-fcrepo4", 
            "text": "fcrepo 3  fcrepo4  Example      PID  fedora3model:PID\u2020  yul:328697    state  fedoraaccess:objState  Active    label  fedora3model:label\u2020  Elvis Presley    createDate  premis:hasDateCreatedByApplication  2015-03-16T20:11:06.683Z    lastModifiedDate  metadataModification  2015-03-16T20:11:06.683Z    ownerId  fedora3model:ownerId\u2020  nruest     \u2020 The  fedora3model  namespace is not a published namespace. It is a representation of the fcrepo3 namespace  info:fedora/fedora-system:def/model .  \n\u2021 Not yet implemented", 
            "title": "fcrepo3 Object properties to fcrepo4"
        }, 
        {
            "location": "/migration/migration/#fcrepo3-datastream-properties-to-fcrepo4", 
            "text": "fcrepo3  fcrepo4  Example      DSID  dcterms:identifier  OBJ    Label  dcterms:title\u2021  ASC19109.tif    MIME Type  ebucore:hasMimeType\u2020  image/tiff    State  fedoraaccess:objState  Active    Created  premis:hasDateCreatedByApplication  2015-03-16T20:11:06.683Z    Versionable  fedora:hasVersions\u2021  true    Format URI  premis:formatDesignation\u2021  info:pronom/fmt/156    Alternate IDs  dcterms:identifier\u2021     Access URL  dcterms:identifier\u2021     Checksum  cryptofunc: hashalgorithm \u2021  cryptofunc:sha1 \"c91342b705b15cb4f6ac5362cc6a47d9425aec86\"     \u2020 The  fedora3model  namespace is not a published namespace. It is a representation of the fcrepo3 namespace  info:fedora/fedora-system:def/model .  \n\u2021 Not yet implemented", 
            "title": "fcrepo3 Datastream properties to fcrepo4"
        }, 
        {
            "location": "/migration/migration/#fcrepo3-rels-ext-to-fcrepo4-mapping", 
            "text": "fcrepo3  Example  fcrepo4  Example      fedora:isMemberOfCollection  rdf:resource=\"info:fedora/yul:F0433\"  fedora:hasParent     fedora-model:hasModel  rdf:resource=\"info:fedora/islandora:sp_large_image_cmodel\"  rdf:type  islandora:largeImage    islandora:inheritXacmlFrom  rdf:resource=\"info:fedora/yul:F0433\"      islandora:hasLanguage  fra  dcterms:language  fra    islandora:isPageOf  rdf:resource=\"info:fedora/yul:336566\"      islandora:isSequenceNumber  213      islandora:isPageNumber  213      islandora:isSection  1      fedora:isConstituentOf  rdf:resource=\"info:fedora/yul:271119\"  fedora:hasParent     islandora:isSequenceNumberOfyul_271119  1      islandora:dateIssued  1945-10-31      islandora:isSequenceNumber  2023      islandora:isMemberOf  islandora:sp_large_image_cmodel  fedora:hasParent     fedora:isAnnotationOf  rdf:resource=\"info:fedora/islandora:96      islandora:targetedBy  admin      islandora:isAnnotationType  my type      islandora:hasURN  urn:uuid:C691142D-FCC0-0001-F6B3-1390128014A5      islandora:targets  info:fedora/islandora:96      islandora:isViewableByUser  nruest      islandora:isViewableByRole  islandora creator      islandora:isManageableByUser  nruest      islandora:isManageableByRole  islandora administrator       Samples  Large Image object   rdf:RDF xmlns:rdf= http://www.w3.org/1999/02/22-rdf-syntax-ns#  xmlns:fedora= info:fedora/fedora-system:def/relations-external#  xmlns:fedora-model= info:fedora/fedora-system:def/model#  xmlns:islandora= http://islandora.ca/ontology/relsext# \n   rdf:Description rdf:about= info:fedora/yul:328697 \n     fedora:isMemberOfCollection rdf:resource= info:fedora/yul:F0433 /fedora:isMemberOfCollection \n     fedora-model:hasModel rdf:resource= info:fedora/islandora:sp_large_image_cmodel /fedora-model:hasModel \n     islandora:inheritXacmlFrom rdf:resource= info:fedora/yul:F0433 /islandora:inheritXacmlFrom \n   /rdf:Description  /rdf:RDF   Page object   rdf:RDF xmlns:rdf= http://www.w3.org/1999/02/22-rdf-syntax-ns#  xmlns:fedora= info:fedora/fedora-system:def/relations-external#  xmlns:fedora-model= info:fedora/fedora-system:def/model#  xmlns:islandora= http://islandora.ca/ontology/relsext# \n   rdf:Description rdf:about= info:fedora/yul:336779 \n     fedora-model:hasModel rdf:resource= info:fedora/islandora:pageCModel /fedora-model:hasModel \n     islandora:hasLanguage fra /islandora:hasLanguage \n     islandora:isPageOf rdf:resource= info:fedora/yul:336566 /islandora:isPageOf \n     islandora:isSequenceNumber 213 /islandora:isSequenceNumber \n     islandora:isPageNumber 213 /islandora:isPageNumber \n     islandora:isSection 1 /islandora:isSection \n     fedora:isMemberOf rdf:resource= info:fedora/yul:336566 /fedora:isMemberOf \n     islandora:inheritXacmlFrom rdf:resource= info:fedora/yul:336566 /islandora:inheritXacmlFrom \n   /rdf:Description  /rdf:RDF   Compound object (child)   rdf:RDF xmlns:fedora= info:fedora/fedora-system:def/relations-external#  xmlns:fedora-model= info:fedora/fedora-system:def/model#  xmlns:islandora= http://islandora.ca/ontology/relsext#  xmlns:rdf= http://www.w3.org/1999/02/22-rdf-syntax-ns# \n   rdf:Description rdf:about= info:fedora/yul:271117 \n     fedora:isMemberOfCollection rdf:resource= info:fedora/yul:F0375 /fedora:isMemberOfCollection \n     fedora-model:hasModel rdf:resource= info:fedora/islandora:sp_large_image_cmodel /fedora-model:hasModel \n     islandora:inheritXacmlFrom rdf:resource= info:fedora/yul:F0375 /islandora:inheritXacmlFrom \n     fedora:isConstituentOf rdf:resource= info:fedora/yul:271119 /fedora:isConstituentOf \n     islandora:isSequenceNumberOfyul_271119 1 /islandora:isSequenceNumberOfyul_271119 \n   /rdf:Description  /rdf:RDF   Newspaper object   rdf:RDF \n   rdf:Description rdf:about= info:fedora/uofm:1243378 \n     fedora-model:hasModel rdf:resource= info:fedora/islandora:newspaperCModel / \n     fedora:isMemberOfCollection rdf:resource= info:fedora/uofm:libraries / \n   /rdf:Description  /rdf:RDF   Newspaper issue object   rdf:RDF \n   rdf:Description rdf:about= info:fedora/uofm:1351347 \n     fedora:isMemberOf rdf:resource= info:fedora/uofm:1243378 / \n     fedora-model:hasModel rdf:resource= info:fedora/islandora:newspaperIssueCModel / \n     islandora:dateIssued 1945-10-31 /islandora:dateIssued \n     islandora:isSequenceNumber 2023 /islandora:isSequenceNumber \n   /rdf:Description  /rdf:RDF   Newspaper page object   rdf:RDF \n   rdf:Description rdf:about= info:fedora/uofm:1351348 \n     fedora-model:hasModel rdf:resource= info:fedora/islandora:newspaperPageCModel / \n     fedora:isMemberOf rdf:resource= info:fedora/uofm:1351347 / \n     islandora:isPageOf rdf:resource= info:fedora/uofm:1351347 / \n     islandora:isSequenceNumber 1 /islandora:isSequenceNumber \n     islandora:isPageNumber 1 /islandora:isPageNumber \n   /rdf:Description  /rdf:RDF", 
            "title": "fcrepo3 RELS-EXT to fcrepo4 Mapping"
        }, 
        {
            "location": "/migration/migration/#audit-log-migration", 
            "text": "auditTrail mapping     fcrepo3 event  fcrepo4 Event Type      addDatastream  premis:ing\u2021    modifyDatastreamByReference  audit:contentModification/metadataModification\u2021    modifyObject  audit:resourceModification\u2021    modifyObject (checksum validation)  premis:validation\u2021    modifyDatastreamByValue  audit:contentModification/metadataModification\u2021    purgeDatastream  audit:contentRemoval\u2021     \u2020 The  fedora3model  namespace is not a published namespace. It is a representation of the fcrepo3 namespace  info:fedora/fedora-system:def/model .  \n\u2021 Not yet implemented  Examples :  addDatastream  audit:record ID= AUDREC1  audit:process type= Fedora API-M /  audit:action addDatastream /audit:action  audit:componentID TECHMD_FITS /audit:componentID  audit:responsibility joanna /audit:responsibility  audit:date 2013-06-21T14:54:27.396Z /audit:date  audit:justification Copied datastream from yul:61282. /audit:justification  /audit:record   modifyDatastreamByReference  audit:record ID= AUDREC4  audit:process type= Fedora API-M /  audit:action modifyDatastreamByReference /audit:action  audit:componentID TN /audit:componentID  audit:responsibility fedoraAdmin /audit:responsibility  audit:date 2013-06-22T05:14:34.443Z /audit:date  audit:justification /audit:justification  /audit:record   modifyObject  audit:record ID= AUDREC5  audit:process type= Fedora API-M /  audit:action modifyObject /audit:action  audit:componentID /audit:componentID  audit:responsibility joanna /audit:responsibility  audit:date 2013-07-02T14:31:59.699Z /audit:date  audit:justification /audit:justification  /audit:record   modifyObject (checksum validation)  audit:record ID= AUDREC23  audit:process type= Fedora API-M /  audit:action modifyObject /audit:action  audit:componentID /audit:componentID  audit:responsibility anonymous /audit:responsibility  audit:date 2014-01-22T21:07:43.502Z /audit:date  audit:justification PREMIS:file=yul:96031+FULL_TEXT+FULL_TEXT.0; PREMIS:eventType=fixity check; PREMIS:eventOutcome=SHA-1 checksum validated. /audit:justification  /audit:record   modifyDatastreamByValue  audit:record ID= AUDREC16  audit:process type= Fedora API-M /  audit:action modifyDatastreamByValue /audit:action  audit:componentID RELS-EXT /audit:componentID  audit:responsibility nruest /audit:responsibility  audit:date 2013-11-27T15:42:08.823Z /audit:date  audit:justification /audit:justification  /audit:record   purgeDatastream  audit:record ID= AUDREC15  audit:process type= Fedora API-M /  audit:action purgeDatastream /audit:action  audit:componentID MKV /audit:componentID  audit:responsibility fedoraAdmin /audit:responsibility  audit:date 2015-04-08T14:37:54.963Z /audit:date  audit:justification Purged datastream (ID=MKV), versions ranging from the beginning of time to the end of time.  This resulted in the permanent removal of 1 datastream version(s) (2015-02-19T21:01:56.235Z) and all associated audit records. /audit:justification", 
            "title": "Audit log migration"
        }, 
        {
            "location": "/migration/migration/#diagrams", 
            "text": "Example Islandora (Large Image Object), PCDM, and Fedora 4 structure", 
            "title": "Diagrams"
        }, 
        {
            "location": "/migration/fedora-namespace-predicates/", 
            "text": "Fedora 3.x namespace RELS-EXT predicates\n\n\n$ grep -R \"FEDORA_RELS_EXT_URI\" Islandora-7.x\n\n\nIslandora\n\n\n\n\nisMemberOfCollection\n\n\nisMemberOf\n\n\n\n\nImage Annotation\n\n\n\n\nisAnnotationOf\n\n\n\n\nCompound\n\n\n\n\nisConstituentOf\n\n\nisPartOf", 
            "title": "Fedora namespace predicates"
        }, 
        {
            "location": "/migration/fedora-namespace-predicates/#fedora-3x-namespace-rels-ext-predicates", 
            "text": "$ grep -R \"FEDORA_RELS_EXT_URI\" Islandora-7.x", 
            "title": "Fedora 3.x namespace RELS-EXT predicates"
        }, 
        {
            "location": "/migration/fedora-namespace-predicates/#islandora", 
            "text": "isMemberOfCollection  isMemberOf", 
            "title": "Islandora"
        }, 
        {
            "location": "/migration/fedora-namespace-predicates/#image-annotation", 
            "text": "isAnnotationOf", 
            "title": "Image Annotation"
        }, 
        {
            "location": "/migration/fedora-namespace-predicates/#compound", 
            "text": "isConstituentOf  isPartOf", 
            "title": "Compound"
        }, 
        {
            "location": "/migration/islandora-namespace-predicates/", 
            "text": "Islandora namespace RELS-EXT predicates\n\n\n$ grep -R \"ISLANDORA_RELS_EXT_URI\" Islandora-7.x\n\n\nBook\n\n\n\n\nisPageOf\n\n\nisSequenceNumber\n\n\nisPageNumber\n\n\nisSection\n\n\n\n\nImage Annotation\n\n\n\n\ntargetedBy\n\n\ntargets\n\n\nhasColor\n\n\nhasURN\n\n\nstrokeWidth\n\n\nisEntity\n\n\nisAnnotationType\n\n\n\n\nOCR\n\n\n\n\nhasLanguage\n\n\ngenerate_ocr\n\n\n\n\nBook Batch\n\n\n\n\nbook-batched\n\n\nemail-admin-when-ingested\n\n\n\n\nNewspaper\n\n\n\n\nisPageOf\n\n\nisSequenceNumber\n\n\ndateIssued\n\n\n\n\nXACML\n\n\n\n\nisViewableByRole\n\n\nisManageableByRole\n\n\nisViewableByUser\n\n\nisManageableByUser\n\n\n\n\nPaged Content\n\n\n\n\nhasLanguage\n\n\nisPageOf\n\n\nisSequenceNumber\n\n\nisPageNumber\n\n\nisSection\n\n\n\n\nCompound\n\n\n\n\nisSequenceNumberOf$escaped_pid", 
            "title": "Islandora namespace predicates"
        }, 
        {
            "location": "/migration/islandora-namespace-predicates/#islandora-namespace-rels-ext-predicates", 
            "text": "$ grep -R \"ISLANDORA_RELS_EXT_URI\" Islandora-7.x", 
            "title": "Islandora namespace RELS-EXT predicates"
        }, 
        {
            "location": "/migration/islandora-namespace-predicates/#book", 
            "text": "isPageOf  isSequenceNumber  isPageNumber  isSection", 
            "title": "Book"
        }, 
        {
            "location": "/migration/islandora-namespace-predicates/#image-annotation", 
            "text": "targetedBy  targets  hasColor  hasURN  strokeWidth  isEntity  isAnnotationType", 
            "title": "Image Annotation"
        }, 
        {
            "location": "/migration/islandora-namespace-predicates/#ocr", 
            "text": "hasLanguage  generate_ocr", 
            "title": "OCR"
        }, 
        {
            "location": "/migration/islandora-namespace-predicates/#book-batch", 
            "text": "book-batched  email-admin-when-ingested", 
            "title": "Book Batch"
        }, 
        {
            "location": "/migration/islandora-namespace-predicates/#newspaper", 
            "text": "isPageOf  isSequenceNumber  dateIssued", 
            "title": "Newspaper"
        }, 
        {
            "location": "/migration/islandora-namespace-predicates/#xacml", 
            "text": "isViewableByRole  isManageableByRole  isViewableByUser  isManageableByUser", 
            "title": "XACML"
        }, 
        {
            "location": "/migration/islandora-namespace-predicates/#paged-content", 
            "text": "hasLanguage  isPageOf  isSequenceNumber  isPageNumber  isSection", 
            "title": "Paged Content"
        }, 
        {
            "location": "/migration/islandora-namespace-predicates/#compound", 
            "text": "isSequenceNumberOf$escaped_pid", 
            "title": "Compound"
        }
    ]
}