{
    "docs": [
        {
            "location": "/", 
            "text": "Islandora CLAW\n\n\nSummary\n\n\nIslandora\n is an open-source repository framework, that combines a Drupal front-end\nwith a Fedora repository. It is a solution for institutions who want an extremely flexible and configurable preservation repository without creating a lot of custom code.\n\n\nIslandora CLAW integrates \nDrupal\n (currently, Drupal 8) and Duraspace's \nFedora Repository\n project (currently, Fedora 5). Islandora CLAW is currently in beta. (todo: release section?)\n\n\nIslandora CLAW allows you to create nodes, media, files, and taxonomy terms in Drupal, which are converted to RDF\nand pushed into a Fedora repository. It allows you to configure derivatives, automatic processes that transform files to other types for display or preservation, or extract additional metadata.\n\n\nInstallation\n\n\nIslandora CLAW is installed through an Ansible Playbook called \nclaw-playbook\n.\nWith Git, Vagrant, and Ansible installed, you can spin up a local development environment with\n\n\ngit clone https://github.com/Islandora-Devops/claw-playbook\ncd claw-playbook\nvagrant up\n\n\n\n\nSee the Installation section for more information.", 
            "title": "Summary"
        }, 
        {
            "location": "/#islandora-claw", 
            "text": "", 
            "title": "Islandora CLAW"
        }, 
        {
            "location": "/#summary", 
            "text": "Islandora  is an open-source repository framework, that combines a Drupal front-end\nwith a Fedora repository. It is a solution for institutions who want an extremely flexible and configurable preservation repository without creating a lot of custom code.  Islandora CLAW integrates  Drupal  (currently, Drupal 8) and Duraspace's  Fedora Repository  project (currently, Fedora 5). Islandora CLAW is currently in beta. (todo: release section?)  Islandora CLAW allows you to create nodes, media, files, and taxonomy terms in Drupal, which are converted to RDF\nand pushed into a Fedora repository. It allows you to configure derivatives, automatic processes that transform files to other types for display or preservation, or extract additional metadata.", 
            "title": "Summary"
        }, 
        {
            "location": "/#installation", 
            "text": "Islandora CLAW is installed through an Ansible Playbook called  claw-playbook .\nWith Git, Vagrant, and Ansible installed, you can spin up a local development environment with  git clone https://github.com/Islandora-Devops/claw-playbook\ncd claw-playbook\nvagrant up  See the Installation section for more information.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/", 
            "text": "For full installation instructions, check out the README for our Ansible playbook, \nclaw-playbook\n.", 
            "title": "Installation"
        }, 
        {
            "location": "/user-documentation/user-intro/", 
            "text": "This \nUser Documentation\n section is aimed at site admins and repository managers who need to understand and configure their Islandora.\nIt will go in depth on how Islandora allows you to use the various features of Drupal to construct and display repository items.\n\n\nIslandora, like Drupal, provides tools to create a site, but does not force you to conform to any specific site structure,\norganization, or navigation. There is a hope that we can provide something useful out of the box, while also allowing the\nfull suite of Drupal configuration options. This out-of-the-box configuration is the Islandora Demo module.\n\n\nIt is recommended to be familiar with the basics of Drupal, including content types, fields, users, and views.\nThe \nOfficial Drupal 8 User Guide\n and the\n\nCommunity Guide to Drupal 8\n are a good place to start.\n\n\nObject Modeling\n\n\nIn Islandora, when we say \nobject\n, we mean a collection of properties describing something.\nAnd when we say \ndatastream\n, we mean a file that is a digital representation of an object.\nContent in our repositories is stored as an object that is associated with any number of datastreams.\nIn Drupal terms, that makes everything an \nentity\n, where\n\n\n\n\nAn object is a \nnode\n (a.k.a. \ncontent\n).\n\n\nNodes have properties that can be configured called \nfields\n.\n\n\nFields for nodes are grouped together as \ncontent types\n.\n\n\nDatastreams are \nmedia\n, which are \nfiles\n that can have their own fields and \nmedia types\n.\n\n\nMetadata used to categorize entities are \ntaxonomy terms\n, which also have their own fields and \nvocabularies\n.\nThey can represent everything from simple labels to more complex concepts such as people, places, and subjects.\n\n\n\n\nFedora\n\n\nIslandora 7.x basically inherits its object model from Fedora 3.x. In 7.x, Fedora stores all properties and content associated with an object - not only its owner, dc.title, status, PID, and status, but also any content files such as OBJ, DC, MODS, and RELS-EXT. In Islandora 7.x, Fedora is the authoritative, primary source for all aspects of an object. Fedora 3.x is not an optional component of an Islandora 7.x repository, it is the primary datastore.\n\n\nIn Islandora 8, using Fedora is optional. That's right, optional. Drupal, and not Fedora, is the primary source of all aspects of an Islandora 8 object, and, with some variations, Drupal, not Fedora, is the primary datastore in an Islandora repository. If Fedora is present in an Islandora 8 repository, content in it is a tightly syncronized copy of object properties and files managed by Drupal.\n\n\nEven though Fedora is optional in Islandora 8, most repositories will use it since it provides its own set of services that are worth taking advantage of, such as:\n\n\n\n\nflexible, and configurable, disk storage architecture\n\n\nfixity digest generation\n\n\nMemento versioning\n\n\nintegration with RDF/Linked Data triplestores\n\n\nIntegration with Microservices via API-X\n\n\nWebAC Policies for access control\n\n\n\n\nIn Islandora repositories that use Fedora, all properties about Drupal nodes are mirrored in Fedora as RDF properties. But, even if an Islandora instance does not use Fedora, Drupal can provide an object's properties as RDF (again, Drupal is the primary source of data in Islandora 8). In addition, the Drupal media associated with Islandora 8 objects are persisted to Fedora, although exactly which media is configurable within the Islandora 8 admin interface. Just as Drupal out of the box has a public and private filesystem, Islandora adds a third filesystem to Drupal called, not surprisigly, \"fedora\", and it is to this filesystem that media are persisted. We will provide more information about Fedora's role in an Islandora 8 repository in the \nmetadata\n and \nmedia\n sections.\n\n\nArchitecture\n\n\n\n\nTodo\n\n\n\n\nIslandora is middleware\n\n\nThe Chimera diagram\n\n\nReference to dev section for more info.", 
            "title": "Introduction"
        }, 
        {
            "location": "/user-documentation/user-intro/#object-modeling", 
            "text": "In Islandora, when we say  object , we mean a collection of properties describing something.\nAnd when we say  datastream , we mean a file that is a digital representation of an object.\nContent in our repositories is stored as an object that is associated with any number of datastreams.\nIn Drupal terms, that makes everything an  entity , where   An object is a  node  (a.k.a.  content ).  Nodes have properties that can be configured called  fields .  Fields for nodes are grouped together as  content types .  Datastreams are  media , which are  files  that can have their own fields and  media types .  Metadata used to categorize entities are  taxonomy terms , which also have their own fields and  vocabularies .\nThey can represent everything from simple labels to more complex concepts such as people, places, and subjects.", 
            "title": "Object Modeling"
        }, 
        {
            "location": "/user-documentation/user-intro/#fedora", 
            "text": "Islandora 7.x basically inherits its object model from Fedora 3.x. In 7.x, Fedora stores all properties and content associated with an object - not only its owner, dc.title, status, PID, and status, but also any content files such as OBJ, DC, MODS, and RELS-EXT. In Islandora 7.x, Fedora is the authoritative, primary source for all aspects of an object. Fedora 3.x is not an optional component of an Islandora 7.x repository, it is the primary datastore.  In Islandora 8, using Fedora is optional. That's right, optional. Drupal, and not Fedora, is the primary source of all aspects of an Islandora 8 object, and, with some variations, Drupal, not Fedora, is the primary datastore in an Islandora repository. If Fedora is present in an Islandora 8 repository, content in it is a tightly syncronized copy of object properties and files managed by Drupal.  Even though Fedora is optional in Islandora 8, most repositories will use it since it provides its own set of services that are worth taking advantage of, such as:   flexible, and configurable, disk storage architecture  fixity digest generation  Memento versioning  integration with RDF/Linked Data triplestores  Integration with Microservices via API-X  WebAC Policies for access control   In Islandora repositories that use Fedora, all properties about Drupal nodes are mirrored in Fedora as RDF properties. But, even if an Islandora instance does not use Fedora, Drupal can provide an object's properties as RDF (again, Drupal is the primary source of data in Islandora 8). In addition, the Drupal media associated with Islandora 8 objects are persisted to Fedora, although exactly which media is configurable within the Islandora 8 admin interface. Just as Drupal out of the box has a public and private filesystem, Islandora adds a third filesystem to Drupal called, not surprisigly, \"fedora\", and it is to this filesystem that media are persisted. We will provide more information about Fedora's role in an Islandora 8 repository in the  metadata  and  media  sections.", 
            "title": "Fedora"
        }, 
        {
            "location": "/user-documentation/user-intro/#architecture", 
            "text": "Todo   Islandora is middleware  The Chimera diagram  Reference to dev section for more info.", 
            "title": "Architecture"
        }, 
        {
            "location": "/user-documentation/objects/", 
            "text": "As we learned in Intro, objects in an Islandora repository are represented as nodes in Drupal.\nBecause of this, their metadata profile, display, form (and much more) are configurable through\nthe Drupal UI.  This gives repository administrators a huge degree of control over their repository\nwithout any need for coding. Much more so than ever before. And since we're using a core Drupal\nsolution for modeling our objects, compatibility with third-party modules is virtually guaranteed.\nThis opens up a plethora of solutions from the Drupal community that will save you untold time\nand effort when implementing your repository with Islandora.\n\n\nProperties\n\n\nNodes have some basic properties that are common to all nodes, regardless of content type.  These\nproperties are not fields.  This means that\nthey cannot changed or removed. Their name, what type of data they hold, etc... are all baked in.\nHere's an example of the basic properties you'll see on a node:\n\n\nnid: 1\nuid: 1\ntitle: \nI am an Islandora 8 object\n\ncreated: 1550703004\nchanged: 1550703512\nuuid: 02932f2c-e4c2-4b7e-95e1-4aceab78c638\ntype: islandora_object\nstatus: 1\n\n\n\n\nAs you can see, it's all system data used at the Drupal level to track the basics.\n\n\n\n\n\n\n\n\nProperty\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nnid\n\n\nThe local ID for a node\n\n\n\n\n\n\nuuid\n\n\nThe global ID for any entity\n\n\n\n\n\n\ntitle\n\n\nThe title for a node\n\n\n\n\n\n\ncreated\n\n\nTimestamp of when node was created\n\n\n\n\n\n\nchanged\n\n\nTimestamp of when a node was last updated\n\n\n\n\n\n\ntype\n\n\nContent type (e.g. which group of fields are present on the node)\n\n\n\n\n\n\nstatus\n\n\nPublished, unpublished, etc...\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nThese node properties directly correspond to following Islandora 7.x object properties:\n\n\n\n\n\n\n\n\nIslandora 7\n\n\nIslandora 8\n\n\n\n\n\n\n\n\n\n\nowner\n\n\nuid\n\n\n\n\n\n\ndc.title\n\n\ntitle\n\n\n\n\n\n\nPID\n\n\nuuid\n\n\n\n\n\n\nstatus\n\n\nstatus\n\n\n\n\n\n\n\n\n\n\nFields\n\n\nIn addition to the basic node properties identified above, Islandora objects (like all Drupal nodes) can have fields.\nMost of what we would think of as descriptive metadata is stored as fields. Since a specific set of required and optional\nfields is assigned to a node by giving it a content type, we can think of content types as metadata profiles for our objects.\nFor example, you might have a content type for a set of repository objects that have very specialized metadata requirements but\nanother content type for generic repository objects that share a more general set of metadata fields.\nThe section on \nmetadata\n describes in more detail how fields on Islandora objects work.\n\n\nContent Models\n\n\nIslandora has a notion of a \ncontent model\n, which is used to identify what type of content is\nbeing represented by a node (e.g. an image, a video, a collection of other items, etc...). This is done\nusing a special field, \"Model\", which accepts taxonomy terms from the \"Islandora Models\" vocabulary.\nBy applying a term from the Islandora Models vocabulary to a node, Islandora will become aware\nof how to handle the node in response to certain events, like choosing a viewer or generating derivatives.\n\n\n\n\n\n\nNote\n\n\nContent models in Islandora 7 were immutable, and contained restrictions as to what\ntypes of datastreams could be associated with an object.  Islandora 8 imposes no such\nrestrictions. Content models can be changed at any time, and they in no way dictate what\ntypes of media can be associated with a node.\n\n\n\n\nMembers\n\n\nIslandora has a notion of \nmembership\n, which is used to create a parent/child relationship between\ntwo nodes. Any two nodes can be related in this way, though typically, the parent node has a content\nmodel of Collection. Membership (to a Collection or otherwise) is denoted using another special\nfield, \"Member Of\".  The \"Member Of\" field can hold multiple references, so it is possible for a\nsingle child to belong to multiple parents.\n\n\n\n\nNote\n\n\nIn Islandora 7, there was a distinction between belonging to a collection and belonging to\na compound object.  In Islandora 8, this distinction is not present, essentially making every object\na compound object.\n\n\n\n\nFor any node, its \"Members\" tab can be used to see all its members.  You can also perform Actions in\nbulk on members using the check boxes and the Actions drop down.\n\n\n\n\nMedia\n\n\nAll nodes can contain any number of media.  The media for any node can be managed using the \"Media\" tab when viewing a node.  Much like\nthe \"Members\" tab, Actions can be performed in bulk using the check boxes and Actions drop down.", 
            "title": "Nodes"
        }, 
        {
            "location": "/user-documentation/objects/#properties", 
            "text": "Nodes have some basic properties that are common to all nodes, regardless of content type.  These\nproperties are not fields.  This means that\nthey cannot changed or removed. Their name, what type of data they hold, etc... are all baked in.\nHere's an example of the basic properties you'll see on a node:  nid: 1\nuid: 1\ntitle:  I am an Islandora 8 object \ncreated: 1550703004\nchanged: 1550703512\nuuid: 02932f2c-e4c2-4b7e-95e1-4aceab78c638\ntype: islandora_object\nstatus: 1  As you can see, it's all system data used at the Drupal level to track the basics.     Property  Value      nid  The local ID for a node    uuid  The global ID for any entity    title  The title for a node    created  Timestamp of when node was created    changed  Timestamp of when a node was last updated    type  Content type (e.g. which group of fields are present on the node)    status  Published, unpublished, etc...      Note  These node properties directly correspond to following Islandora 7.x object properties:     Islandora 7  Islandora 8      owner  uid    dc.title  title    PID  uuid    status  status", 
            "title": "Properties"
        }, 
        {
            "location": "/user-documentation/objects/#fields", 
            "text": "In addition to the basic node properties identified above, Islandora objects (like all Drupal nodes) can have fields.\nMost of what we would think of as descriptive metadata is stored as fields. Since a specific set of required and optional\nfields is assigned to a node by giving it a content type, we can think of content types as metadata profiles for our objects.\nFor example, you might have a content type for a set of repository objects that have very specialized metadata requirements but\nanother content type for generic repository objects that share a more general set of metadata fields.\nThe section on  metadata  describes in more detail how fields on Islandora objects work.", 
            "title": "Fields"
        }, 
        {
            "location": "/user-documentation/objects/#content-models", 
            "text": "Islandora has a notion of a  content model , which is used to identify what type of content is\nbeing represented by a node (e.g. an image, a video, a collection of other items, etc...). This is done\nusing a special field, \"Model\", which accepts taxonomy terms from the \"Islandora Models\" vocabulary.\nBy applying a term from the Islandora Models vocabulary to a node, Islandora will become aware\nof how to handle the node in response to certain events, like choosing a viewer or generating derivatives.    Note  Content models in Islandora 7 were immutable, and contained restrictions as to what\ntypes of datastreams could be associated with an object.  Islandora 8 imposes no such\nrestrictions. Content models can be changed at any time, and they in no way dictate what\ntypes of media can be associated with a node.", 
            "title": "Content Models"
        }, 
        {
            "location": "/user-documentation/objects/#members", 
            "text": "Islandora has a notion of  membership , which is used to create a parent/child relationship between\ntwo nodes. Any two nodes can be related in this way, though typically, the parent node has a content\nmodel of Collection. Membership (to a Collection or otherwise) is denoted using another special\nfield, \"Member Of\".  The \"Member Of\" field can hold multiple references, so it is possible for a\nsingle child to belong to multiple parents.   Note  In Islandora 7, there was a distinction between belonging to a collection and belonging to\na compound object.  In Islandora 8, this distinction is not present, essentially making every object\na compound object.   For any node, its \"Members\" tab can be used to see all its members.  You can also perform Actions in\nbulk on members using the check boxes and the Actions drop down.", 
            "title": "Members"
        }, 
        {
            "location": "/user-documentation/objects/#media", 
            "text": "All nodes can contain any number of media.  The media for any node can be managed using the \"Media\" tab when viewing a node.  Much like\nthe \"Members\" tab, Actions can be performed in bulk using the check boxes and Actions drop down.", 
            "title": "Media"
        }, 
        {
            "location": "/user-documentation/datastreams/", 
            "text": "Drupal 8 recognizes files (such as images, audio files, video files, etc.) but wraps each file in an intermediate structure called a\n\"media\" to allow us to attach fields to files. It is in a media's fields that we store information about the media's file, such as file\nsize, width and height (for images), alt text (for images), creation date, and so on.\n\n\n\n\nNote\n\n\nIn Islandora 7, this sort of technical metadata would have been stored in a single RELS-INT datastream.\nIn Islandora 8, each datastream holds its own technical metadata using media entities.\n\n\n\n\nMedia Ownership\n\n\nIslandora 8 objects can have any number of media associated with them. Media advertise which object they belong to using a special field,\n\"Media Of\". By editing this field, you can change the what node owns the media, and therefore, where it gets displayed or managed.\n\n\n\n\nNote\n\n\nThe direction of the relationship between objects and datastreams is reversed when compared to Islandora 7.  Generally speaking,\nobjects are unaware of their datastreams, and it's a Drupal view that lists datastreams for an object.\n\n\n\n\nMedia Usage\n\n\nIslandora 8 media express their intended use with a special \"Media Use\" field, which accepts taxonomy terms from the \"Media Usage\"\nvocabulary. Because the Media Usage vocabulary is an ordinary Drupal vocabulary, Islandora 8 site administrators can add their own\nterms, and in turn, these local terms can be used to identify media that have some custom local purpose.\n\n\n\n\n\n\nNote\n\n\nTerms from the Media Usage vocabulary are very similar to DSIDs in Islandora 7.  The only difference is that a DSID is immutable,\nbut a media's usage can be changed at any time through the media's edit form.\n\n\n\n\nDerivatives\n\n\nIslandora generates derivatives based on Media Usage for a Media and the Model of the node that owns it.  All of this is configurable\nusing context, but by default, derivatives are generated from \"Original Files\". When an Original File is uploaded, if the node that\nowns it has an \"Image\" model, image derivatives are created.  If it's a \"Video\", then video derivatives are generated, etc...\n\n\n\n\nWithin an node's media tab, you can see all of its media, including derivatives, listed along with their usage. For example, from the\nOriginal File, a lower quality \"Service File\" and a smaller \"Thumbnail Image\" file were generated.\n\n\nFor more information on how to set configure derivatives, see the section on context.\n\n\nMedia revisions\n\n\nTo be completed on resolution of https://github.com/Islandora-CLAW/CLAW/issues/1035.", 
            "title": "Media"
        }, 
        {
            "location": "/user-documentation/datastreams/#media-ownership", 
            "text": "Islandora 8 objects can have any number of media associated with them. Media advertise which object they belong to using a special field,\n\"Media Of\". By editing this field, you can change the what node owns the media, and therefore, where it gets displayed or managed.   Note  The direction of the relationship between objects and datastreams is reversed when compared to Islandora 7.  Generally speaking,\nobjects are unaware of their datastreams, and it's a Drupal view that lists datastreams for an object.", 
            "title": "Media Ownership"
        }, 
        {
            "location": "/user-documentation/datastreams/#media-usage", 
            "text": "Islandora 8 media express their intended use with a special \"Media Use\" field, which accepts taxonomy terms from the \"Media Usage\"\nvocabulary. Because the Media Usage vocabulary is an ordinary Drupal vocabulary, Islandora 8 site administrators can add their own\nterms, and in turn, these local terms can be used to identify media that have some custom local purpose.    Note  Terms from the Media Usage vocabulary are very similar to DSIDs in Islandora 7.  The only difference is that a DSID is immutable,\nbut a media's usage can be changed at any time through the media's edit form.", 
            "title": "Media Usage"
        }, 
        {
            "location": "/user-documentation/datastreams/#derivatives", 
            "text": "Islandora generates derivatives based on Media Usage for a Media and the Model of the node that owns it.  All of this is configurable\nusing context, but by default, derivatives are generated from \"Original Files\". When an Original File is uploaded, if the node that\nowns it has an \"Image\" model, image derivatives are created.  If it's a \"Video\", then video derivatives are generated, etc...   Within an node's media tab, you can see all of its media, including derivatives, listed along with their usage. For example, from the\nOriginal File, a lower quality \"Service File\" and a smaller \"Thumbnail Image\" file were generated.  For more information on how to set configure derivatives, see the section on context.", 
            "title": "Derivatives"
        }, 
        {
            "location": "/user-documentation/datastreams/#media-revisions", 
            "text": "To be completed on resolution of https://github.com/Islandora-CLAW/CLAW/issues/1035.", 
            "title": "Media revisions"
        }, 
        {
            "location": "/user-documentation/creating-an-object/", 
            "text": "To create a new item in your Islandora 8 digital repository, we start by creating a node.\nA node holds the descriptive metadata for content, as well as grouping together an original file and\nall of the derivatives files generated from it. To create node, click on Add content.\nThis is under Tools.\n\n\n\n\nThen click on Repository Item. This will assign the default metadata profile to your item.\n\n\n\n\nFill out the form. We're going to create an image, so under System, select \"Image\" from the \"Model\"\ndrop down box. Selecting different models will impact how Islandora handles content, dictating\nimportant behaviours such as display and derivative generation.\n\n\n\n\nWhen done, click Save.\n\n\nUpload an Original File\n\n\nCongratulations, you have created a Node! But alas, it has no files.  To upload a file, click on the\nnode's Media tab.\n\n\n\n\nThen click on Add Media (a blue button).\n\n\n\n\nWe want to add an image, so clicking on \"Image\" is appropriate in most circumstances. Drupal considers\nany type of image that can be viewed natively in the browser as an \"Image\".  For other image types that\nrequire special viewers, such as Tiffs, you have to choose \"File\"\n\n\n\n\nYou are now presented with the form for the technical metadata of the file.  There are three required\nparts of the form:\n\n\n\n\nThe media's name.\n\n\nThe file to upload.\n\n\nThe usage of the file, which dictates how Islandora interprets the file. To trigger derivative\ngeneration, select \"Original File\" from the drop down box.\n\n\n\n\n\n\nClick save when done, and the file will be uploaded (to Fedora by default).  Now return to the node\nyou created and you should see the image along with its descriptive metadata.", 
            "title": "Make an Image"
        }, 
        {
            "location": "/user-documentation/creating-an-object/#upload-an-original-file", 
            "text": "Congratulations, you have created a Node! But alas, it has no files.  To upload a file, click on the\nnode's Media tab.   Then click on Add Media (a blue button).   We want to add an image, so clicking on \"Image\" is appropriate in most circumstances. Drupal considers\nany type of image that can be viewed natively in the browser as an \"Image\".  For other image types that\nrequire special viewers, such as Tiffs, you have to choose \"File\"   You are now presented with the form for the technical metadata of the file.  There are three required\nparts of the form:   The media's name.  The file to upload.  The usage of the file, which dictates how Islandora interprets the file. To trigger derivative\ngeneration, select \"Original File\" from the drop down box.    Click save when done, and the file will be uploaded (to Fedora by default).  Now return to the node\nyou created and you should see the image along with its descriptive metadata.", 
            "title": "Upload an Original File"
        }, 
        {
            "location": "/user-documentation/collections/", 
            "text": "Collections are groups of repository content that can be described themselves. Repository content is aggregated in a collection by setting the \nfield_member_of\n\nentity reference field to point to a collection. Generally speaking, anything can behave as a collection, and anything with \nfield_member_of\n can be a member of a collection.\nHowever, collections are 'officially' designated as such by applying the \"Collection\" taxonomy term to an item's \nfield_model\n field.  Collections and their members are\nindependent of each other, and removing something from a collection does not delete it.  Similarly, deleting a collection does not delete its members.\n\n\nCreating a Collection\n\n\nFrom the front page, click on Add content. This is under Tools.\n\n\n\n\nThen click on 'Repository Item' to give your collection the default metadata profile for Islandora 8.\n\n\n\n\nFill out the form.\n\n\nNear the end of the form, under System, select Collection from the Model drop down list.\n\n\n \n\n\nClick Save when done.\n\n\n\n\nThe collection has been created. Now let's add some members to this collection.\n\n\nAdd Existing Items to a Collection\n\n\nTo populate a collection with existing items, return to any existing content and click on its Edit tab. This brings up the form for this item.\n\n\n\n\nScroll down to the bottom and the System section. In the Member of section, start typing in the name of the collection this item should belong to. Select the name of the collection \nyou want from the autocomplete.\n\n\n\n\nThe correct collection is now selected.  Click Save when ready.\n\n\n\n\nTo confirm, return to the collection and verify the new item appears in the collection's 'Members' block.\n\n\n\n\nAdd a New Item as a Member of a Collection\n\n\nTo create an item and add it as a member to a collection in one step, visit a collection and click on its \nMembers\n tab. From the\n\nMembers\n tab, you can manage the members of a collection and perform actions on them.\n\n\n\n\nClick on the \n+Add member\n button, and then select 'Repository Item' to give your new item a Content Type.  Only content types that\nhave the \nfield_member_of\n field will be available from this list.\n\n\n\n\nYou are taken to the creation form for a Repository Item, but if you scroll down to the \nSystem\n section, you should see the widget\nfor 'Member Of' is already filled out for you with the appropriate collection.\n\n\n\n\nClick 'Save' at the end of the form to create the new item and add it as a member to the collection.", 
            "title": "Collections"
        }, 
        {
            "location": "/user-documentation/collections/#creating-a-collection", 
            "text": "From the front page, click on Add content. This is under Tools.   Then click on 'Repository Item' to give your collection the default metadata profile for Islandora 8.   Fill out the form.  Near the end of the form, under System, select Collection from the Model drop down list.     Click Save when done.   The collection has been created. Now let's add some members to this collection.", 
            "title": "Creating a Collection"
        }, 
        {
            "location": "/user-documentation/collections/#add-existing-items-to-a-collection", 
            "text": "To populate a collection with existing items, return to any existing content and click on its Edit tab. This brings up the form for this item.   Scroll down to the bottom and the System section. In the Member of section, start typing in the name of the collection this item should belong to. Select the name of the collection \nyou want from the autocomplete.   The correct collection is now selected.  Click Save when ready.   To confirm, return to the collection and verify the new item appears in the collection's 'Members' block.", 
            "title": "Add Existing Items to a Collection"
        }, 
        {
            "location": "/user-documentation/collections/#add-a-new-item-as-a-member-of-a-collection", 
            "text": "To create an item and add it as a member to a collection in one step, visit a collection and click on its  Members  tab. From the Members  tab, you can manage the members of a collection and perform actions on them.   Click on the  +Add member  button, and then select 'Repository Item' to give your new item a Content Type.  Only content types that\nhave the  field_member_of  field will be available from this list.   You are taken to the creation form for a Repository Item, but if you scroll down to the  System  section, you should see the widget\nfor 'Member Of' is already filled out for you with the appropriate collection.   Click 'Save' at the end of the form to create the new item and add it as a member to the collection.", 
            "title": "Add a New Item as a Member of a Collection"
        }, 
        {
            "location": "/user-documentation/metadata/", 
            "text": "Metadata in Islandora 8\n\n\n\n\nTL;DR: In Islandora 8 metadata values are stored in \nfields\n attached to \nentities\n (objects) which are then serialized as JSON-LD before being submitted to Fedora and/or indexed in a triple-store.\n\n\n\n\nDrupal 8 terminology\n\n\n\n\nIn Drupal 8, Fields can be attached to \nentity sub-types\n (e.g. Content types, Vocabularies) or \nentities\n (Users, Files). For more on Fields, see \n\"2.3 Content Entities and Fields\"\n and \n\"6.3 Adding Basic Fields to a Content Type\"\n in the Official Guide.\n\n\n\n\nAs described in the \nobjects section\n, Islandora 8 digital objects are comprised of \nnodes\n for descriptive metadata, \nmedia\n for technical metadata, and \nfiles\n for the binary objects. This section describes how descriptive metadata is managed in Islandora 8.\n\n\nContent Types\n\n\nIn Drupal, \nContent Types\n are groupings of fields and their configurations, forming what is essentially a \nmetadata profile\n for a digital object's descriptive record. The field configurations include how data is entered, how it is displayed, how many values can be stored, and how long the value can be. Some configurations, such as data entry and display, can be changed at any time. Others, such as how long a value can be, cannot be changed once content has been created without first deleting all content of that type.\n\n\nFor example, the 'islandora_demo' module provides a \nRepository Item\n content type that defines several fields including \"Alternative Title\" and \"Date\". The \"Manage fields\" page for Repository Item shows a list of the fields it includes as well as tabs for changing the input forms and display modes. The \"Title\" field does not appear in this list but it is still included with every content type. (See the \"\nCreate / Update a Content Type\n\" section for more details on creating and configuring fields.)\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nThe included title field is limited to 255 characters; if your content has longer titles it is encouraged to create a separate long_title field to store the full title and reserve the default title field for a display title.\n\n\n\n\n7.x Migration Note: What about my XML?\n\n\n\n\nIn 7.x, metadata were (usually) stored within XML datastreams such as MODS or DC. In Islandora 8 we are breaking out\nindividual metadata elements into fields instead of using an attached XML document. The Metadata Interest Group is developing a default mapping which will provide a basic, yet customizable, transform between MODS metadata and Drupal fields in Islandora Demo.\n\n\nIt is still possible to attach an XML file to a Islandora 8 object as a Media (see Datastreams), however there is no mechanism in Islandora 8 for editing XML in a user-friendly way.\n\n\n\n\nA specific instance of a content type is called a \nnode\n. In other words, a \nnode\n is the descriptive metadata for a particular digital object and the \ncontent type\n is the node's metadata profile. Once a node is created, it cannot change its content type. To change a digital object's metadata profile (content type) a repository manager would need to create a new descriptive record (node) using the new metadata profile and then update the corresponding media records to point to the new descriptive record.\n\n\nVocabularies\n\n\nIn Drupal, \nTaxonomy Vocabularies\n (or simply 'Vocabularies') are also entity subtypes that group fields and their configurations. Unlike content types, they are intended to be used as descriptive attributes of content and have hierarchy built in. Whereas instances of content types are called nodes, items in a vocabulary are called \nterms\n.\n\n\nFor example, Islandora includes the 'Islandora Models' vocabulary which includes the terms 'Audio', 'Binary', 'Collection', 'Image', and 'Video'. By linking to one of these terms in the 'Islandora Models' vocabulary a repository manager can tell that the node (digital object) should be considered an 'Image' or 'Audio', etcetera. The Controlled Access Terms module provides additional vocabularies representing Corporate Bodies, Persons, Families, Geographic Locations, and Subjects. Each of these vocabularies has its own set of fields allowing repositories to further describe them. Repository item nodes can then reference terms in these vocabularies. See 'Entity Reference fields' in the 'Field Types' section below.\n\n\n\n\n\nField Types\n\n\nEach field in Drupal has a \ntype\n that defines its \nproperties\n and behavior such as text, date, number, and boolean fields. These field types also have \nwidgets\n and \nformatters\n that control entry forms and display, respectively. The \nDrupal 8 documentation on FieldTypes, FieldWidgets, and FieldFormatters\n includes a list of the core field types.\n\n\nEntity Reference\n fields are a special type of field that creates a relationship between two entities. The field's configuration options include which kind of entities can be referenced. The 'Repository Item' content type, provided by islandora_demo, includes several entity reference fields that reference vocabularies defined by the islandora and controlled_access_terms modules.\n\n\nThe 'Member Of' field is an entity reference field that allows creating digital object hierarchies (collections and, potentially, complex digital objects) by \"pointing\" one or many Repository items at another common \"parent\".\n\n\nModules can provide their own field types, formatters, and widgets. The controlled_access_terms module provides two custom field types: EDTF and Typed Relations.\n\n\nEDTF (\nExtended Date Time Format\n)\n\n\nThe EDTF field type is stored as a string in the database; however the corresponding widget validates the value submitted in the data entry form and will not accept an invalid value while the corresponding formatter can be configured to display the EDTF value in a variety of ways.\n\n\nExample of a valid EDTF value ('1943-05') and an invalid value ('1943 May') with the corresponding error message:\n\n\n\nExample of how the EDTF formatter settings can change the display of an EDTF value:\n\n\n\nTyped Relation\n\n\nThe standard Entity reference fields are limited to a single type of relationship. For example, the islandora_demo module could use an entity reference field in the 'Repository item' content type for the 'creator' field, linking nodes to terms in the People, Corporate Body, and Family vocabularies. However, there are many different types of 'creators', including 'authors', 'illustrators', and 'architects'. To enable all these types of relationships using entity reference fields a repository manager would need to create a new field for each of them, which would quickly become unwieldy. The Controlled Access Terms module resolves this problem by providing a \nTyped Relation\n field type.\n\n\nThe Typed Relation field type combines an entity reference \nproperty\n and a 'relation type' property in a single field and extends the JSON-LD serialization to override a field's RDF mapping in favor of the selected 'relation type'. For example, instead of a 'creator' field, Repository item content type defines a 'Linked Agent' field and is configured with a list of available relationships that comes from the MARC relators list. (Configurable at '/admin/structure/types/manage/islandora_object/fields/node.islandora_object.field_linked_agent'.) The available relations are configured by providing the RDF namespace, a colon, the RDF relationship value, a pipe delimiter, and a display value for the user interface. (See the RDF Mapping section of '\nCreate / Update a Content Type\n' for more details.)\n\n\n\n\nGetting Metadata into Fedora and a Triple-store\n\n\nThe above sections described how Drupal manages and stores metadata, but the key feature of Islandora 8 is pushing that metadata into a Fedora 4+ repository and a triple-store. Islandora does this by using Drupal's serialization capabilities to provide a JSON-LD serialization that can be ingested by Fedora 4+ repository and triple-stores. In response to write operations, it sends notifications to the repository and triple-store that a node or term is available to ingest.\n\n\nThe JSON-LD module works by taking node or term and its corresponding RDF mapping to create a JSON-LD serialization. The RDF mapping for a content type or vocabulary lists its fields and the RDF predicates that should be used for them.\n\n\nFor example, below is the JSON-LD serialization for an example Repository item node created in a standard claw-playbook based vagrant VM:\n\n\n{\n  \n@graph\n:[\n    {\n      \n@id\n:\nhttp://localhost:8000/node/1?_format=jsonld\n,\n      \n@type\n:[\n        \nhttp://pcdm.org/models#Object\n\n      ],\n      \nhttp://purl.org/dc/terms/title\n:[\n        {\n          \n@value\n:\nNew York, New York. A large lobster brought in by the New England fishing boat [Fulton Fish Market]\n,\n          \n@language\n:\nen\n\n        }\n      ],\n      \nhttp://schema.org/author\n:[\n        {\n          \n@id\n:\nhttp://localhost:8000/user/1?_format=jsonld\n\n        }\n      ],\n      \nhttp://schema.org/dateCreated\n:[\n        {\n          \n@value\n:\n2019-03-14T19:05:24+00:00\n,\n          \n@type\n:\nhttp://www.w3.org/2001/XMLSchema#dateTime\n\n        }\n      ],\n      \nhttp://schema.org/dateModified\n:[\n        {\n          \n@value\n:\n2019-03-14T19:20:51+00:00\n,\n          \n@type\n:\nhttp://www.w3.org/2001/XMLSchema#dateTime\n\n        }\n      ],\n      \nhttp://purl.org/dc/terms/date\n:[\n        {\n          \n@value\n:\n1943-05\n,\n          \n@type\n:\nhttp://www.w3.org/2001/XMLSchema#string\n\n        },\n        {\n          \n@value\n:\n1943-05\n,\n          \n@type\n:\nhttp://www.w3.org/2001/XMLSchema#gYearMonth\n\n        }\n      ],\n      \nhttp://purl.org/dc/terms/extent\n:[\n        {\n          \n@value\n:\n1 negative\n,\n          \n@type\n:\nhttp://www.w3.org/2001/XMLSchema#string\n\n        }\n      ],\n      \nhttp://purl.org/dc/terms/identifier\n:[\n        {\n          \n@value\n:\nD 630714\n,\n          \n@type\n:\nhttp://www.w3.org/2001/XMLSchema#string\n\n        }\n      ],\n      \nhttp://purl.org/dc/terms/type\n:[\n        {\n          \n@id\n:\nhttp://localhost:8000/taxonomy/term/11?_format=jsonld\n\n        }\n      ],\n      \nhttp://purl.org/dc/terms/rights\n:[\n        {\n          \n@value\n:\nNo known restrictions. For information, see U.S. Farm Security Administration/Office of War Information Black \n White Photographs(http://www.loc.gov/rr/print/res/071_fsab.html)\n,\n          \n@type\n:\nhttp://www.w3.org/2001/XMLSchema#string\n\n        }\n      ],\n      \nhttp://purl.org/dc/terms/subject\n:[\n        {\n          \n@id\n:\nhttp://localhost:8000/taxonomy/term/26?_format=jsonld\n\n        }\n      ],\n      \nhttp://schema.org/sameAs\n:[\n        {\n          \n@value\n:\nhttp://localhost:8000/node/1?_format=jsonld\n\n        }\n      ]\n    },\n    {\n      \n@id\n:\nhttp://localhost:8000/user/1?_format=jsonld\n,\n      \n@type\n:[\n        \nhttp://schema.org/Person\n\n      ]\n    },\n    {\n      \n@id\n:\nhttp://localhost:8000/taxonomy/term/11?_format=jsonld\n,\n      \n@type\n:[\n        \nhttp://schema.org/Thing\n\n      ]\n    },\n    {\n      \n@id\n:\nhttp://localhost:8000/taxonomy/term/26?_format=jsonld\n,\n      \n@type\n:[\n        \nhttp://schema.org/Thing\n\n      ]\n    }\n  ]\n}\n\n\n\n\nBecause the Repository item's title field is mapped to 'dc:title' in the RDF mapping, the node's title value appears like this in the JSON-LD output:\n\n\nhttp://purl.org/dc/terms/title\n:[\n  {\n    \n@value\n:\nNew York, New York. A large lobster brought in by the New England fishing boat [Fulton Fish Market]\n,\n    \n@language\n:\nen\n\n  }\n],\n\n\n\n\nAlso note that the URI (\n@id\n) value is 'http://localhost:8000/node/1?_format=jsonld'. To see how any node or term in a repository will be serialized to JSON-LD add \n?_format=jsonld\n to the node's URI.\n\n\nWhen a node or term is updated a Drupal Context condition emits an indexing event to notify the repository and triple-store that it is should be ingested/updated.", 
            "title": "Metadata"
        }, 
        {
            "location": "/user-documentation/metadata/#metadata-in-islandora-8", 
            "text": "TL;DR: In Islandora 8 metadata values are stored in  fields  attached to  entities  (objects) which are then serialized as JSON-LD before being submitted to Fedora and/or indexed in a triple-store.   Drupal 8 terminology   In Drupal 8, Fields can be attached to  entity sub-types  (e.g. Content types, Vocabularies) or  entities  (Users, Files). For more on Fields, see  \"2.3 Content Entities and Fields\"  and  \"6.3 Adding Basic Fields to a Content Type\"  in the Official Guide.   As described in the  objects section , Islandora 8 digital objects are comprised of  nodes  for descriptive metadata,  media  for technical metadata, and  files  for the binary objects. This section describes how descriptive metadata is managed in Islandora 8.", 
            "title": "Metadata in Islandora 8"
        }, 
        {
            "location": "/user-documentation/metadata/#content-types", 
            "text": "In Drupal,  Content Types  are groupings of fields and their configurations, forming what is essentially a  metadata profile  for a digital object's descriptive record. The field configurations include how data is entered, how it is displayed, how many values can be stored, and how long the value can be. Some configurations, such as data entry and display, can be changed at any time. Others, such as how long a value can be, cannot be changed once content has been created without first deleting all content of that type.  For example, the 'islandora_demo' module provides a  Repository Item  content type that defines several fields including \"Alternative Title\" and \"Date\". The \"Manage fields\" page for Repository Item shows a list of the fields it includes as well as tabs for changing the input forms and display modes. The \"Title\" field does not appear in this list but it is still included with every content type. (See the \" Create / Update a Content Type \" section for more details on creating and configuring fields.)     Tip   The included title field is limited to 255 characters; if your content has longer titles it is encouraged to create a separate long_title field to store the full title and reserve the default title field for a display title.   7.x Migration Note: What about my XML?   In 7.x, metadata were (usually) stored within XML datastreams such as MODS or DC. In Islandora 8 we are breaking out\nindividual metadata elements into fields instead of using an attached XML document. The Metadata Interest Group is developing a default mapping which will provide a basic, yet customizable, transform between MODS metadata and Drupal fields in Islandora Demo.  It is still possible to attach an XML file to a Islandora 8 object as a Media (see Datastreams), however there is no mechanism in Islandora 8 for editing XML in a user-friendly way.   A specific instance of a content type is called a  node . In other words, a  node  is the descriptive metadata for a particular digital object and the  content type  is the node's metadata profile. Once a node is created, it cannot change its content type. To change a digital object's metadata profile (content type) a repository manager would need to create a new descriptive record (node) using the new metadata profile and then update the corresponding media records to point to the new descriptive record.", 
            "title": "Content Types"
        }, 
        {
            "location": "/user-documentation/metadata/#vocabularies", 
            "text": "In Drupal,  Taxonomy Vocabularies  (or simply 'Vocabularies') are also entity subtypes that group fields and their configurations. Unlike content types, they are intended to be used as descriptive attributes of content and have hierarchy built in. Whereas instances of content types are called nodes, items in a vocabulary are called  terms .  For example, Islandora includes the 'Islandora Models' vocabulary which includes the terms 'Audio', 'Binary', 'Collection', 'Image', and 'Video'. By linking to one of these terms in the 'Islandora Models' vocabulary a repository manager can tell that the node (digital object) should be considered an 'Image' or 'Audio', etcetera. The Controlled Access Terms module provides additional vocabularies representing Corporate Bodies, Persons, Families, Geographic Locations, and Subjects. Each of these vocabularies has its own set of fields allowing repositories to further describe them. Repository item nodes can then reference terms in these vocabularies. See 'Entity Reference fields' in the 'Field Types' section below.", 
            "title": "Vocabularies"
        }, 
        {
            "location": "/user-documentation/metadata/#field-types", 
            "text": "Each field in Drupal has a  type  that defines its  properties  and behavior such as text, date, number, and boolean fields. These field types also have  widgets  and  formatters  that control entry forms and display, respectively. The  Drupal 8 documentation on FieldTypes, FieldWidgets, and FieldFormatters  includes a list of the core field types.  Entity Reference  fields are a special type of field that creates a relationship between two entities. The field's configuration options include which kind of entities can be referenced. The 'Repository Item' content type, provided by islandora_demo, includes several entity reference fields that reference vocabularies defined by the islandora and controlled_access_terms modules.  The 'Member Of' field is an entity reference field that allows creating digital object hierarchies (collections and, potentially, complex digital objects) by \"pointing\" one or many Repository items at another common \"parent\".  Modules can provide their own field types, formatters, and widgets. The controlled_access_terms module provides two custom field types: EDTF and Typed Relations.", 
            "title": "Field Types"
        }, 
        {
            "location": "/user-documentation/metadata/#edtf-extended-date-time-format", 
            "text": "The EDTF field type is stored as a string in the database; however the corresponding widget validates the value submitted in the data entry form and will not accept an invalid value while the corresponding formatter can be configured to display the EDTF value in a variety of ways.  Example of a valid EDTF value ('1943-05') and an invalid value ('1943 May') with the corresponding error message:  Example of how the EDTF formatter settings can change the display of an EDTF value:", 
            "title": "EDTF (Extended Date Time Format)"
        }, 
        {
            "location": "/user-documentation/metadata/#typed-relation", 
            "text": "The standard Entity reference fields are limited to a single type of relationship. For example, the islandora_demo module could use an entity reference field in the 'Repository item' content type for the 'creator' field, linking nodes to terms in the People, Corporate Body, and Family vocabularies. However, there are many different types of 'creators', including 'authors', 'illustrators', and 'architects'. To enable all these types of relationships using entity reference fields a repository manager would need to create a new field for each of them, which would quickly become unwieldy. The Controlled Access Terms module resolves this problem by providing a  Typed Relation  field type.  The Typed Relation field type combines an entity reference  property  and a 'relation type' property in a single field and extends the JSON-LD serialization to override a field's RDF mapping in favor of the selected 'relation type'. For example, instead of a 'creator' field, Repository item content type defines a 'Linked Agent' field and is configured with a list of available relationships that comes from the MARC relators list. (Configurable at '/admin/structure/types/manage/islandora_object/fields/node.islandora_object.field_linked_agent'.) The available relations are configured by providing the RDF namespace, a colon, the RDF relationship value, a pipe delimiter, and a display value for the user interface. (See the RDF Mapping section of ' Create / Update a Content Type ' for more details.)", 
            "title": "Typed Relation"
        }, 
        {
            "location": "/user-documentation/metadata/#getting-metadata-into-fedora-and-a-triple-store", 
            "text": "The above sections described how Drupal manages and stores metadata, but the key feature of Islandora 8 is pushing that metadata into a Fedora 4+ repository and a triple-store. Islandora does this by using Drupal's serialization capabilities to provide a JSON-LD serialization that can be ingested by Fedora 4+ repository and triple-stores. In response to write operations, it sends notifications to the repository and triple-store that a node or term is available to ingest.  The JSON-LD module works by taking node or term and its corresponding RDF mapping to create a JSON-LD serialization. The RDF mapping for a content type or vocabulary lists its fields and the RDF predicates that should be used for them.  For example, below is the JSON-LD serialization for an example Repository item node created in a standard claw-playbook based vagrant VM:  {\n   @graph :[\n    {\n       @id : http://localhost:8000/node/1?_format=jsonld ,\n       @type :[\n         http://pcdm.org/models#Object \n      ],\n       http://purl.org/dc/terms/title :[\n        {\n           @value : New York, New York. A large lobster brought in by the New England fishing boat [Fulton Fish Market] ,\n           @language : en \n        }\n      ],\n       http://schema.org/author :[\n        {\n           @id : http://localhost:8000/user/1?_format=jsonld \n        }\n      ],\n       http://schema.org/dateCreated :[\n        {\n           @value : 2019-03-14T19:05:24+00:00 ,\n           @type : http://www.w3.org/2001/XMLSchema#dateTime \n        }\n      ],\n       http://schema.org/dateModified :[\n        {\n           @value : 2019-03-14T19:20:51+00:00 ,\n           @type : http://www.w3.org/2001/XMLSchema#dateTime \n        }\n      ],\n       http://purl.org/dc/terms/date :[\n        {\n           @value : 1943-05 ,\n           @type : http://www.w3.org/2001/XMLSchema#string \n        },\n        {\n           @value : 1943-05 ,\n           @type : http://www.w3.org/2001/XMLSchema#gYearMonth \n        }\n      ],\n       http://purl.org/dc/terms/extent :[\n        {\n           @value : 1 negative ,\n           @type : http://www.w3.org/2001/XMLSchema#string \n        }\n      ],\n       http://purl.org/dc/terms/identifier :[\n        {\n           @value : D 630714 ,\n           @type : http://www.w3.org/2001/XMLSchema#string \n        }\n      ],\n       http://purl.org/dc/terms/type :[\n        {\n           @id : http://localhost:8000/taxonomy/term/11?_format=jsonld \n        }\n      ],\n       http://purl.org/dc/terms/rights :[\n        {\n           @value : No known restrictions. For information, see U.S. Farm Security Administration/Office of War Information Black   White Photographs(http://www.loc.gov/rr/print/res/071_fsab.html) ,\n           @type : http://www.w3.org/2001/XMLSchema#string \n        }\n      ],\n       http://purl.org/dc/terms/subject :[\n        {\n           @id : http://localhost:8000/taxonomy/term/26?_format=jsonld \n        }\n      ],\n       http://schema.org/sameAs :[\n        {\n           @value : http://localhost:8000/node/1?_format=jsonld \n        }\n      ]\n    },\n    {\n       @id : http://localhost:8000/user/1?_format=jsonld ,\n       @type :[\n         http://schema.org/Person \n      ]\n    },\n    {\n       @id : http://localhost:8000/taxonomy/term/11?_format=jsonld ,\n       @type :[\n         http://schema.org/Thing \n      ]\n    },\n    {\n       @id : http://localhost:8000/taxonomy/term/26?_format=jsonld ,\n       @type :[\n         http://schema.org/Thing \n      ]\n    }\n  ]\n}  Because the Repository item's title field is mapped to 'dc:title' in the RDF mapping, the node's title value appears like this in the JSON-LD output:  http://purl.org/dc/terms/title :[\n  {\n     @value : New York, New York. A large lobster brought in by the New England fishing boat [Fulton Fish Market] ,\n     @language : en \n  }\n],  Also note that the URI ( @id ) value is 'http://localhost:8000/node/1?_format=jsonld'. To see how any node or term in a repository will be serialized to JSON-LD add  ?_format=jsonld  to the node's URI.  When a node or term is updated a Drupal Context condition emits an indexing event to notify the repository and triple-store that it is should be ingested/updated.", 
            "title": "Getting Metadata into Fedora and a Triple-store"
        }, 
        {
            "location": "/user-documentation/searching/", 
            "text": "Setup and Configure Search\n\n\nIslandora 8 comes with the Drupal 8 \nSearch API\n and \nSOLR\n modules enabled with a corresponding SOLR instance. This guide gives an overview to the setup provided by the claw-playbook. Much more detail is available in the \nSearch API documentation\n. Another helpful resource is \nAdam Fuch's \"Drupal 8 Custom Site Search with Search API\"\n (https://www.electriccitizen.com, 2018-01-10; last accessed 2019-03-08).\n\n\nIndexing Islandora 8 with SOLR\n\n\nTo access the search indexing settings navigate to '/admin/config/search/search-api'.\n\n\n\n\nSOLR Server Configuration\n\n\nUse the 'Solr Server' link to view the SOLR server's configuration and the 'Default Solr content index' link to view or update the index settings. In most cases, where the site was built using ansible, the 'Solr Server' settings that were configured during installation should be left alone.\n\n\nSOLR Index Configuration\n\n\nThe Default Solr content index user interface is divided into four tabs: 'View', 'Edit', 'Fields', and 'Processors'.\n\n\nView Tab\n\n\nThe 'View' tab gives an overview of the index and its status:\n- 'Index status' is a progress bar that indicates how many items have been indexed.\n- 'Status' allows you to enable/disable the index from being used.\n- 'Datasource' indicates what types of entities are being indexed and how many have.\n- 'Tracker' states which item tracker is being used.\n- 'Server' provides a link to the SOLR server's configuration page.\n- 'Server index status' is a count of the total number of items returned from an unfiltered empty search. Generally speaking, this should match the total number of items indexed. See the \nDrupal 8 Search API FAQ\n for more details.\n- 'Cron batch size' displays how many items will be indexed when Drupal's cron runs.\n\n\nThe 'View' tab also provides links to some common actions. 'Start Indexing Now' allows you to start a indexing job for a specified number of items (default is 'all'). You can also specify how many items should be indexed in each batch (default is '50'). The other links allow a repository manager to queue all objects for reindexing, clear the index, or rebuild tracking information.\n\n\nEdit Tab\n\n\nThe 'Edit' tab allows repository managers to configure how the index works as a whole, including the Index name, the data sources\u2014entity types\u2014it can index (including which specific content types or taxonomies will be indexed), which server it is connected to, and other SOLR-specific options.\n\n\n'Content' (types) is the only data source enabled by default. Selecting 'Taxonomy term' will enable searching taxonomies which is recommended if the repository uses taxonomies for subjects or other discovery points. Once the data sources are enabled a configuration box for each of them will appear in a section just below the list of data sources. This allows repository managers to select which content types (or taxonomy vocabularies) will be included in the index. By default all the content types, and vocabularies if the taxonomy data source is enabled, are indexed.\n\n\nNote:\n the defaults assume a repository is adding content using the web interface. If a repository manager plans on bulk-loading content they should disable the 'Index items immediately' option in the expandable 'Index Options' box and increase the 'Cron batch size' option.\n\n\nFields Tab\n\n\nThe 'Fields' tab allows repository managers to select which fields will be indexed. The default set of fields enabled come from a standard Drupal installation and do not reflect the fields Islandora adds for 'Repository Item'. \nRepository managers need to add the fields necessary for their Islandora instance.\n\n\nTo add a field, click the '+ Add fields' button. A shadow-box will appear with a list of the fields available for the index.\n\n\nSome fields, such as the 'Body' ('body') field provided by Drupal, have multiple properties which can be completely different values or variations on the same value. Click on the plus-sign next to the field to show the properties available to index. In most cases repository managers can ignore the properties list and click the 'Add' button by the field to index the default property ('value'). Only select a different field property if you understand how it will impact user searching. Entity reference fields, such as Tags ('field_tags'), allow you to select fields or their properties from the referenced entity for indexing, such as a referenced taxonomy term's name field.\n\n\nOnce the fields are added they can be configured further on the 'Fields' tab, although the label, machine name, and type usually don't need to be changed. The 'Type' dropdown has several different Full-text processing options available, which may be of interest. Each is described in the expandable 'Data Types' box at the bottom of the page. The 'Boost' setting allows repository managers to increase the weight of particular fields when calculating search relevancy.\n\n\nProcessors Tab\n\n\nThe 'Processors' tab allows repository managers to adjust how data and search queries are processed to adjust results. The defaults are acceptable in most cases.\n\n\nSearching Islandora 8\n\n\nThe Search API SOLR module comes with a search page pre-configured (accessible at '/solr-search/content'). To edit the search page, navigate to '/admin/structure/views/view/solr_search_content'.\n\n\nRepository managers may want to change the URL used to access the page, add it to the site navigation, or add a search box. In the 'Page Settings' box in the middle of the page, click on the existing path to open a shadow-box with an edit field. Change the URL as desired, for example, to 'search' and click 'Apply'. Then, click the 'No menu' link just below it to open the menu settings shadow-box. Selecting 'Normal menu entry' will allow a repository manager to add a menu link text, description, and place it within the site menu tree (the default, \nMain navigation\n works for most sites). A search box can be added by expanding the 'Advanced' options and changing the 'Exposed form in block' setting and then use the 'Block Layout' interface (found at '/admin/structure/block') to place the block where desired. After making changes to the View's settings, click the 'Save' button to ensure the changes are not lost.\n\n\nIslandora's Repository Items are displayed in the search results as a fully rendered entity by default. Repository managers can choose which view mode should be used for each search datasource by clicking the 'Settings' link next to the 'Show:' setting under the 'Format' section of the search view configuration page (shown in a red box in the screenshot below). The 'Teaser' and 'Search result highlighting input' are the two most likely options. Alternatively, repository managers can select specific fields to display instead by clicking the 'Rendered Entity' link and changing it to 'Fields' and then choosing which fields will be displayed in the 'Fields' section underneath. \nNote:\n thumbnails will not immediately be available using the Fields display option without more advanced configurations.", 
            "title": "Searching"
        }, 
        {
            "location": "/user-documentation/searching/#setup-and-configure-search", 
            "text": "Islandora 8 comes with the Drupal 8  Search API  and  SOLR  modules enabled with a corresponding SOLR instance. This guide gives an overview to the setup provided by the claw-playbook. Much more detail is available in the  Search API documentation . Another helpful resource is  Adam Fuch's \"Drupal 8 Custom Site Search with Search API\"  (https://www.electriccitizen.com, 2018-01-10; last accessed 2019-03-08).", 
            "title": "Setup and Configure Search"
        }, 
        {
            "location": "/user-documentation/searching/#indexing-islandora-8-with-solr", 
            "text": "To access the search indexing settings navigate to '/admin/config/search/search-api'.", 
            "title": "Indexing Islandora 8 with SOLR"
        }, 
        {
            "location": "/user-documentation/searching/#solr-server-configuration", 
            "text": "Use the 'Solr Server' link to view the SOLR server's configuration and the 'Default Solr content index' link to view or update the index settings. In most cases, where the site was built using ansible, the 'Solr Server' settings that were configured during installation should be left alone.", 
            "title": "SOLR Server Configuration"
        }, 
        {
            "location": "/user-documentation/searching/#solr-index-configuration", 
            "text": "The Default Solr content index user interface is divided into four tabs: 'View', 'Edit', 'Fields', and 'Processors'.", 
            "title": "SOLR Index Configuration"
        }, 
        {
            "location": "/user-documentation/searching/#view-tab", 
            "text": "The 'View' tab gives an overview of the index and its status:\n- 'Index status' is a progress bar that indicates how many items have been indexed.\n- 'Status' allows you to enable/disable the index from being used.\n- 'Datasource' indicates what types of entities are being indexed and how many have.\n- 'Tracker' states which item tracker is being used.\n- 'Server' provides a link to the SOLR server's configuration page.\n- 'Server index status' is a count of the total number of items returned from an unfiltered empty search. Generally speaking, this should match the total number of items indexed. See the  Drupal 8 Search API FAQ  for more details.\n- 'Cron batch size' displays how many items will be indexed when Drupal's cron runs.  The 'View' tab also provides links to some common actions. 'Start Indexing Now' allows you to start a indexing job for a specified number of items (default is 'all'). You can also specify how many items should be indexed in each batch (default is '50'). The other links allow a repository manager to queue all objects for reindexing, clear the index, or rebuild tracking information.", 
            "title": "View Tab"
        }, 
        {
            "location": "/user-documentation/searching/#edit-tab", 
            "text": "The 'Edit' tab allows repository managers to configure how the index works as a whole, including the Index name, the data sources\u2014entity types\u2014it can index (including which specific content types or taxonomies will be indexed), which server it is connected to, and other SOLR-specific options.  'Content' (types) is the only data source enabled by default. Selecting 'Taxonomy term' will enable searching taxonomies which is recommended if the repository uses taxonomies for subjects or other discovery points. Once the data sources are enabled a configuration box for each of them will appear in a section just below the list of data sources. This allows repository managers to select which content types (or taxonomy vocabularies) will be included in the index. By default all the content types, and vocabularies if the taxonomy data source is enabled, are indexed.  Note:  the defaults assume a repository is adding content using the web interface. If a repository manager plans on bulk-loading content they should disable the 'Index items immediately' option in the expandable 'Index Options' box and increase the 'Cron batch size' option.", 
            "title": "Edit Tab"
        }, 
        {
            "location": "/user-documentation/searching/#fields-tab", 
            "text": "The 'Fields' tab allows repository managers to select which fields will be indexed. The default set of fields enabled come from a standard Drupal installation and do not reflect the fields Islandora adds for 'Repository Item'.  Repository managers need to add the fields necessary for their Islandora instance.  To add a field, click the '+ Add fields' button. A shadow-box will appear with a list of the fields available for the index.  Some fields, such as the 'Body' ('body') field provided by Drupal, have multiple properties which can be completely different values or variations on the same value. Click on the plus-sign next to the field to show the properties available to index. In most cases repository managers can ignore the properties list and click the 'Add' button by the field to index the default property ('value'). Only select a different field property if you understand how it will impact user searching. Entity reference fields, such as Tags ('field_tags'), allow you to select fields or their properties from the referenced entity for indexing, such as a referenced taxonomy term's name field.  Once the fields are added they can be configured further on the 'Fields' tab, although the label, machine name, and type usually don't need to be changed. The 'Type' dropdown has several different Full-text processing options available, which may be of interest. Each is described in the expandable 'Data Types' box at the bottom of the page. The 'Boost' setting allows repository managers to increase the weight of particular fields when calculating search relevancy.", 
            "title": "Fields Tab"
        }, 
        {
            "location": "/user-documentation/searching/#processors-tab", 
            "text": "The 'Processors' tab allows repository managers to adjust how data and search queries are processed to adjust results. The defaults are acceptable in most cases.", 
            "title": "Processors Tab"
        }, 
        {
            "location": "/user-documentation/searching/#searching-islandora-8", 
            "text": "The Search API SOLR module comes with a search page pre-configured (accessible at '/solr-search/content'). To edit the search page, navigate to '/admin/structure/views/view/solr_search_content'.  Repository managers may want to change the URL used to access the page, add it to the site navigation, or add a search box. In the 'Page Settings' box in the middle of the page, click on the existing path to open a shadow-box with an edit field. Change the URL as desired, for example, to 'search' and click 'Apply'. Then, click the 'No menu' link just below it to open the menu settings shadow-box. Selecting 'Normal menu entry' will allow a repository manager to add a menu link text, description, and place it within the site menu tree (the default,  Main navigation  works for most sites). A search box can be added by expanding the 'Advanced' options and changing the 'Exposed form in block' setting and then use the 'Block Layout' interface (found at '/admin/structure/block') to place the block where desired. After making changes to the View's settings, click the 'Save' button to ensure the changes are not lost.  Islandora's Repository Items are displayed in the search results as a fully rendered entity by default. Repository managers can choose which view mode should be used for each search datasource by clicking the 'Settings' link next to the 'Show:' setting under the 'Format' section of the search view configuration page (shown in a red box in the screenshot below). The 'Teaser' and 'Search result highlighting input' are the two most likely options. Alternatively, repository managers can select specific fields to display instead by clicking the 'Rendered Entity' link and changing it to 'Fields' and then choosing which fields will be displayed in the 'Fields' section underneath.  Note:  thumbnails will not immediately be available using the Fields display option without more advanced configurations.", 
            "title": "Searching Islandora 8"
        }, 
        {
            "location": "/user-documentation/context/", 
            "text": "Context in Islandora 8\n\n\nContext\n is a Drupal contrib module that allows configuration of \"if this, then that\" logic using an administrative user interface. Context defines \"conditions\" and \"reactions\" to enact the \"if this [condition], then that [reaction]\" logic. Some Islandora 7.x repositories use the community-contributed \nIslandora Context\n module to apply this sort of logic to Islandora objects. An example Context from Islandora 7.x is\n\n\n\n\nIf an object's namespace is 'customnamespace', render the block containing the rights statement \"Please contact Special Collections before reusing this item\".\n\n\n\n\nThe Context project page on drupal.org says \"You can think of each context as representing a 'section' of your site\", but that doesn't tell the whole story, since it gives the impression that Context is all about defining subsites. Context in Drupal 8 is much more powerful than in Drupal 7 due to how it interacts with the rest of Drupal (specifically, through Drupal 8's new plugin API). Because of this increased flexibility and power, and because Context provides a ready-made user interface for site administrators to combine conditions and reactions, Islandora 8 uses Context to drive the logic underlying many important aspects of Islandora, including which derivatives get generated and how objects are displayed. In Islandora 7, many of these things are managed (and often hard-coded) within solution packs and utility modules.\n\n\nAn Example\n\n\nLet's look at the example of how Context can determine how an object is diplayed. Drupal 8 has the idea of \"view modes\", which allow site builders to choose what happens when an object is viewed by the user (it has nothing to do with Drupal Views). In the node edit form for Islandora objects, there is a checkbox that, if checked, tells Drupal to render the image using the OpenSeadragon viewer:\n\n\n\n\nThis  functionality is accomplished via the \"Open Seadragon\" Context, which, as its configuration suggests, checks as its condition whether the node as the \"Open Seadragon\" tag and if so, reacts by using the view mode \"Open Seadragon\":\n\n\n\n\nContext and Actions\n\n\nContext in Drupal 8 uses Drupal Actions to execute the \"then that\" part of their logic. An implication of this is some configuration options relevant to the outcome of the \"then that\" reaction are configured in the Action admin interface (located at \nadmin/config/system/actions\n), not within the Context admin interface (located at \nadmin/structure/context\n). While this makes for a clunky admin experience, the advantage is that it allows the reuse of a single piece of Drupal code in multiple Contexts.\n\n\nOne important group of functionality in Islandora 8 repositories that admins might want to control is what types of \nmedia\n get persisted to Fedora. Islandora 8 allows administrators to choose what types of media get persisted to Fedora and what types of media get persisted to the Drupal public file system. For example, you may want to persist your thumbnails to Fedora along with your \"Preservation Master\" and \"Original File\" files. This can be accomplished using Context.\n\n\nBy default Islandora 8 stores thumbnails in Drupal's public file system, not in Fedora. Thumbnails are automatically gererated by a Context (the \"Image Service File\" Context to be specific), but if you want to change the file system where your thumbnails are stored to the be Fedora file system, you need to change that setting in the \"Image - Generate a thumbnail from a service file\" Action, not in the Context that uses that action:\n\n\n\n\nThis configuration should be done as part of your initial Islandora 8 setup, since there is currently no way to move thumbnails that were persisted to Drupal's public file system to Fedora, or vice versa. But, at least site admins can choose one or the other using this Action.\n\n\nYou can create custom Actions and then use them in Contexts. For example, if you want to present a message to the user every time they upload a media tagged as \"Preservation Master File\", create an Action of type \"Display a message to the user\" and enter your message:\n\n\n\n\nThen, create a Context that uses this Action as its Reaction, and as its Condition, uses \"Media has term\" with a value of \"Presrevation Master File\":\n\n\n\n\nNow, when a user creates a Media and tags it as a \"Preservation Master File\", they will be shown the message you created in your Action:\n\n\n\n\nIncreased Flexibility\n\n\nMost Islandora 8 repository administrators will not need to alter or configure any Contexts. But since much of Islandora 8's underlying functionality is governed by this powerful Drupal contib module, administrators should become comfortable using it, and Actions, to customize and refine their repositories. Also, since Islandora 8 objects are ordinary Drupal nodes, Islandora objects can take advantage of standard Drupal 8 Context functionality out of the box.", 
            "title": "Context"
        }, 
        {
            "location": "/user-documentation/context/#context-in-islandora-8", 
            "text": "Context  is a Drupal contrib module that allows configuration of \"if this, then that\" logic using an administrative user interface. Context defines \"conditions\" and \"reactions\" to enact the \"if this [condition], then that [reaction]\" logic. Some Islandora 7.x repositories use the community-contributed  Islandora Context  module to apply this sort of logic to Islandora objects. An example Context from Islandora 7.x is   If an object's namespace is 'customnamespace', render the block containing the rights statement \"Please contact Special Collections before reusing this item\".   The Context project page on drupal.org says \"You can think of each context as representing a 'section' of your site\", but that doesn't tell the whole story, since it gives the impression that Context is all about defining subsites. Context in Drupal 8 is much more powerful than in Drupal 7 due to how it interacts with the rest of Drupal (specifically, through Drupal 8's new plugin API). Because of this increased flexibility and power, and because Context provides a ready-made user interface for site administrators to combine conditions and reactions, Islandora 8 uses Context to drive the logic underlying many important aspects of Islandora, including which derivatives get generated and how objects are displayed. In Islandora 7, many of these things are managed (and often hard-coded) within solution packs and utility modules.", 
            "title": "Context in Islandora 8"
        }, 
        {
            "location": "/user-documentation/context/#an-example", 
            "text": "Let's look at the example of how Context can determine how an object is diplayed. Drupal 8 has the idea of \"view modes\", which allow site builders to choose what happens when an object is viewed by the user (it has nothing to do with Drupal Views). In the node edit form for Islandora objects, there is a checkbox that, if checked, tells Drupal to render the image using the OpenSeadragon viewer:   This  functionality is accomplished via the \"Open Seadragon\" Context, which, as its configuration suggests, checks as its condition whether the node as the \"Open Seadragon\" tag and if so, reacts by using the view mode \"Open Seadragon\":", 
            "title": "An Example"
        }, 
        {
            "location": "/user-documentation/context/#context-and-actions", 
            "text": "Context in Drupal 8 uses Drupal Actions to execute the \"then that\" part of their logic. An implication of this is some configuration options relevant to the outcome of the \"then that\" reaction are configured in the Action admin interface (located at  admin/config/system/actions ), not within the Context admin interface (located at  admin/structure/context ). While this makes for a clunky admin experience, the advantage is that it allows the reuse of a single piece of Drupal code in multiple Contexts.  One important group of functionality in Islandora 8 repositories that admins might want to control is what types of  media  get persisted to Fedora. Islandora 8 allows administrators to choose what types of media get persisted to Fedora and what types of media get persisted to the Drupal public file system. For example, you may want to persist your thumbnails to Fedora along with your \"Preservation Master\" and \"Original File\" files. This can be accomplished using Context.  By default Islandora 8 stores thumbnails in Drupal's public file system, not in Fedora. Thumbnails are automatically gererated by a Context (the \"Image Service File\" Context to be specific), but if you want to change the file system where your thumbnails are stored to the be Fedora file system, you need to change that setting in the \"Image - Generate a thumbnail from a service file\" Action, not in the Context that uses that action:   This configuration should be done as part of your initial Islandora 8 setup, since there is currently no way to move thumbnails that were persisted to Drupal's public file system to Fedora, or vice versa. But, at least site admins can choose one or the other using this Action.  You can create custom Actions and then use them in Contexts. For example, if you want to present a message to the user every time they upload a media tagged as \"Preservation Master File\", create an Action of type \"Display a message to the user\" and enter your message:   Then, create a Context that uses this Action as its Reaction, and as its Condition, uses \"Media has term\" with a value of \"Presrevation Master File\":   Now, when a user creates a Media and tags it as a \"Preservation Master File\", they will be shown the message you created in your Action:", 
            "title": "Context and Actions"
        }, 
        {
            "location": "/user-documentation/context/#increased-flexibility", 
            "text": "Most Islandora 8 repository administrators will not need to alter or configure any Contexts. But since much of Islandora 8's underlying functionality is governed by this powerful Drupal contib module, administrators should become comfortable using it, and Actions, to customize and refine their repositories. Also, since Islandora 8 objects are ordinary Drupal nodes, Islandora objects can take advantage of standard Drupal 8 Context functionality out of the box.", 
            "title": "Increased Flexibility"
        }, 
        {
            "location": "/user-documentation/create_update_views/", 
            "text": "Create / Update a View\n\n\nViews allow you to get your content in Islandora to display on your site in pages or as posts, lists, blocks, etc. Views are powerful and filter content from Islandora to enable you to present content in interesting and exciting ways. \n\n\nIslandora 8 ships with views already created and turned on. The Islandora 8 home page displays content items that have been added to Islandora. This view is named 'Frontpage' and it lists items that meet the following \nfilter criteria\n. The item is published and the checkbox 'Promoted to front page' is selected. This view will display all content items added to Islandora as the checkbox 'Promoted to front page' is on by default. \n\n\nAs you develop your Islandora Web site it is likely that you will need to change this default behaviour of the 'Frontpage' view. The following two tasks demonstrate how to 1) Edit the 'FrontPage' view and 2) Create a new view.\n\n\nTask 1: Edit the 'Frontpage' page view to only show content items and not collections\n\n\nFor this example, we added six collection items to Islandora 8. Now, in total there are eight items in the repository. In addition to the six collection items there is one audio item and one image item.\n\n\n\n\nUsing your Web browser open the Islandora 8 Frontpage (localhost:8000 or your test Islandora)\n\n\nFor this example, on the frontpage we can see that Islandora displays a 'Collection' first as this is the most recently added item.\n\n\n\n\n\n\nTo edit the frontpage view, hover over the view ('Frontpage' view) and select 'Edit view' when displayed.\n    \n\n\nSelect 'Add' under the \nfilter criteria\n section.\n    \n\n\nWe do not want to display collections, so we need to add a \nfilter criteria\n that does not filter for the Islandora model type 'collection'\n\n\nSelect 'Model' from the list and then 'Apply (all displays)'.\n\n\n\nSelect 'Islandora Model' to select filters on Islandora model types and select 'Apply and continue'.\n\n\n\nSelect the \noperator\n 'Is none of' and the 'Collection' model (autocomplete should work here to help you). To finish select 'Apply (all displays)'.\n\n\n\n'Save' the view. Now the 'Frontpage' view does not display collections.\n\n\n\n\n\n\n\n\n\nTask2: Add a new view to only show collections\n\n\nFor this example, we create a new view as a block and place the new block to only display on the frontpage. We will add the new collection list block below the existing frontpage view that list items.\n\n\n\n\nUsing your Web browser open the Islandora 8 Frontpage (localhost:8000 or your test Islandora)\n\n\nNavigate to Administration \n Structure \n Views (~/admin/structure/views)\n\n\nCreate a new view by selecting 'Add view'\n\n\nName the view and select 'Create a block'. Give the block a title, decide how you want it to display (Grid, Table, List, Paging). To progress, select 'Save and edit'.\n\n\n\nCustomise the view format and sorting as required.\n\n\nAdd a \nfilter criteria\n to only show the Islandora model type of 'Collection' and 'Save' the view.\n\n\n\nPlace view on frontpage. Now that we have a view as a block, we add it to the 'Main page content' area (using 'Block layout') and only display for the frontpage.\n\n\nNavigate to Administration \n Structure \n Block (/admin/structure/block). Under 'Main content' select 'Place block'\n\n\n\nFind the new block, 'Collection List' and select 'Place block'.\n\n\nRestrict the block to only display on the frontpage by adding the text '\n' to the 'Page' vertical tab. Then select 'Save block'.\n\n\n\nReview the block placement and move if required.\n\n\n\n\n\n\n\nThe 'Collection list' now only displays on the frontpage. It displays below the 'Main page content'.", 
            "title": "Views"
        }, 
        {
            "location": "/user-documentation/create_update_views/#create-update-a-view", 
            "text": "Views allow you to get your content in Islandora to display on your site in pages or as posts, lists, blocks, etc. Views are powerful and filter content from Islandora to enable you to present content in interesting and exciting ways.   Islandora 8 ships with views already created and turned on. The Islandora 8 home page displays content items that have been added to Islandora. This view is named 'Frontpage' and it lists items that meet the following  filter criteria . The item is published and the checkbox 'Promoted to front page' is selected. This view will display all content items added to Islandora as the checkbox 'Promoted to front page' is on by default.   As you develop your Islandora Web site it is likely that you will need to change this default behaviour of the 'Frontpage' view. The following two tasks demonstrate how to 1) Edit the 'FrontPage' view and 2) Create a new view.", 
            "title": "Create / Update a View"
        }, 
        {
            "location": "/user-documentation/create_update_views/#task-1-edit-the-frontpage-page-view-to-only-show-content-items-and-not-collections", 
            "text": "For this example, we added six collection items to Islandora 8. Now, in total there are eight items in the repository. In addition to the six collection items there is one audio item and one image item.   Using your Web browser open the Islandora 8 Frontpage (localhost:8000 or your test Islandora)  For this example, on the frontpage we can see that Islandora displays a 'Collection' first as this is the most recently added item.    To edit the frontpage view, hover over the view ('Frontpage' view) and select 'Edit view' when displayed.\n      Select 'Add' under the  filter criteria  section.\n      We do not want to display collections, so we need to add a  filter criteria  that does not filter for the Islandora model type 'collection'  Select 'Model' from the list and then 'Apply (all displays)'.  Select 'Islandora Model' to select filters on Islandora model types and select 'Apply and continue'.  Select the  operator  'Is none of' and the 'Collection' model (autocomplete should work here to help you). To finish select 'Apply (all displays)'.  'Save' the view. Now the 'Frontpage' view does not display collections.", 
            "title": "Task 1: Edit the 'Frontpage' page view to only show content items and not collections"
        }, 
        {
            "location": "/user-documentation/create_update_views/#task2-add-a-new-view-to-only-show-collections", 
            "text": "For this example, we create a new view as a block and place the new block to only display on the frontpage. We will add the new collection list block below the existing frontpage view that list items.   Using your Web browser open the Islandora 8 Frontpage (localhost:8000 or your test Islandora)  Navigate to Administration   Structure   Views (~/admin/structure/views)  Create a new view by selecting 'Add view'  Name the view and select 'Create a block'. Give the block a title, decide how you want it to display (Grid, Table, List, Paging). To progress, select 'Save and edit'.  Customise the view format and sorting as required.  Add a  filter criteria  to only show the Islandora model type of 'Collection' and 'Save' the view.  Place view on frontpage. Now that we have a view as a block, we add it to the 'Main page content' area (using 'Block layout') and only display for the frontpage.  Navigate to Administration   Structure   Block (/admin/structure/block). Under 'Main content' select 'Place block'  Find the new block, 'Collection List' and select 'Place block'.  Restrict the block to only display on the frontpage by adding the text ' ' to the 'Page' vertical tab. Then select 'Save block'.  Review the block placement and move if required.    The 'Collection list' now only displays on the frontpage. It displays below the 'Main page content'.", 
            "title": "Task2: Add a new view to only show collections"
        }, 
        {
            "location": "/user-documentation/users/", 
            "text": "Managing Users\n\n\nHow to Add a User\n\n\n\n\nLog in to Drupal. You will need the Administrator role to Manage Users.\n\n\nClick the \nManage\n tab from the top toolbar.\n\n\nSelect the \nPeople\n tab from the resulting menu to bring up the \nPeople\n page.\n\n\n\nClick the blue \nAdd user\n button to bring up the \nAdd user\n page.\n\n\nEnter all required fields, as indicated by red asterisks, in the \nAdd user\n page.\n\n\nIn the \nRoles\n section, click on the roles that the new user will need.\n\n\nClick on \"Administrator\" if the new user will need to be able to run administrative tasks in Drupal or Islandora 8.\n\n\nClick on \"fedoraAdmin\" if the new user will need to be able to write to Fedora. This is required by the WebAC authentication so Islandora 8 and Fedora can communicate.\n\n\nReview other settings available for a new user such as:\n\n\nSite language\n\n\nEnglish\n selected by default.\n\n\n\n\n\n\nContact Settings section\n\n\nPersonal contact form\n selected by default.\n\n\n\n\n\n\nClick on the \nCreate New Account\n button at the bottom of the \nAdd user\n page to finish adding a new user.\n\n\n\n\nTo review/edit the permission for each role, in the \nPeople\n page click the \nPermissions\n tab in the set of tabs above the \nAdd user\n button.\n\n\nHow to Create a New User Role\n\n\n\n\nLog in to Drupal. You will need the Administrator role to edit or add roles.\n\n\nClick the \nManage\n tab from the top toolbar.\n\n\nSelect the \nPeople\n tab from the resulting menu.\n\n\nClick the \nRoles\n tab in the set of tabs above the \nAdd user\n button.\n\n\nClick the blue \nAdd role\n button to bring up the \nAdd role\n page.\n\n\n\nName the role in a way that it can be disambiguated from related activities or similar groups.\n\n\nFor example: use the course code for a particular class of students working on a particular collection.\n\n\n\n\n\n\nClick the blue \nSave\n button.\n\n\n\n\nHow to Edit Role Permissions\n\n\n\n\nLog in to Drupal. You will need the Administrator role to edit permissions.\n\n\nClick the \nManage\n tab from the top toolbar.\n\n\nSelect the \nPeople\n tab from the resulting menu.\n\n\nClick the \nRoles\n tab in the set of tabs above the \nAdd user\n button.\n\n\n\nTo edit the permissions for a role click the \nEdit\n dropdown menu to the right of a role and select \nEdit Permissions\n to bring up the \nEdit role\n page.\n\n\nScroll down or search for options that have an \nIslandora\n prefix or contain the word \nIslandora\n. For example, \nIslandora Access: Create terms\n.\n\n\n\n\n\nFurther Reading on Managing Users in Drupal\n\n\nFor more information on managing users in Drupal visit the section\n\nManaging User Accounts\n of Drupal.org.", 
            "title": "Users"
        }, 
        {
            "location": "/user-documentation/users/#managing-users", 
            "text": "", 
            "title": "Managing Users"
        }, 
        {
            "location": "/user-documentation/users/#how-to-add-a-user", 
            "text": "Log in to Drupal. You will need the Administrator role to Manage Users.  Click the  Manage  tab from the top toolbar.  Select the  People  tab from the resulting menu to bring up the  People  page.  Click the blue  Add user  button to bring up the  Add user  page.  Enter all required fields, as indicated by red asterisks, in the  Add user  page.  In the  Roles  section, click on the roles that the new user will need.  Click on \"Administrator\" if the new user will need to be able to run administrative tasks in Drupal or Islandora 8.  Click on \"fedoraAdmin\" if the new user will need to be able to write to Fedora. This is required by the WebAC authentication so Islandora 8 and Fedora can communicate.  Review other settings available for a new user such as:  Site language  English  selected by default.    Contact Settings section  Personal contact form  selected by default.    Click on the  Create New Account  button at the bottom of the  Add user  page to finish adding a new user.   To review/edit the permission for each role, in the  People  page click the  Permissions  tab in the set of tabs above the  Add user  button.", 
            "title": "How to Add a User"
        }, 
        {
            "location": "/user-documentation/users/#how-to-create-a-new-user-role", 
            "text": "Log in to Drupal. You will need the Administrator role to edit or add roles.  Click the  Manage  tab from the top toolbar.  Select the  People  tab from the resulting menu.  Click the  Roles  tab in the set of tabs above the  Add user  button.  Click the blue  Add role  button to bring up the  Add role  page.  Name the role in a way that it can be disambiguated from related activities or similar groups.  For example: use the course code for a particular class of students working on a particular collection.    Click the blue  Save  button.", 
            "title": "How to Create a New User Role"
        }, 
        {
            "location": "/user-documentation/users/#how-to-edit-role-permissions", 
            "text": "Log in to Drupal. You will need the Administrator role to edit permissions.  Click the  Manage  tab from the top toolbar.  Select the  People  tab from the resulting menu.  Click the  Roles  tab in the set of tabs above the  Add user  button.  To edit the permissions for a role click the  Edit  dropdown menu to the right of a role and select  Edit Permissions  to bring up the  Edit role  page.  Scroll down or search for options that have an  Islandora  prefix or contain the word  Islandora . For example,  Islandora Access: Create terms .", 
            "title": "How to Edit Role Permissions"
        }, 
        {
            "location": "/user-documentation/users/#further-reading-on-managing-users-in-drupal", 
            "text": "For more information on managing users in Drupal visit the section Managing User Accounts  of Drupal.org.", 
            "title": "Further Reading on Managing Users in Drupal"
        }, 
        {
            "location": "/user-documentation/placing-blocks/", 
            "text": "Placing Blocks\n\n\nUsing Block Layout\n\n\nIn Drupal, blocks are snippets of content that can be placed on pages within your website's layout. Some examples of blocks\nare your site's menu, breadcrumbs, search block, etc...  You have a lot of control over when and where you see blocks using\nDrupal's administrative interface.   You can create and delete blocks, as well as move them around in different locations \non the page (called 'regions' in Drupal theme terminology).  You can also control on which pages the blocks are visible,\nallowing you to conditionally show/hide them as appropriate.  Blocks are made available to place by enabling the Drupal\nmodules that provide them, and there's lots out there to choose from.  Placing blocks is an essential skill for any site\nadministrator, so let's jump right in and get our hands dirty.\n\n\n\n\nUsing the admin toolbar, navigate to Admin \n Structure \n Block layout (admin/structure/block).  You will see a table listing\nall of the available regions provided by the current theme for block placement.  You can switch between available themes\nusing the tabs above the table.  For each region, enabled blocks are listed and can be re-arranged.  Take a look at the \n\"Main Content\" region for example.\n\n\n\n\nIf you wanted to move the content above its tabs, you could drag the \"Main page content\" block above the \"Tabs\" block.\nIf you scroll all the way down to the bottom and click the \"Save blocks\" button, now when you go to view content you\nshould see something like this\n\n\n\n\nIf you want to add a new block to a region, hit the \"Place block\" button for that region and you'll be brought to a modal\nthat will let you select which block to place.\n\n\n\n\nAfter selecting your block, you will be brought to its configuration form.\n\n\n\n\nHere you can give the block a different title, change its region using a dropdown, and control its visibility settings by\nconfiguring various conditions. In our case, we're adding the \"Development\" block to the \"Footer\" region. And since we want\nto see this block everywhere, we'll leave the visibility settings alone for now.  Click the \"Save block\" button, and now if\nwe go view some content we should see the \"Development\" menu in the footer of our site.\n\n\n\n\nIf we want to limit this eyesore to only the front page of our site, we can revisit the visibility settings of the block.\nNavigate to the block we just placed on the block placement page, and click its \"Configure\" button.  Here you can limit\nthe block to show only for certain roles or content types.  You can also explicitly set a white or black list of pages,\nwhich is what we'll do.\n\n\n\n\nClick the Pages tab and you'll have a text area you can list pages in.  We're going to enter\n\nfront\n, which is a special value that means \"The front page of your site\".  Underneath the text area, you can select\nwhether you are showing or hiding the block for this list of pages.  We want to show this only on the front page, so we'll\nleave it set at \"Show for the listed pages\".  Click \"Save block\" and go back to a piece of content.  You shouldn't see\nthe development menu.\n\n\n\n\nBut go to the frontpage and...\n\n\n\n\nUsing Context\n\n\nThe visibility conditions in the block placment UI are simple and effective.  They cover the majority of use cases,\nhowever, there are times when you need even more control.  This is where the Context module really shines. \nAny condition available to the Context module can be used to control block visibility.  And you can even combine conditions\nusing boolean (AND/OR) logic.\n\n\nFor example, in the \nislandora_demo\n feature, we provide a context specifically for showing a list of members of a collection.\nAll of our content is the same content type (Repository Item), and Collections are distinguished by being tagged with the\n\"Collection\" taxonomy term.  Using the admin toolbar, if you navigate to Admin \n Structure \n Context (admin/structure/context),\nyou should see a list of all contexts available to the site.\n\n\n\n\nClick the \"Configure\" button on the \"Collection\" context.\n\n\n\n\nYou can see in its \"Condition\" section, we have the \"Node has term\" condition, which checks for content tagged with the\nterm provided by the user.  In this case, it's set to look for the \"Collection\" tag.  Underneath, in the \"Reaction\" section,\nyou can see that the \"Block\" reaction has been selected, and its configuration looks a lot like the core block placement\nUI.\n\nThe only difference here is that when the \"Include blocks from block layout\" box is checked, you are only placing the blocks\nyou want to add in addtion to an already existing block layout.  If you uncheck the box, you are creating an entirely new\nblock layout from scratch, and will have to replace basic things like breadcrumbs and menus.\n\n\n\n\nHere you can see we've added only the members block to this block layout.  If we go and navigate to a collection, you'll\nsee its list of members underneath its content.\n\n\n\n\nIf we edit the collection and change its model tag from \"Collection\" to anything else, you'll see the block disappears!\n\n\n\n\nAs you can see, block placement can be very flexible, and allow you to customize your site in a very granular fashion.\nBetween using core block placement and the context module, there's no block you can't get into the right place on your site.", 
            "title": "Blocks"
        }, 
        {
            "location": "/user-documentation/placing-blocks/#placing-blocks", 
            "text": "", 
            "title": "Placing Blocks"
        }, 
        {
            "location": "/user-documentation/placing-blocks/#using-block-layout", 
            "text": "In Drupal, blocks are snippets of content that can be placed on pages within your website's layout. Some examples of blocks\nare your site's menu, breadcrumbs, search block, etc...  You have a lot of control over when and where you see blocks using\nDrupal's administrative interface.   You can create and delete blocks, as well as move them around in different locations \non the page (called 'regions' in Drupal theme terminology).  You can also control on which pages the blocks are visible,\nallowing you to conditionally show/hide them as appropriate.  Blocks are made available to place by enabling the Drupal\nmodules that provide them, and there's lots out there to choose from.  Placing blocks is an essential skill for any site\nadministrator, so let's jump right in and get our hands dirty.   Using the admin toolbar, navigate to Admin   Structure   Block layout (admin/structure/block).  You will see a table listing\nall of the available regions provided by the current theme for block placement.  You can switch between available themes\nusing the tabs above the table.  For each region, enabled blocks are listed and can be re-arranged.  Take a look at the \n\"Main Content\" region for example.   If you wanted to move the content above its tabs, you could drag the \"Main page content\" block above the \"Tabs\" block.\nIf you scroll all the way down to the bottom and click the \"Save blocks\" button, now when you go to view content you\nshould see something like this   If you want to add a new block to a region, hit the \"Place block\" button for that region and you'll be brought to a modal\nthat will let you select which block to place.   After selecting your block, you will be brought to its configuration form.   Here you can give the block a different title, change its region using a dropdown, and control its visibility settings by\nconfiguring various conditions. In our case, we're adding the \"Development\" block to the \"Footer\" region. And since we want\nto see this block everywhere, we'll leave the visibility settings alone for now.  Click the \"Save block\" button, and now if\nwe go view some content we should see the \"Development\" menu in the footer of our site.   If we want to limit this eyesore to only the front page of our site, we can revisit the visibility settings of the block.\nNavigate to the block we just placed on the block placement page, and click its \"Configure\" button.  Here you can limit\nthe block to show only for certain roles or content types.  You can also explicitly set a white or black list of pages,\nwhich is what we'll do.   Click the Pages tab and you'll have a text area you can list pages in.  We're going to enter front , which is a special value that means \"The front page of your site\".  Underneath the text area, you can select\nwhether you are showing or hiding the block for this list of pages.  We want to show this only on the front page, so we'll\nleave it set at \"Show for the listed pages\".  Click \"Save block\" and go back to a piece of content.  You shouldn't see\nthe development menu.   But go to the frontpage and...", 
            "title": "Using Block Layout"
        }, 
        {
            "location": "/user-documentation/placing-blocks/#using-context", 
            "text": "The visibility conditions in the block placment UI are simple and effective.  They cover the majority of use cases,\nhowever, there are times when you need even more control.  This is where the Context module really shines. \nAny condition available to the Context module can be used to control block visibility.  And you can even combine conditions\nusing boolean (AND/OR) logic.  For example, in the  islandora_demo  feature, we provide a context specifically for showing a list of members of a collection.\nAll of our content is the same content type (Repository Item), and Collections are distinguished by being tagged with the\n\"Collection\" taxonomy term.  Using the admin toolbar, if you navigate to Admin   Structure   Context (admin/structure/context),\nyou should see a list of all contexts available to the site.   Click the \"Configure\" button on the \"Collection\" context.   You can see in its \"Condition\" section, we have the \"Node has term\" condition, which checks for content tagged with the\nterm provided by the user.  In this case, it's set to look for the \"Collection\" tag.  Underneath, in the \"Reaction\" section,\nyou can see that the \"Block\" reaction has been selected, and its configuration looks a lot like the core block placement\nUI. \nThe only difference here is that when the \"Include blocks from block layout\" box is checked, you are only placing the blocks\nyou want to add in addtion to an already existing block layout.  If you uncheck the box, you are creating an entirely new\nblock layout from scratch, and will have to replace basic things like breadcrumbs and menus.   Here you can see we've added only the members block to this block layout.  If we go and navigate to a collection, you'll\nsee its list of members underneath its content.   If we edit the collection and change its model tag from \"Collection\" to anything else, you'll see the block disappears!   As you can see, block placement can be very flexible, and allow you to customize your site in a very granular fashion.\nBetween using core block placement and the context module, there's no block you can't get into the right place on your site.", 
            "title": "Using Context"
        }, 
        {
            "location": "/technical-documentation/using-rest-endpoints/", 
            "text": "Islandora 8 via REST\n\n\nEach node, media and file in Drupal 8 has its own URI and we can GET the resources, some in a variety of formats.\n\n\nWe can also create nodes, media and files in Drupal by using PUT and/or POST requests.\n\n\nWe can update the field content by using a PATCH request and lastly we can DELETE a node, media or file resource.\n\n\nTo perform these actions, you will need the \nRESTful Web Services\n module enabled.\n\n\nTo configure your setup via the UI, you also need the \nRESTful UI\n module enabled.\n\n\nThen you can configure your REST services at \nhttps://\nyourmachine\n/admin/config/services/rest\n\n\nThis screenshot shows the setup for resources, you can see the various HTTP methods and what formats they will respond in and what authentication methods they support.\n\n\n\n\n\n\nAuthorization\n\n\nGetting resources - GET\n\n\nCreating resources - POST/PUT\n\n\nUpdating resources - PATCH\n\n\nDeleting resources - DELETE\n\n\n\n\nAuthorization\n\n\nIf your resources are restricted (hidden) you will need to have authorization to access them.\n\n\nYou can specify which types of authentication are allowed for which HTTP methods.\n\n\nThese are common to all HTTP methods against the REST API.\n\n\nIn the above screenshot we have 3 allowed methods.\n1. basic_auth\n1. jwt_auth\n1. cookie\n\n\nBasic authentication (basic_auth)\n\n\nTo use basic authentication with a client like cURL use the \n-u username:password\n argument.\n\n\nFor example:\n\n\ncurl -u admin:islandora http://localhost:8000/node/3\n\n\n\n\nJWT authentication (jwt_auth)\n\n\nBy default JWTs are passed internally from Drupal to various microservices and Fedora. \n\n\nTo use a JWT yourself you need to enable the \nJWT Authentication Issuer\n module.\n\n\nOnce enabled this module makes a \n/jwt/token\n endpoint. You can perform a \nGET\n against this endpoint as an authenticated user to receive a JWT.\n\n\nFor example:\n\n\ncurl -i -u admin:islandora http://localhost:8000/jwt/token\n\nHTTP/1.1 200 OK\nDate: Mon, 04 Mar 2019 22:08:37 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 620\nContent-Type: application/json\n\n{\n  \ntoken\n : \neyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NTE3MzczMTcsImV4cCI6MTU1MTc0NDUxNywiZHJ1cGFsIjp7InVpZCI6IjEifSwid2ViaWQiOiIxIiwiaXNzIjoiaHR0cHM6XC9cL2xvY2FsaG9zdDo4MDAwIiwic3ViIjoiYWRtaW4iLCJyb2xlcyI6WyJhdXRoZW50aWNhdGVkIiwiYWRtaW5pc3RyYXRvciIsImZlZG9yYWFkbWluIl19.QUTrMiK_DyBxqQY4LnibLYtieEW3-MyjjQO9NSFI7bPylNm1S5ZY0uvzjDob3ckYgRN4uCyMFZO4BPytpQVA_jyeSuZyUA_10v33ItpoKyjrJ_S057iykNd_rWmxe8tT8T1fPypq_-Z7Th_PkyZWrYBqoBBVO1iVQt5txxfGWMqhxd2FgsXw6N-aR9sYOSc4UrLmFRmPP5Zk_CNIZP6NtBaM9JNr8CnWyPEFSAR75xfyH3ge5qjBqLlDS389k07pyJFB5rOT59txzLE9WLvpp9JK3oQv821Q1Bp-PMiASghXc0dBCHxM8o41BzLE88UstRA7agBAkUqG3hMpoNZqfA\n\n}\n\n\n\n\nYou can then take the same token and re-use it.\n\n\ncurl -H\nAuthorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NTE3MzczMTcsImV4cCI6MTU1MTc0NDUxNywiZHJ1cGFsIjp7InVpZCI6IjEifSwid2ViaWQiOiIxIiwiaXNzIjoiaHR0cHM6XC9cL2xvY2FsaG9zdDo4MDAwIiwic3ViIjoiYWRtaW4iLCJyb2xlcyI6WyJhdXRoZW50aWNhdGVkIiwiYWRtaW5pc3RyYXRvciIsImZlZG9yYWFkbWluIl19.QUTrMiK_DyBxqQY4LnibLYtieEW3-MyjjQO9NSFI7bPylNm1S5ZY0uvzjDob3ckYgRN4uCyMFZO4BPytpQVA_jyeSuZyUA_10v33ItpoKyjrJ_S057iykNd_rWmxe8tT8T1fPypq_-Z7Th_PkyZWrYBqoBBVO1iVQt5txxfGWMqhxd2FgsXw6N-aR9sYOSc4UrLmFRmPP5Zk_CNIZP6NtBaM9JNr8CnWyPEFSAR75xfyH3ge5qjBqLlDS389k07pyJFB5rOT59txzLE9WLvpp9JK3oQv821Q1Bp-PMiASghXc0dBCHxM8o41BzLE88UstRA7agBAkUqG3hMpoNZqfA\n http://localhost:8000/node/3?_format=jsonld\n\nHTTP/1.1 200 OK\nDate: Mon, 04 Mar 2019 22:10:02 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nLink: \nhttp://localhost:8000/node/3\n; rel=\ncanonical\n\nLink: \nhttp://localhost:8000/node/3/delete\n; rel=\nhttps://drupal.org/link-relations/delete-form\n\nLink: \nhttp://localhost:8000/admin/content/node/delete?node=3\n; rel=\nhttps://drupal.org/link-relations/delete-multiple-form\n\nLink: \nhttp://localhost:8000/node/3/edit\n; rel=\nedit-form\n\nLink: \nhttp://localhost:8000/node/3/revisions\n; rel=\nversion-history\n\nLink: \nhttp://localhost:8000/node/3\n; rel=\nhttps://drupal.org/link-relations/revision\n\nLink: \nhttp://localhost:8000/node?node=3\n; rel=\nhttps://drupal.org/link-relations/create\n\nLink: \nhttp://purl.org/coar/resource_type/c_c513\n; rel=\ntag\n; title=\nImage\n\nLink: \nhttp://localhost:8000/media/1\n; rel=\nrelated\n; title=\nOriginal File\n\nLink: \nhttp://localhost:8000/media/2\n; rel=\nrelated\n; title=\nService File\n\nLink: \nhttp://localhost:8000/media/3\n; rel=\nrelated\n; title=\nThumbnail Image\n\nLink: \nhttp://localhost:8000/node/3?_format=json\n; rel=\nalternate\n; type=\napplication/json\n\nX-Drupal-Dynamic-Cache: HIT\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 858\nContent-Type: application/ld+json\n\n{\n  \n@graph\n: [\n    {\n      \n@id\n: \nhttp:\\\\/\\\\/localhost:8000\\\\/node\\\\/3?_format=jsonld\n,\n      \n@type\n: [\n        \nhttp:\\\\/\\\\/pcdm.org\\\\/models#Object\n\n      ],\n      \nhttp:\\\\/\\\\/purl.org\\\\/dc\\\\/terms\\\\/title\n: [\n        {\n          \n@value\n: \nCustom item\n,\n          \n@language\n: \nen\n\n        }\n      ],\n      \nhttp:\\\\/\\\\/schema.org\\\\/author\n: [\n        {\n          \n@id\n: \nhttp:\\\\/\\\\/localhost:8000\\\\/user\\\\/1?_format=jsonld\n\n        }\n      ],\n      \nhttp:\\\\/\\\\/schema.org\\\\/dateCreated\n: [\n        {\n          \n@value\n: \n2019-03-01T19:42:54+00:00\n,\n          \n@type\n: \nhttp:\\\\/\\\\/www.w3.org\\\\/2001\\\\/XMLSchema#dateTime\n\n        }\n      ],\n      \nhttp:\\\\/\\\\/schema.org\\\\/dateModified\n: [\n        {\n          \n@value\n: \n2019-03-01T19:43:12+00:00\n,\n          \n@type\n: \nhttp:\\\\/\\\\/www.w3.org\\\\/2001\\\\/XMLSchema#dateTime\n\n        }\n      ],\n      \nhttp:\\\\/\\\\/purl.org\\\\/dc\\\\/terms\\\\/extent\n: [\n        {\n          \n@value\n: \n1 item\n,\n          \n@type\n: \nhttp:\\\\/\\\\/www.w3.org\\\\/2001\\\\/XMLSchema#string\n\n        }\n      ],\n      \nhttp:\\\\/\\\\/schema.org\\\\/sameAs\n: [\n        {\n          \n@value\n: \nhttp:\\\\/\\\\/localhost:8000\\\\/node\\\\/1?_format=jsonld\n\n        }\n      ]\n    },\n    {\n      \n@id\n: \nhttp:\\\\/\\\\/localhost:8000\\\\/user\\\\/1?_format=jsonld\n,\n      \n@type\n: [\n        \nhttp:\\\\/\\\\/schema.org\\\\/Person\n\n      ]\n    }\n  ]\n}\n\n\n\n\nCookie authentication (cookie)\n\n\nThis allows you to use a cookie stored in your web browser when you log in to Drupal to access these REST endpoint pages.\n\n\nThis is what allows you to access the URIs like \nhttp://localhost:8000/node/1?_format=json\n with your web browser.", 
            "title": "Introduction"
        }, 
        {
            "location": "/technical-documentation/using-rest-endpoints/#islandora-8-via-rest", 
            "text": "Each node, media and file in Drupal 8 has its own URI and we can GET the resources, some in a variety of formats.  We can also create nodes, media and files in Drupal by using PUT and/or POST requests.  We can update the field content by using a PATCH request and lastly we can DELETE a node, media or file resource.  To perform these actions, you will need the  RESTful Web Services  module enabled.  To configure your setup via the UI, you also need the  RESTful UI  module enabled.  Then you can configure your REST services at  https:// yourmachine /admin/config/services/rest  This screenshot shows the setup for resources, you can see the various HTTP methods and what formats they will respond in and what authentication methods they support.    Authorization  Getting resources - GET  Creating resources - POST/PUT  Updating resources - PATCH  Deleting resources - DELETE", 
            "title": "Islandora 8 via REST"
        }, 
        {
            "location": "/technical-documentation/using-rest-endpoints/#authorization", 
            "text": "If your resources are restricted (hidden) you will need to have authorization to access them.  You can specify which types of authentication are allowed for which HTTP methods.  These are common to all HTTP methods against the REST API.  In the above screenshot we have 3 allowed methods.\n1. basic_auth\n1. jwt_auth\n1. cookie", 
            "title": "Authorization"
        }, 
        {
            "location": "/technical-documentation/using-rest-endpoints/#basic-authentication-basic_auth", 
            "text": "To use basic authentication with a client like cURL use the  -u username:password  argument.  For example:  curl -u admin:islandora http://localhost:8000/node/3", 
            "title": "Basic authentication (basic_auth)"
        }, 
        {
            "location": "/technical-documentation/using-rest-endpoints/#jwt-authentication-jwt_auth", 
            "text": "By default JWTs are passed internally from Drupal to various microservices and Fedora.   To use a JWT yourself you need to enable the  JWT Authentication Issuer  module.  Once enabled this module makes a  /jwt/token  endpoint. You can perform a  GET  against this endpoint as an authenticated user to receive a JWT.  For example:  curl -i -u admin:islandora http://localhost:8000/jwt/token\n\nHTTP/1.1 200 OK\nDate: Mon, 04 Mar 2019 22:08:37 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 620\nContent-Type: application/json\n\n{\n   token  :  eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NTE3MzczMTcsImV4cCI6MTU1MTc0NDUxNywiZHJ1cGFsIjp7InVpZCI6IjEifSwid2ViaWQiOiIxIiwiaXNzIjoiaHR0cHM6XC9cL2xvY2FsaG9zdDo4MDAwIiwic3ViIjoiYWRtaW4iLCJyb2xlcyI6WyJhdXRoZW50aWNhdGVkIiwiYWRtaW5pc3RyYXRvciIsImZlZG9yYWFkbWluIl19.QUTrMiK_DyBxqQY4LnibLYtieEW3-MyjjQO9NSFI7bPylNm1S5ZY0uvzjDob3ckYgRN4uCyMFZO4BPytpQVA_jyeSuZyUA_10v33ItpoKyjrJ_S057iykNd_rWmxe8tT8T1fPypq_-Z7Th_PkyZWrYBqoBBVO1iVQt5txxfGWMqhxd2FgsXw6N-aR9sYOSc4UrLmFRmPP5Zk_CNIZP6NtBaM9JNr8CnWyPEFSAR75xfyH3ge5qjBqLlDS389k07pyJFB5rOT59txzLE9WLvpp9JK3oQv821Q1Bp-PMiASghXc0dBCHxM8o41BzLE88UstRA7agBAkUqG3hMpoNZqfA \n}  You can then take the same token and re-use it.  curl -H Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE1NTE3MzczMTcsImV4cCI6MTU1MTc0NDUxNywiZHJ1cGFsIjp7InVpZCI6IjEifSwid2ViaWQiOiIxIiwiaXNzIjoiaHR0cHM6XC9cL2xvY2FsaG9zdDo4MDAwIiwic3ViIjoiYWRtaW4iLCJyb2xlcyI6WyJhdXRoZW50aWNhdGVkIiwiYWRtaW5pc3RyYXRvciIsImZlZG9yYWFkbWluIl19.QUTrMiK_DyBxqQY4LnibLYtieEW3-MyjjQO9NSFI7bPylNm1S5ZY0uvzjDob3ckYgRN4uCyMFZO4BPytpQVA_jyeSuZyUA_10v33ItpoKyjrJ_S057iykNd_rWmxe8tT8T1fPypq_-Z7Th_PkyZWrYBqoBBVO1iVQt5txxfGWMqhxd2FgsXw6N-aR9sYOSc4UrLmFRmPP5Zk_CNIZP6NtBaM9JNr8CnWyPEFSAR75xfyH3ge5qjBqLlDS389k07pyJFB5rOT59txzLE9WLvpp9JK3oQv821Q1Bp-PMiASghXc0dBCHxM8o41BzLE88UstRA7agBAkUqG3hMpoNZqfA  http://localhost:8000/node/3?_format=jsonld\n\nHTTP/1.1 200 OK\nDate: Mon, 04 Mar 2019 22:10:02 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nLink:  http://localhost:8000/node/3 ; rel= canonical \nLink:  http://localhost:8000/node/3/delete ; rel= https://drupal.org/link-relations/delete-form \nLink:  http://localhost:8000/admin/content/node/delete?node=3 ; rel= https://drupal.org/link-relations/delete-multiple-form \nLink:  http://localhost:8000/node/3/edit ; rel= edit-form \nLink:  http://localhost:8000/node/3/revisions ; rel= version-history \nLink:  http://localhost:8000/node/3 ; rel= https://drupal.org/link-relations/revision \nLink:  http://localhost:8000/node?node=3 ; rel= https://drupal.org/link-relations/create \nLink:  http://purl.org/coar/resource_type/c_c513 ; rel= tag ; title= Image \nLink:  http://localhost:8000/media/1 ; rel= related ; title= Original File \nLink:  http://localhost:8000/media/2 ; rel= related ; title= Service File \nLink:  http://localhost:8000/media/3 ; rel= related ; title= Thumbnail Image \nLink:  http://localhost:8000/node/3?_format=json ; rel= alternate ; type= application/json \nX-Drupal-Dynamic-Cache: HIT\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 858\nContent-Type: application/ld+json\n\n{\n   @graph : [\n    {\n       @id :  http:\\\\/\\\\/localhost:8000\\\\/node\\\\/3?_format=jsonld ,\n       @type : [\n         http:\\\\/\\\\/pcdm.org\\\\/models#Object \n      ],\n       http:\\\\/\\\\/purl.org\\\\/dc\\\\/terms\\\\/title : [\n        {\n           @value :  Custom item ,\n           @language :  en \n        }\n      ],\n       http:\\\\/\\\\/schema.org\\\\/author : [\n        {\n           @id :  http:\\\\/\\\\/localhost:8000\\\\/user\\\\/1?_format=jsonld \n        }\n      ],\n       http:\\\\/\\\\/schema.org\\\\/dateCreated : [\n        {\n           @value :  2019-03-01T19:42:54+00:00 ,\n           @type :  http:\\\\/\\\\/www.w3.org\\\\/2001\\\\/XMLSchema#dateTime \n        }\n      ],\n       http:\\\\/\\\\/schema.org\\\\/dateModified : [\n        {\n           @value :  2019-03-01T19:43:12+00:00 ,\n           @type :  http:\\\\/\\\\/www.w3.org\\\\/2001\\\\/XMLSchema#dateTime \n        }\n      ],\n       http:\\\\/\\\\/purl.org\\\\/dc\\\\/terms\\\\/extent : [\n        {\n           @value :  1 item ,\n           @type :  http:\\\\/\\\\/www.w3.org\\\\/2001\\\\/XMLSchema#string \n        }\n      ],\n       http:\\\\/\\\\/schema.org\\\\/sameAs : [\n        {\n           @value :  http:\\\\/\\\\/localhost:8000\\\\/node\\\\/1?_format=jsonld \n        }\n      ]\n    },\n    {\n       @id :  http:\\\\/\\\\/localhost:8000\\\\/user\\\\/1?_format=jsonld ,\n       @type : [\n         http:\\\\/\\\\/schema.org\\\\/Person \n      ]\n    }\n  ]\n}", 
            "title": "JWT authentication (jwt_auth)"
        }, 
        {
            "location": "/technical-documentation/using-rest-endpoints/#cookie-authentication-cookie", 
            "text": "This allows you to use a cookie stored in your web browser when you log in to Drupal to access these REST endpoint pages.  This is what allows you to access the URIs like  http://localhost:8000/node/1?_format=json  with your web browser.", 
            "title": "Cookie authentication (cookie)"
        }, 
        {
            "location": "/technical-documentation/rest-get/", 
            "text": "Getting resources, media and files - GET Requests\n\n\n\n\nAuthorization\n\n\nContent\n\n\nMedia\n\n\nFiles\n\n\n\n\nAuthorization\n\n\nIf you have restricted access to view your content, you will need to use one of the configured authorization methods to access your content, media and/or files.\n\n\nThese are defined under \nAuthorization\n on the overview.\n\n\nContent (Nodes)\n\n\n\n\nThe above setup shows that you can perform a GET request against a node at the \n/node/{id}\n endpoint. This is the same as the URL when viewed through a web browser. For example \nhttp://localhost:8000/node/2\n\n\nIt also defines the \nformats\n you can access. In this example \njson\n and \njsonld\n are available. \n\n\nTo access a resource in a specific format use the \n_format=\n argument which is appended to the end of the URI after a \n?\n.\n\n\nTo get the resource located at \nhttp://localhost:8000/node/3\n in JSON, you can go to \nhttp://localhost:8000/node/3?_format=json\n.\n\n\n For example:\n\n\nYou can do this in your web browser or with a command line client like cURL. (Note: response body here has been formatted, yours will look different)\n\n\nvagrant@claw:~$ curl -i http://localhost:8000/node/3?_format=json\n\nHTTP/1.1 200 OK\nDate: Mon, 04 Mar 2019 21:53:50 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nLink: \nhttp://localhost:8000/node/3\n; rel=\ncanonical\n\nLink: \nhttp://localhost:8000/node/3/delete\n; rel=\nhttps://drupal.org/link-relations/delete-form\n\nLink: \nhttp://localhost:8000/admin/content/node/delete?node=3\n; rel=\nhttps://drupal.org/link-relations/delete-multiple-form\n\nLink: \nhttp://localhost:8000/node/3/edit\n; rel=\nedit-form\n\nLink: \nhttp://localhost:8000/node/3/revisions\n; rel=\nversion-history\n\nLink: \nhttp://localhost:8000/node/3\n; rel=\nhttps://drupal.org/link-relations/revision\n\nLink: \nhttp://localhost:8000/node?node=3\n; rel=\nhttps://drupal.org/link-relations/create\n\nLink: \nhttp://purl.org/coar/resource_type/c_c513\n; rel=\ntag\n; title=\nImage\n\nLink: \nhttp://localhost:8000/media/1\n; rel=\nrelated\n; title=\nOriginal File\n\nLink: \nhttp://localhost:8000/media/2\n; rel=\nrelated\n; title=\nService File\n\nLink: \nhttp://localhost:8000/media/3\n; rel=\nrelated\n; title=\nThumbnail Image\n\nLink: \nhttp://localhost:8000/node/3?_format=jsonld\n; rel=\nalternate\n; type=\napplication/ld+json\n\nX-Drupal-Dynamic-Cache: MISS\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nX-Drupal-Cache: MISS\nContent-Length: 1521\nContent-Type: application/json\n\n{\n  \nnid\n: [\n    {\n      \nvalue\n: 1\n    }\n  ],\n  \nuuid\n: [\n    {\n      \nvalue\n: \n8322e36e-f8ec-4fd9-919d-52aed7b17a52\n\n    }\n  ],\n  \nvid\n: [\n    {\n      \nvalue\n: 1\n    }\n  ],\n  \nlangcode\n: [\n    {\n      \nvalue\n: \nen\n\n    }\n  ],\n  \ntype\n: [\n    {\n      \ntarget_id\n: \nislandora_object\n,\n      \ntarget_type\n: \nnode_type\n,\n      \ntarget_uuid\n: \n62189bec-3ef3-4196-b847-b17e5ce61fd5\n\n    }\n  ],\n  \nrevision_timestamp\n: [\n    {\n      \nvalue\n: \n2019-03-01T19:43:12+00:00\n,\n      \nformat\n: \nY-m-d\\\\TH:i:sP\n\n    }\n  ],\n  \nrevision_uid\n: [\n    {\n      \ntarget_id\n: 1,\n      \ntarget_type\n: \nuser\n,\n      \ntarget_uuid\n: \n46a47057-de2d-4ce2-87ae-dbe4551209b8\n,\n      \nurl\n: \n\\\\/user\\\\/1\n\n    }\n  ],\n  \nrevision_log\n: [],\n  \nstatus\n: [\n    {\n      \nvalue\n: true\n    }\n  ],\n  \ntitle\n: [\n    {\n      \nvalue\n: \nCustom item\n\n    }\n  ],\n  \nuid\n: [\n    {\n      \ntarget_id\n: 1,\n      \ntarget_type\n: \nuser\n,\n      \ntarget_uuid\n: \n46a47057-de2d-4ce2-87ae-dbe4551209b8\n,\n      \nurl\n: \n\\\\/user\\\\/1\n\n    }\n  ],\n  \ncreated\n: [\n    {\n      \nvalue\n: \n2019-03-01T19:42:54+00:00\n,\n      \nformat\n: \nY-m-d\\\\TH:i:sP\n\n    }\n  ],\n  \nchanged\n: [\n    {\n      \nvalue\n: \n2019-03-01T19:43:12+00:00\n,\n      \nformat\n: \nY-m-d\\\\TH:i:sP\n\n    }\n  ],\n  \npromote\n: [\n    {\n      \nvalue\n: true\n    }\n  ],\n  \nsticky\n: [\n    {\n      \nvalue\n: false\n    }\n  ],\n  \ndefault_langcode\n: [\n    {\n      \nvalue\n: true\n    }\n  ],\n  \nrevision_translation_affected\n: [\n    {\n      \nvalue\n: true\n    }\n  ],\n  \ncontent_translation_source\n: [\n    {\n      \nvalue\n: \nund\n\n    }\n  ],\n  \ncontent_translation_outdated\n: [\n    {\n      \nvalue\n: false\n    }\n  ],\n  \nfield_alternative_title\n: [],\n  \nfield_description\n: [],\n  \nfield_display_hints\n: [],\n  \nfield_edtf_date\n: [],\n  \nfield_edtf_date_created\n: [],\n  \nfield_edtf_date_issued\n: [],\n  \nfield_extent\n: [\n    {\n      \nvalue\n: \n1 item\n\n    }\n  ],\n  \nfield_identifier\n: [],\n  \nfield_linked_agent\n: [],\n  \nfield_member_of\n: [],\n  \nfield_model\n: [\n    {\n      \ntarget_id\n: 24,\n      \ntarget_type\n: \ntaxonomy_term\n,\n      \ntarget_uuid\n: \ne7560b68-e95a-4e76-9671-2a3041cd9800\n,\n      \nurl\n: \n\\\\/taxonomy\\\\/term\\\\/24\n\n    }\n  ],\n  \nfield_pid\n: [],\n  \nfield_resource_type\n: [],\n  \nfield_rights\n: [],\n  \nfield_subject\n: []\n}\n\n\n\n\nMedia\n\n\nThe above steps are the same for media, it is just the URI that has changed.\n\n\n\n\nFor media you use \n/media/{id}\n\n\n For example: \n\n\ncurl -u admin:islandora http://localhost:8000/media/2?_format=json\n\n{\n  \nmid\n: [\n    {\n      \nvalue\n: 2\n    }\n  ],\n  \nuuid\n: [\n    {\n      \nvalue\n: \ne75e609d-510c-4764-9280-665bb7026161\n\n    }\n  ],\n  \nvid\n: [\n    {\n      \nvalue\n: 2\n    }\n  ],\n  \nlangcode\n: [\n    {\n      \nvalue\n: \nen\n\n    }\n  ],\n  \nbundle\n: [\n    {\n      \ntarget_id\n: \nimage\n,\n      \ntarget_type\n: \nmedia_type\n,\n      \ntarget_uuid\n: \n3860e653-201b-4509-89dd-628c446d81cb\n\n    }\n  ],\n  \nrevision_created\n: [\n    {\n      \nvalue\n: \n2019-03-01T19:43:48+00:00\n,\n      \nformat\n: \nY-m-d\\\\TH:i:sP\n\n    }\n  ],\n  \nrevision_user\n: [],\n  \nrevision_log_message\n: [],\n  \nstatus\n: [\n    {\n      \nvalue\n: true\n    }\n  ],\n  \nname\n: [\n    {\n      \nvalue\n: \n1-Service File.jpg\n\n    }\n  ],\n  \nthumbnail\n: [\n    {\n      \ntarget_id\n: 3,\n      \nalt\n: null,\n      \ntitle\n: null,\n      \nwidth\n: 800,\n      \nheight\n: 1333,\n      \ntarget_type\n: \nfile\n,\n      \ntarget_uuid\n: \ne97ad038-dcb3-4d81-aa91-c945b2fe092c\n,\n      \nurl\n: \nhttp:\\\\/\\\\/localhost:8000\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg\n\n    }\n  ],\n  \nuid\n: [\n    {\n      \ntarget_id\n: 1,\n      \ntarget_type\n: \nuser\n,\n      \ntarget_uuid\n: \n46a47057-de2d-4ce2-87ae-dbe4551209b8\n,\n      \nurl\n: \n\\\\/user\\\\/1\n\n    }\n  ],\n  \ncreated\n: [\n    {\n      \nvalue\n: \n2019-03-01T19:43:48+00:00\n,\n      \nformat\n: \nY-m-d\\\\TH:i:sP\n\n    }\n  ],\n  \nchanged\n: [\n    {\n      \nvalue\n: \n2019-03-01T19:43:48+00:00\n,\n      \nformat\n: \nY-m-d\\\\TH:i:sP\n\n    }\n  ],\n  \ndefault_langcode\n: [\n    {\n      \nvalue\n: true\n    }\n  ],\n  \nrevision_translation_affected\n: [\n    {\n      \nvalue\n: true\n    }\n  ],\n  \ncontent_translation_source\n: [\n    {\n      \nvalue\n: \nund\n\n    }\n  ],\n  \ncontent_translation_outdated\n: [\n    {\n      \nvalue\n: false\n    }\n  ],\n  \nfield_access_terms\n: [],\n  \nfield_file_size\n: [\n    {\n      \nvalue\n: 166608\n    }\n  ],\n  \nfield_height\n: [\n    {\n      \nvalue\n: 1333\n    }\n  ],\n  \nfield_media_image\n: [\n    {\n      \ntarget_id\n: 3,\n      \nalt\n: null,\n      \ntitle\n: null,\n      \nwidth\n: 800,\n      \nheight\n: 1333,\n      \ntarget_type\n: \nfile\n,\n      \ntarget_uuid\n: \ne97ad038-dcb3-4d81-aa91-c945b2fe092c\n,\n      \nurl\n: \nhttp:\\\\/\\\\/localhost:8000\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg\n\n    }\n  ],\n  \nfield_media_of\n: [\n    {\n      \ntarget_id\n: 1,\n      \ntarget_type\n: \nnode\n,\n      \ntarget_uuid\n: \n8322e36e-f8ec-4fd9-919d-52aed7b17a52\n,\n      \nurl\n: \n\\\\/node\\\\/1\n\n    }\n  ],\n  \nfield_media_use\n: [\n    {\n      \ntarget_id\n: 18,\n      \ntarget_type\n: \ntaxonomy_term\n,\n      \ntarget_uuid\n: \ne8c698a7-8c15-47c4-8567-1c27f8f0c19e\n,\n      \nurl\n: \n\\\\/taxonomy\\\\/term\\\\/18\n\n    }\n  ],\n  \nfield_mime_type\n: [\n    {\n      \nvalue\n: \nimage\\\\/jpeg\n\n    }\n  ],\n  \nfield_width\n: [\n    {\n      \nvalue\n: 800\n    }\n  ]\n}\n\n\n\n\nfield_media_of\n indicates which node(s) the media is associated with. The node can be referenced using the value of the \ntarget_id\n key (in this example, 1) or the \ntarget_uuid\n key (8322e36e-f8ec-4fd9-919d-52aed7b17a52).\n\n\nFiles\n\n\nThrough the REST API you are accessing metadata about files, but not the actual binary object.\n\n\n\n\nBased on the above configuration the path for a GET request is \n/entity/file/{id}\n\n\nThe file ID refers to the integer counter and \nnot\n the UUID of a file.\n\n\nThrough the UI you can go to the File listing at \nhttp://localhost:8000/admin/content/files\n.\n\n\nFor the file you want to access, choose the \nUSED IN\n link. \n\n\nThat URI has the format \nhttp://localhost:8000/admin/content/files/usage/{file id}\n\n\nAlternatively the file ID can be found by viewing the media metadata (above section). In the above example if you look through the response from a GET request to the \n/media/{id}\n you will find a section like:\n\n\n  \nfield_media_image\n: [\n    {\n      \ntarget_id\n: 3,\n      \nalt\n: null,\n      \ntitle\n: null,\n      \nwidth\n: 800,\n      \nheight\n: 1333,\n      \ntarget_type\n: \nfile\n,\n      \ntarget_uuid\n: \ne97ad038-dcb3-4d81-aa91-c945b2fe092c\n,\n      \nurl\n: \nhttp:\\\\/\\\\/localhost:8000\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg\n\n    }\n  ],\n\n\n\n\nNote\n: Depending on the \"type\" of file (image, video, audio, file) this field will have a different name.\n\n\nThis has both the \nurl\n which is the URI to retrieve the binary content of the file as well as the \ntarget_id\n which is the file ID.\n\n\nSo we can retrieve the file with a GET request to the URI \nhttp://localhost:8000/sites/default/files/2019-03/1-Service%20File.jpg\n.\n\n\nBut more importantly we can retrieve the file \nmetadata\n by making a request to \nhttp://localhost:8000/entity/file/3\n with one of the allowed \nformats\n\n\n For example:\n\n\n curl -i -X GET \nhttp://localhost:8000/entity/file/3?_format=json\n\n\nHTTP/1.1 200 OK\nDate: Tue, 05 Mar 2019 16:52:06 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-Drupal-Dynamic-Cache: MISS\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nX-Drupal-Cache: HIT\nContent-Length: 634\nContent-Type: application/json\n\n{\n  \nfid\n: [\n    {\n      \nvalue\n: 3\n    }\n  ],\n  \nuuid\n: [\n    {\n      \nvalue\n: \ne97ad038-dcb3-4d81-aa91-c945b2fe092c\n\n    }\n  ],\n  \nlangcode\n: [\n    {\n      \nvalue\n: \nen\n\n    }\n  ],\n  \nuid\n: [\n    {\n      \ntarget_id\n: 1,\n      \ntarget_type\n: \nuser\n,\n      \ntarget_uuid\n: \n46a47057-de2d-4ce2-87ae-dbe4551209b8\n,\n      \nurl\n: \n\\\\/user\\\\/1\n\n    }\n  ],\n  \nfilename\n: [\n    {\n      \nvalue\n: \n1-Service File.jpg\n\n    }\n  ],\n  \nuri\n: [\n    {\n      \nvalue\n: \npublic:\\\\/\\\\/2019-03\\\\/1-Service File.jpg\n,\n      \nurl\n: \n\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg\n\n    }\n  ],\n  \nfilemime\n: [\n    {\n      \nvalue\n: \nimage\\\\/jpeg\n\n    }\n  ],\n  \nfilesize\n: [\n    {\n      \nvalue\n: 166608\n    }\n  ],\n  \nstatus\n: [\n    {\n      \nvalue\n: true\n    }\n  ],\n  \ncreated\n: [\n    {\n      \nvalue\n: \n2019-03-01T19:43:48+00:00\n,\n      \nformat\n: \nY-m-d\\\\TH:i:sP\n\n    }\n  ],\n  \nchanged\n: [\n    {\n      \nvalue\n: \n2019-03-01T19:43:48+00:00\n,\n      \nformat\n: \nY-m-d\\\\TH:i:sP\n\n    }\n  ]\n}\n\n\n\n\nThe \nuri: url:\n is the path to your file, so for the above example of \n\"url\": \"\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg\"\n.\n\n\nI can perform a \nGET\n against \nmy hostname\n/sites/default/files/2019-03/1-Service%20File.jpg\n and get the contents of this file.", 
            "title": "GET"
        }, 
        {
            "location": "/technical-documentation/rest-get/#getting-resources-media-and-files-get-requests", 
            "text": "Authorization  Content  Media  Files", 
            "title": "Getting resources, media and files - GET Requests"
        }, 
        {
            "location": "/technical-documentation/rest-get/#authorization", 
            "text": "If you have restricted access to view your content, you will need to use one of the configured authorization methods to access your content, media and/or files.  These are defined under  Authorization  on the overview.", 
            "title": "Authorization"
        }, 
        {
            "location": "/technical-documentation/rest-get/#content-nodes", 
            "text": "The above setup shows that you can perform a GET request against a node at the  /node/{id}  endpoint. This is the same as the URL when viewed through a web browser. For example  http://localhost:8000/node/2  It also defines the  formats  you can access. In this example  json  and  jsonld  are available.   To access a resource in a specific format use the  _format=  argument which is appended to the end of the URI after a  ? .  To get the resource located at  http://localhost:8000/node/3  in JSON, you can go to  http://localhost:8000/node/3?_format=json .   For example:  You can do this in your web browser or with a command line client like cURL. (Note: response body here has been formatted, yours will look different)  vagrant@claw:~$ curl -i http://localhost:8000/node/3?_format=json\n\nHTTP/1.1 200 OK\nDate: Mon, 04 Mar 2019 21:53:50 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nLink:  http://localhost:8000/node/3 ; rel= canonical \nLink:  http://localhost:8000/node/3/delete ; rel= https://drupal.org/link-relations/delete-form \nLink:  http://localhost:8000/admin/content/node/delete?node=3 ; rel= https://drupal.org/link-relations/delete-multiple-form \nLink:  http://localhost:8000/node/3/edit ; rel= edit-form \nLink:  http://localhost:8000/node/3/revisions ; rel= version-history \nLink:  http://localhost:8000/node/3 ; rel= https://drupal.org/link-relations/revision \nLink:  http://localhost:8000/node?node=3 ; rel= https://drupal.org/link-relations/create \nLink:  http://purl.org/coar/resource_type/c_c513 ; rel= tag ; title= Image \nLink:  http://localhost:8000/media/1 ; rel= related ; title= Original File \nLink:  http://localhost:8000/media/2 ; rel= related ; title= Service File \nLink:  http://localhost:8000/media/3 ; rel= related ; title= Thumbnail Image \nLink:  http://localhost:8000/node/3?_format=jsonld ; rel= alternate ; type= application/ld+json \nX-Drupal-Dynamic-Cache: MISS\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nX-Drupal-Cache: MISS\nContent-Length: 1521\nContent-Type: application/json\n\n{\n   nid : [\n    {\n       value : 1\n    }\n  ],\n   uuid : [\n    {\n       value :  8322e36e-f8ec-4fd9-919d-52aed7b17a52 \n    }\n  ],\n   vid : [\n    {\n       value : 1\n    }\n  ],\n   langcode : [\n    {\n       value :  en \n    }\n  ],\n   type : [\n    {\n       target_id :  islandora_object ,\n       target_type :  node_type ,\n       target_uuid :  62189bec-3ef3-4196-b847-b17e5ce61fd5 \n    }\n  ],\n   revision_timestamp : [\n    {\n       value :  2019-03-01T19:43:12+00:00 ,\n       format :  Y-m-d\\\\TH:i:sP \n    }\n  ],\n   revision_uid : [\n    {\n       target_id : 1,\n       target_type :  user ,\n       target_uuid :  46a47057-de2d-4ce2-87ae-dbe4551209b8 ,\n       url :  \\\\/user\\\\/1 \n    }\n  ],\n   revision_log : [],\n   status : [\n    {\n       value : true\n    }\n  ],\n   title : [\n    {\n       value :  Custom item \n    }\n  ],\n   uid : [\n    {\n       target_id : 1,\n       target_type :  user ,\n       target_uuid :  46a47057-de2d-4ce2-87ae-dbe4551209b8 ,\n       url :  \\\\/user\\\\/1 \n    }\n  ],\n   created : [\n    {\n       value :  2019-03-01T19:42:54+00:00 ,\n       format :  Y-m-d\\\\TH:i:sP \n    }\n  ],\n   changed : [\n    {\n       value :  2019-03-01T19:43:12+00:00 ,\n       format :  Y-m-d\\\\TH:i:sP \n    }\n  ],\n   promote : [\n    {\n       value : true\n    }\n  ],\n   sticky : [\n    {\n       value : false\n    }\n  ],\n   default_langcode : [\n    {\n       value : true\n    }\n  ],\n   revision_translation_affected : [\n    {\n       value : true\n    }\n  ],\n   content_translation_source : [\n    {\n       value :  und \n    }\n  ],\n   content_translation_outdated : [\n    {\n       value : false\n    }\n  ],\n   field_alternative_title : [],\n   field_description : [],\n   field_display_hints : [],\n   field_edtf_date : [],\n   field_edtf_date_created : [],\n   field_edtf_date_issued : [],\n   field_extent : [\n    {\n       value :  1 item \n    }\n  ],\n   field_identifier : [],\n   field_linked_agent : [],\n   field_member_of : [],\n   field_model : [\n    {\n       target_id : 24,\n       target_type :  taxonomy_term ,\n       target_uuid :  e7560b68-e95a-4e76-9671-2a3041cd9800 ,\n       url :  \\\\/taxonomy\\\\/term\\\\/24 \n    }\n  ],\n   field_pid : [],\n   field_resource_type : [],\n   field_rights : [],\n   field_subject : []\n}", 
            "title": "Content (Nodes)"
        }, 
        {
            "location": "/technical-documentation/rest-get/#media", 
            "text": "The above steps are the same for media, it is just the URI that has changed.   For media you use  /media/{id}   For example:   curl -u admin:islandora http://localhost:8000/media/2?_format=json\n\n{\n   mid : [\n    {\n       value : 2\n    }\n  ],\n   uuid : [\n    {\n       value :  e75e609d-510c-4764-9280-665bb7026161 \n    }\n  ],\n   vid : [\n    {\n       value : 2\n    }\n  ],\n   langcode : [\n    {\n       value :  en \n    }\n  ],\n   bundle : [\n    {\n       target_id :  image ,\n       target_type :  media_type ,\n       target_uuid :  3860e653-201b-4509-89dd-628c446d81cb \n    }\n  ],\n   revision_created : [\n    {\n       value :  2019-03-01T19:43:48+00:00 ,\n       format :  Y-m-d\\\\TH:i:sP \n    }\n  ],\n   revision_user : [],\n   revision_log_message : [],\n   status : [\n    {\n       value : true\n    }\n  ],\n   name : [\n    {\n       value :  1-Service File.jpg \n    }\n  ],\n   thumbnail : [\n    {\n       target_id : 3,\n       alt : null,\n       title : null,\n       width : 800,\n       height : 1333,\n       target_type :  file ,\n       target_uuid :  e97ad038-dcb3-4d81-aa91-c945b2fe092c ,\n       url :  http:\\\\/\\\\/localhost:8000\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg \n    }\n  ],\n   uid : [\n    {\n       target_id : 1,\n       target_type :  user ,\n       target_uuid :  46a47057-de2d-4ce2-87ae-dbe4551209b8 ,\n       url :  \\\\/user\\\\/1 \n    }\n  ],\n   created : [\n    {\n       value :  2019-03-01T19:43:48+00:00 ,\n       format :  Y-m-d\\\\TH:i:sP \n    }\n  ],\n   changed : [\n    {\n       value :  2019-03-01T19:43:48+00:00 ,\n       format :  Y-m-d\\\\TH:i:sP \n    }\n  ],\n   default_langcode : [\n    {\n       value : true\n    }\n  ],\n   revision_translation_affected : [\n    {\n       value : true\n    }\n  ],\n   content_translation_source : [\n    {\n       value :  und \n    }\n  ],\n   content_translation_outdated : [\n    {\n       value : false\n    }\n  ],\n   field_access_terms : [],\n   field_file_size : [\n    {\n       value : 166608\n    }\n  ],\n   field_height : [\n    {\n       value : 1333\n    }\n  ],\n   field_media_image : [\n    {\n       target_id : 3,\n       alt : null,\n       title : null,\n       width : 800,\n       height : 1333,\n       target_type :  file ,\n       target_uuid :  e97ad038-dcb3-4d81-aa91-c945b2fe092c ,\n       url :  http:\\\\/\\\\/localhost:8000\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg \n    }\n  ],\n   field_media_of : [\n    {\n       target_id : 1,\n       target_type :  node ,\n       target_uuid :  8322e36e-f8ec-4fd9-919d-52aed7b17a52 ,\n       url :  \\\\/node\\\\/1 \n    }\n  ],\n   field_media_use : [\n    {\n       target_id : 18,\n       target_type :  taxonomy_term ,\n       target_uuid :  e8c698a7-8c15-47c4-8567-1c27f8f0c19e ,\n       url :  \\\\/taxonomy\\\\/term\\\\/18 \n    }\n  ],\n   field_mime_type : [\n    {\n       value :  image\\\\/jpeg \n    }\n  ],\n   field_width : [\n    {\n       value : 800\n    }\n  ]\n}  field_media_of  indicates which node(s) the media is associated with. The node can be referenced using the value of the  target_id  key (in this example, 1) or the  target_uuid  key (8322e36e-f8ec-4fd9-919d-52aed7b17a52).", 
            "title": "Media"
        }, 
        {
            "location": "/technical-documentation/rest-get/#files", 
            "text": "Through the REST API you are accessing metadata about files, but not the actual binary object.   Based on the above configuration the path for a GET request is  /entity/file/{id}  The file ID refers to the integer counter and  not  the UUID of a file.  Through the UI you can go to the File listing at  http://localhost:8000/admin/content/files .  For the file you want to access, choose the  USED IN  link.   That URI has the format  http://localhost:8000/admin/content/files/usage/{file id}  Alternatively the file ID can be found by viewing the media metadata (above section). In the above example if you look through the response from a GET request to the  /media/{id}  you will find a section like:     field_media_image : [\n    {\n       target_id : 3,\n       alt : null,\n       title : null,\n       width : 800,\n       height : 1333,\n       target_type :  file ,\n       target_uuid :  e97ad038-dcb3-4d81-aa91-c945b2fe092c ,\n       url :  http:\\\\/\\\\/localhost:8000\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg \n    }\n  ],  Note : Depending on the \"type\" of file (image, video, audio, file) this field will have a different name.  This has both the  url  which is the URI to retrieve the binary content of the file as well as the  target_id  which is the file ID.  So we can retrieve the file with a GET request to the URI  http://localhost:8000/sites/default/files/2019-03/1-Service%20File.jpg .  But more importantly we can retrieve the file  metadata  by making a request to  http://localhost:8000/entity/file/3  with one of the allowed  formats   For example:   curl -i -X GET  http://localhost:8000/entity/file/3?_format=json \n\nHTTP/1.1 200 OK\nDate: Tue, 05 Mar 2019 16:52:06 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-Drupal-Dynamic-Cache: MISS\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nX-Drupal-Cache: HIT\nContent-Length: 634\nContent-Type: application/json\n\n{\n   fid : [\n    {\n       value : 3\n    }\n  ],\n   uuid : [\n    {\n       value :  e97ad038-dcb3-4d81-aa91-c945b2fe092c \n    }\n  ],\n   langcode : [\n    {\n       value :  en \n    }\n  ],\n   uid : [\n    {\n       target_id : 1,\n       target_type :  user ,\n       target_uuid :  46a47057-de2d-4ce2-87ae-dbe4551209b8 ,\n       url :  \\\\/user\\\\/1 \n    }\n  ],\n   filename : [\n    {\n       value :  1-Service File.jpg \n    }\n  ],\n   uri : [\n    {\n       value :  public:\\\\/\\\\/2019-03\\\\/1-Service File.jpg ,\n       url :  \\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg \n    }\n  ],\n   filemime : [\n    {\n       value :  image\\\\/jpeg \n    }\n  ],\n   filesize : [\n    {\n       value : 166608\n    }\n  ],\n   status : [\n    {\n       value : true\n    }\n  ],\n   created : [\n    {\n       value :  2019-03-01T19:43:48+00:00 ,\n       format :  Y-m-d\\\\TH:i:sP \n    }\n  ],\n   changed : [\n    {\n       value :  2019-03-01T19:43:48+00:00 ,\n       format :  Y-m-d\\\\TH:i:sP \n    }\n  ]\n}  The  uri: url:  is the path to your file, so for the above example of  \"url\": \"\\\\/sites\\\\/default\\\\/files\\\\/2019-03\\\\/1-Service%20File.jpg\" .  I can perform a  GET  against  my hostname /sites/default/files/2019-03/1-Service%20File.jpg  and get the contents of this file.", 
            "title": "Files"
        }, 
        {
            "location": "/technical-documentation/rest-create/", 
            "text": "Creating resources, media and files - POST/PUT Requests\n\n\n\n\nAuthorization\n\n\nContent\n\n\nFiles and Media\n\n\n\n\nAuthorization\n\n\nYou will need to use one of the configured authorization methods to create content, media and/or files.\n\n\nThese are defined under \nAuthorization\n on the overview.\n\n\nContent (Nodes)\n\n\n\n\nThe above setup shows that you can perform a POST request against a node at the \n/node\n endpoint with a body in the JSON format.\n\n\nTo create a node you need to provide two elements in your message body. The node type and any \nrequired\n field values.\n\n\nFor the islandora_demo included Repository Item these are:\n\n\n\n\nA type - this tells Drupal what content type we are creating\n\n\nA title - this is a required field of all nodes.\n\n\nA model - this is a required by Islandora to tell the type of object (ie. Image, Audio, Collection)\n\n\n\n\nA good way to make your first POST request is to perform a GET request against an existing node and erase all the extra content.\n\n\nYou can find more information about \nGET requests here\n\n\nAgain we are using the json format. \n\n\n For example \ncurl -X GET 'http://localhost:8000/node/3?_format=json\n\n\nLook for the \ntype\n element\n\n\ntype\n : [\n  {\n    \ntarget_id\n : \nislandora_object\n,\n    \ntarget_type\n : \nnode_type\n,\n    \ntarget_uuid\n : \n62189bec-3ef3-4196-b847-b17e5ce61fd5\n\n  }\n]\n\n\n\n\nIn our example \"islandora_object\" is the type of the default \"Repository Item\", if you have created a new type you will have a different target_id.\n\n\nYou will not need the \ntarget_uuid\n.\n\n\nNext look for the \ntitle\n element\n\n\ntitle\n : [\n  {\n    \nvalue\n : \nAn example Islandora object\n\n  }\n]\n\n\n\n\nLastly look for the \nfield_model\n element\n\n\nfield_model\n: [\n  {\n    \ntarget_id\n: 24,\n    \ntarget_type\n: \ntaxonomy_term\n,\n    \ntarget_uuid\n: \ne7560b68-e95a-4e76-9671-2a3041cd9800\n,\n    \nurl\n: \n\\\\/taxonomy\\\\/term\\\\/24\n\n  }\n]\n\n\n\n\nYou can find the models by browsing the taxonomy terms available at \nhttp://localhost:8000/admin/structure/taxonomy/manage/islandora_models/overview\n\n\nIn my example installation 24 is an \"Image\", but let's create a collection which is 23.\n\n\nNote\n: Taxonomy terms may vary between instances and you should verify the correct number for your installation.\n\n\nSo the body of the request will be:\n\n\n{\n  \ntype\n: [\n    {\n      \ntarget_id\n: \nislandora_object\n,\n      \ntarget_type\n: \nnode_type\n\n    }\n  ],\n  \ntitle\n: [\n    {\n      \nvalue\n: \nCreated a collection with POST\n\n    }\n  ],\n  \nfield_model\n: [\n    {\n      \ntarget_id\n: 23,\n      \ntarget_type\n: \ntaxonomy_term\n\n    }\n  ]\n}\n\n\n\n\nNote\n: You \nmust\n include an \nappropriate\n Content-type header for the format you're requesting\n\n\nOther Note\n: You \nmust\n include some authentication credentials to say who you are and so Drupal can check if you are allowed to create this object. Otherwise you will receive a \n401 Unauthorized\n response. \n\n\nIf you do provide credentials but don't have permission, you will recieve a \n403 Forbidden\n response.\n\n\nYou can find more information about \nAuthorization here\n\n\n For example:\n\n\ncurl -i -X POST -u admin:islandora -H\nContent-type: application/json\n --data '{\ntype\n:[{\ntarget_id\n:\nislandora_object\n,\ntarget_type\n:\nnode_type\n}],\ntitle\n:[{\nvalue\n:\nCreated a collection with POST\n}],\nfield_model\n:[{\ntarget_id\n:23,\ntarget_type\n:\ntaxonomy_term\n}]}' 'http://localhost:8000/node?_format=json'\n\nHTTP/1.1 201 Created\nDate: Tue, 05 Mar 2019 18:07:00 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nLocation: http://localhost:8000/node/3\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 1564\nContent-Type: application/json\n\n{\nnid\n:[{\nvalue\n:3}],\nuuid\n:[{\nvalue\n:\n3f618cdc-3f2a-4e77-b932-9ff1d461a57a\n}],\nvid\n:[{\nvalue\n:3}],\nlangcode\n:[{\nvalue\n:\nen\n}],\ntype\n:[{\ntarget_id\n:\nislandora_object\n,\ntarget_type\n:\nnode_type\n,\ntarget_uuid\n:\n62189bec-3ef3-4196-b847-b17e5ce61fd5\n}],\nrevision_timestamp\n:[{\nvalue\n:\n2019-03-05T18:07:00+00:00\n,\nformat\n:\nY-m-d\\\\TH:i:sP\n}],\nrevision_uid\n:[{\ntarget_id\n:1,\ntarget_type\n:\nuser\n,\ntarget_uuid\n:\n46a47057-de2d-4ce2-87ae-dbe4551209b8\n,\nurl\n:\n\\/user\\/1\n}],\nrevision_log\n:[],\nstatus\n:[{\nvalue\n:true}],\ntitle\n:[{\nvalue\n:\nCreated a collection with POST\n}],\nuid\n:[{\ntarget_id\n:1,\ntarget_type\n:\nuser\n,\ntarget_uuid\n:\n46a47057-de2d-4ce2-87ae-dbe4551209b8\n,\nurl\n:\n\\/user\\/1\n}],\ncreated\n:[{\nvalue\n:\n2019-03-05T18:07:00+00:00\n,\nformat\n:\nY-m-d\\\\TH:i:sP\n}],\nchanged\n:[{\nvalue\n:\n2019-03-05T18:07:00+00:00\n,\nformat\n:\nY-m-d\\\\TH:i:sP\n}],\npromote\n:[{\nvalue\n:true}],\nsticky\n:[{\nvalue\n:false}],\ndefault_langcode\n:[{\nvalue\n:true}],\nrevision_translation_affected\n:[{\nvalue\n:true}],\ncontent_translation_source\n:[{\nvalue\n:\nund\n}],\ncontent_translation_outdated\n:[{\nvalue\n:false}],\nfield_access_terms\n:[],\nfield_alternative_title\n:[],\nfield_description\n:[],\nfield_display_hints\n:[],\nfield_edtf_date\n:[],\nfield_edtf_date_created\n:[],\nfield_edtf_date_issued\n:[],\nfield_extent\n:[{\nvalue\n:\n1 item\n}],\nfield_identifier\n:[],\nfield_linked_agent\n:[],\nfield_member_of\n:[],\nfield_model\n:[{\ntarget_id\n:23,\ntarget_type\n:\ntaxonomy_term\n,\ntarget_uuid\n:\n6a3b293d-4617-417b-99d2-23d75b57f7c2\n,\nurl\n:\n\\/taxonomy\\/term\\/23\n}],\nfield_pid\n:[],\nfield_resource_type\n:[],\nfield_rights\n:[],\nfield_subject\n:[]}\n\n\n\n\nThe parts of the above request are:\n\n\n\n\n-i\n - return the response headers \n\n\n-X POST\n - send a POST request\n\n\n-u admin:islandora\n - use these basic authentication credentials\n\n\n-H\"Content-type: application/json\"\n - send the content-type header\n\n\n--data {...}\n - send the request body (seen above)\n\n\n'http://localhost:8000/node?_format=json'\n - the endpoint of the request\n\n\n\n\nFiles and Media\n\n\nDrupal is supposed to have a way to upload files, but this seems to require the use of an X-CSRF-Token, which can only be retrieved using Cookie authentication and even then does not allow you to upload.\n\n\nConsequently there is a REST endpoint not listed in the REST UI, because it is not configurable and is part of the Islandora 8 system.\n\n\nThis endpoint is available at \nhttp://localhost:8000/node/{node id}/media/{media type}/{media use}\n\n\nIt only accepts PUT requests. If the media and file don't exist they are created, if they exist the file is updated with the new body.\n\n\nThe node and taxonomy term are used to search (via an \nentity query\n) for a media. If this media exists the body of the file is replaced with the new content, otherwise a new file is created to hold the contents.\n\n\nThe tokens to this URI are as follows:\n\n\n\n\nnode id : The numeric ID of the node you wish to link this media/file to.\n\n\nmedia type : The media type name you wish to create (ie. image, file, audio)\n\n\nmedia use : The numeric ID of the media use taxonomy term to set for this media \n\n\n\n\nYou can find the media use taxonomy terms at \nhttp://localhost:8000/admin/structure/taxonomy/manage/islandora_media_use/overview\n\n\nSo the body of the request is the actual binary file to upload.\n\n\n For example: \n\n\nWith a local file called \nmy-image.png\n that I wanted to link to a node with ID \n3\n.\n\n\nI am using the taxonomy term \"Original file\", which on my machine is \n16\n\n\n curl -i -X PUT -u admin:islandora -H\nContent-type: image/png\n --data-binary \n@my-image.png\n -H\nContent-Location: public://images/my-image.png\n 'http://localhost:8000/node/3/media/image/16'\n\nHTTP/1.1 100 Continue\n\nHTTP/1.1 201 Created\nDate: Tue, 05 Mar 2019 22:01:39 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nLocation: http://localhost:8000/media/4\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 0\nContent-Type: text/html; charset=UTF-8\n\n\n\n\nThe parts of the above request are:\n\n\n\n\n-i\n - return the response headers \n\n\n-X PUT\n - send a PUT request\n\n\n-u admin:islandora\n - use these basic authentication credentials\n\n\n-H\"Content-type: image/png\"\n - send the content-type header\n\n\n--data-binary \"@my-image.png\"\n - send the contents of the file located at my-image.png as binary\n\n\n-H\"Content-Location: public://images/my-image.png\"\n - store the file in the public scheme (ie. in Drupal) at the path \nimages/my-image.png\n, to store the file in Fedora use the \nfedora//\n scheme (ie. fedora://images/my-image.png)\n\n\n'http://localhost:8000/node/3/media/image/16'\n - the endpoint of the request specifying the node, media type and taxonomy term.", 
            "title": "POST/PUT"
        }, 
        {
            "location": "/technical-documentation/rest-create/#creating-resources-media-and-files-postput-requests", 
            "text": "Authorization  Content  Files and Media", 
            "title": "Creating resources, media and files - POST/PUT Requests"
        }, 
        {
            "location": "/technical-documentation/rest-create/#authorization", 
            "text": "You will need to use one of the configured authorization methods to create content, media and/or files.  These are defined under  Authorization  on the overview.", 
            "title": "Authorization"
        }, 
        {
            "location": "/technical-documentation/rest-create/#content-nodes", 
            "text": "The above setup shows that you can perform a POST request against a node at the  /node  endpoint with a body in the JSON format.  To create a node you need to provide two elements in your message body. The node type and any  required  field values.  For the islandora_demo included Repository Item these are:   A type - this tells Drupal what content type we are creating  A title - this is a required field of all nodes.  A model - this is a required by Islandora to tell the type of object (ie. Image, Audio, Collection)   A good way to make your first POST request is to perform a GET request against an existing node and erase all the extra content.  You can find more information about  GET requests here  Again we are using the json format.    For example  curl -X GET 'http://localhost:8000/node/3?_format=json  Look for the  type  element  type  : [\n  {\n     target_id  :  islandora_object ,\n     target_type  :  node_type ,\n     target_uuid  :  62189bec-3ef3-4196-b847-b17e5ce61fd5 \n  }\n]  In our example \"islandora_object\" is the type of the default \"Repository Item\", if you have created a new type you will have a different target_id.  You will not need the  target_uuid .  Next look for the  title  element  title  : [\n  {\n     value  :  An example Islandora object \n  }\n]  Lastly look for the  field_model  element  field_model : [\n  {\n     target_id : 24,\n     target_type :  taxonomy_term ,\n     target_uuid :  e7560b68-e95a-4e76-9671-2a3041cd9800 ,\n     url :  \\\\/taxonomy\\\\/term\\\\/24 \n  }\n]  You can find the models by browsing the taxonomy terms available at  http://localhost:8000/admin/structure/taxonomy/manage/islandora_models/overview  In my example installation 24 is an \"Image\", but let's create a collection which is 23.  Note : Taxonomy terms may vary between instances and you should verify the correct number for your installation.  So the body of the request will be:  {\n   type : [\n    {\n       target_id :  islandora_object ,\n       target_type :  node_type \n    }\n  ],\n   title : [\n    {\n       value :  Created a collection with POST \n    }\n  ],\n   field_model : [\n    {\n       target_id : 23,\n       target_type :  taxonomy_term \n    }\n  ]\n}  Note : You  must  include an  appropriate  Content-type header for the format you're requesting  Other Note : You  must  include some authentication credentials to say who you are and so Drupal can check if you are allowed to create this object. Otherwise you will receive a  401 Unauthorized  response.   If you do provide credentials but don't have permission, you will recieve a  403 Forbidden  response.  You can find more information about  Authorization here   For example:  curl -i -X POST -u admin:islandora -H Content-type: application/json  --data '{ type :[{ target_id : islandora_object , target_type : node_type }], title :[{ value : Created a collection with POST }], field_model :[{ target_id :23, target_type : taxonomy_term }]}' 'http://localhost:8000/node?_format=json'\n\nHTTP/1.1 201 Created\nDate: Tue, 05 Mar 2019 18:07:00 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nLocation: http://localhost:8000/node/3\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 1564\nContent-Type: application/json\n\n{ nid :[{ value :3}], uuid :[{ value : 3f618cdc-3f2a-4e77-b932-9ff1d461a57a }], vid :[{ value :3}], langcode :[{ value : en }], type :[{ target_id : islandora_object , target_type : node_type , target_uuid : 62189bec-3ef3-4196-b847-b17e5ce61fd5 }], revision_timestamp :[{ value : 2019-03-05T18:07:00+00:00 , format : Y-m-d\\\\TH:i:sP }], revision_uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], revision_log :[], status :[{ value :true}], title :[{ value : Created a collection with POST }], uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], created :[{ value : 2019-03-05T18:07:00+00:00 , format : Y-m-d\\\\TH:i:sP }], changed :[{ value : 2019-03-05T18:07:00+00:00 , format : Y-m-d\\\\TH:i:sP }], promote :[{ value :true}], sticky :[{ value :false}], default_langcode :[{ value :true}], revision_translation_affected :[{ value :true}], content_translation_source :[{ value : und }], content_translation_outdated :[{ value :false}], field_access_terms :[], field_alternative_title :[], field_description :[], field_display_hints :[], field_edtf_date :[], field_edtf_date_created :[], field_edtf_date_issued :[], field_extent :[{ value : 1 item }], field_identifier :[], field_linked_agent :[], field_member_of :[], field_model :[{ target_id :23, target_type : taxonomy_term , target_uuid : 6a3b293d-4617-417b-99d2-23d75b57f7c2 , url : \\/taxonomy\\/term\\/23 }], field_pid :[], field_resource_type :[], field_rights :[], field_subject :[]}  The parts of the above request are:   -i  - return the response headers   -X POST  - send a POST request  -u admin:islandora  - use these basic authentication credentials  -H\"Content-type: application/json\"  - send the content-type header  --data {...}  - send the request body (seen above)  'http://localhost:8000/node?_format=json'  - the endpoint of the request", 
            "title": "Content (Nodes)"
        }, 
        {
            "location": "/technical-documentation/rest-create/#files-and-media", 
            "text": "Drupal is supposed to have a way to upload files, but this seems to require the use of an X-CSRF-Token, which can only be retrieved using Cookie authentication and even then does not allow you to upload.  Consequently there is a REST endpoint not listed in the REST UI, because it is not configurable and is part of the Islandora 8 system.  This endpoint is available at  http://localhost:8000/node/{node id}/media/{media type}/{media use}  It only accepts PUT requests. If the media and file don't exist they are created, if they exist the file is updated with the new body.  The node and taxonomy term are used to search (via an  entity query ) for a media. If this media exists the body of the file is replaced with the new content, otherwise a new file is created to hold the contents.  The tokens to this URI are as follows:   node id : The numeric ID of the node you wish to link this media/file to.  media type : The media type name you wish to create (ie. image, file, audio)  media use : The numeric ID of the media use taxonomy term to set for this media    You can find the media use taxonomy terms at  http://localhost:8000/admin/structure/taxonomy/manage/islandora_media_use/overview  So the body of the request is the actual binary file to upload.   For example:   With a local file called  my-image.png  that I wanted to link to a node with ID  3 .  I am using the taxonomy term \"Original file\", which on my machine is  16   curl -i -X PUT -u admin:islandora -H Content-type: image/png  --data-binary  @my-image.png  -H Content-Location: public://images/my-image.png  'http://localhost:8000/node/3/media/image/16'\n\nHTTP/1.1 100 Continue\n\nHTTP/1.1 201 Created\nDate: Tue, 05 Mar 2019 22:01:39 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nLocation: http://localhost:8000/media/4\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 0\nContent-Type: text/html; charset=UTF-8  The parts of the above request are:   -i  - return the response headers   -X PUT  - send a PUT request  -u admin:islandora  - use these basic authentication credentials  -H\"Content-type: image/png\"  - send the content-type header  --data-binary \"@my-image.png\"  - send the contents of the file located at my-image.png as binary  -H\"Content-Location: public://images/my-image.png\"  - store the file in the public scheme (ie. in Drupal) at the path  images/my-image.png , to store the file in Fedora use the  fedora//  scheme (ie. fedora://images/my-image.png)  'http://localhost:8000/node/3/media/image/16'  - the endpoint of the request specifying the node, media type and taxonomy term.", 
            "title": "Files and Media"
        }, 
        {
            "location": "/technical-documentation/rest-patch/", 
            "text": "Updating resources - PATCH request\n\n\nPATCH requests allow you to update resources in place via a REST call. In this case you send a few required fields and then any changed fields. PATCH requests are available for nodes and media entities, but \nnot\n for files. PATCH requests are very consistent between node and media entities so we will just show one set of examples here.\n\n\nOur example node is at \nhttp://localhost:8000/node/3\n.\n\n\nIf you perform a \nGET\n against another node or media you can see all of the fields, some of these are calculated (change based on others, ie. \"changed\"), some are references to other entities (nodes, media, files in Drupal. ie. \"field_model\") and others are pure text fields (ie. \"title\").\n\n\nThe fields will be different between different node types and media types, but the syntax to update them is the same.\n\n\n\n\nAuthorization\n\n\nChange a text field\n\n\nChange an entity reference\n\n\n\n\nAuthorization\n\n\nIf you have restricted access to view your content, you will need to use one of the configured authorization methods to access your content, media and/or files.\n\n\nThese are defined under \nAuthorization\n on the overview.\n\n\nThis with assume you have already created a \nnode\n or \nmedia\n at some location.\n\n\nChange a text field\n\n\nTo change the title of a node, you need to supply the new title and the node_type. The node_type is required as this defines what fields are available to the node.\n\n\nA successful PATCH request will return a 200 status code and the body will contain the newly updated body.\n\n\ncurl -i -u admin:islandora -H\nContent-type: application/json\n -X PATCH -d '{ \ntype\n: [{\ntarget_id\n: \nislandora_object\n}], \ntitle\n: [{\nvalue\n:\nUpdated with a PATCH request\n}]}' 'http://localhost:8000/node/3?_format=json'\n\nHTTP/1.1 200 OK\nDate: Mon, 11 Mar 2019 17:01:23 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 1562\nContent-Type: application/json\n\n{\nnid\n:[{\nvalue\n:3}],\nuuid\n:[{\nvalue\n:\n3f618cdc-3f2a-4e77-b932-9ff1d461a57a\n}],\nvid\n:[{\nvalue\n:3}],\nlangcode\n:[{\nvalue\n:\nen\n}],\ntype\n:[{\ntarget_id\n:\nislandora_object\n,\ntarget_type\n:\nnode_type\n,\ntarget_uuid\n:\n62189bec-3ef3-4196-b847-b17e5ce61fd5\n}],\nrevision_timestamp\n:[{\nvalue\n:\n2019-03-05T18:07:00+00:00\n,\nformat\n:\nY-m-d\\\\TH:i:sP\n}],\nrevision_uid\n:[{\ntarget_id\n:1,\ntarget_type\n:\nuser\n,\ntarget_uuid\n:\n46a47057-de2d-4ce2-87ae-dbe4551209b8\n,\nurl\n:\n\\/user\\/1\n}],\nrevision_log\n:[],\nstatus\n:[{\nvalue\n:true}],\ntitle\n:[{\nvalue\n:\nUpdated with a PATCH request\n}],\nuid\n:[{\ntarget_id\n:1,\ntarget_type\n:\nuser\n,\ntarget_uuid\n:\n46a47057-de2d-4ce2-87ae-dbe4551209b8\n,\nurl\n:\n\\/user\\/1\n}],\ncreated\n:[{\nvalue\n:\n2019-03-05T18:07:00+00:00\n,\nformat\n:\nY-m-d\\\\TH:i:sP\n}],\nchanged\n:[{\nvalue\n:\n2019-03-11T17:01:23+00:00\n,\nformat\n:\nY-m-d\\\\TH:i:sP\n}],\npromote\n:[{\nvalue\n:true}],\nsticky\n:[{\nvalue\n:false}],\ndefault_langcode\n:[{\nvalue\n:true}],\nrevision_translation_affected\n:[{\nvalue\n:true}],\ncontent_translation_source\n:[{\nvalue\n:\nund\n}],\ncontent_translation_outdated\n:[{\nvalue\n:false}],\nfield_access_terms\n:[],\nfield_alternative_title\n:[],\nfield_description\n:[],\nfield_display_hints\n:[],\nfield_edtf_date\n:[],\nfield_edtf_date_created\n:[],\nfield_edtf_date_issued\n:[],\nfield_extent\n:[{\nvalue\n:\n1 item\n}],\nfield_identifier\n:[],\nfield_linked_agent\n:[],\nfield_member_of\n:[],\nfield_model\n:[{\ntarget_id\n:23,\ntarget_type\n:\ntaxonomy_term\n,\ntarget_uuid\n:\n6a3b293d-4617-417b-99d2-23d75b57f7c2\n,\nurl\n:\n\\/taxonomy\\/term\\/23\n}],\nfield_pid\n:[],\nfield_resource_type\n:[],\nfield_rights\n:[],\nfield_subject\n:[]}\n\n\n\n\nChange an entity reference field\n\n\nThis example is how to change a field that references some other entity. For this example we will use the \nfield_model\n field, this is a reference to the taxonomy term that holds the \"model\" of the resource (ie. Image, Collection, Audio, Video, etc)\n\n\nOn our example installation taxonomy term 22 is \"Binary\", so to change a node from what it was to a Binary you would do.\n\n\n curl -i -u admin:islandora -H\nContent-type: application/json\n -X PATCH -d '{ \ntype\n: [{\ntarget_id\n: \nislandora_object\n}], \nfield_model\n: [{\ntarget_id\n: 22, \ntarget_type\n: \ntaxonomy_term\n}]}' 'http://localhost:8000/node/3?_format=json'\n\nHTTP/1.1 200 OK\nDate: Mon, 11 Mar 2019 17:51:47 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 1562\nContent-Type: application/json\n\n{\nnid\n:[{\nvalue\n:3}],\nuuid\n:[{\nvalue\n:\n3f618cdc-3f2a-4e77-b932-9ff1d461a57a\n}],\nvid\n:[{\nvalue\n:4}],\nlangcode\n:[{\nvalue\n:\nen\n}],\ntype\n:[{\ntarget_id\n:\nislandora_object\n,\ntarget_type\n:\nnode_type\n,\ntarget_uuid\n:\n62189bec-3ef3-4196-b847-b17e5ce61fd5\n}],\nrevision_timestamp\n:[{\nvalue\n:\n2019-03-11T17:36:10+00:00\n,\nformat\n:\nY-m-d\\\\TH:i:sP\n}],\nrevision_uid\n:[{\ntarget_id\n:1,\ntarget_type\n:\nuser\n,\ntarget_uuid\n:\n46a47057-de2d-4ce2-87ae-dbe4551209b8\n,\nurl\n:\n\\/user\\/1\n}],\nrevision_log\n:[],\nstatus\n:[{\nvalue\n:true}],\ntitle\n:[{\nvalue\n:\nUpdated with a PATCH request\n}],\nuid\n:[{\ntarget_id\n:1,\ntarget_type\n:\nuser\n,\ntarget_uuid\n:\n46a47057-de2d-4ce2-87ae-dbe4551209b8\n,\nurl\n:\n\\/user\\/1\n}],\ncreated\n:[{\nvalue\n:\n2019-03-05T18:07:00+00:00\n,\nformat\n:\nY-m-d\\\\TH:i:sP\n}],\nchanged\n:[{\nvalue\n:\n2019-03-11T17:51:47+00:00\n,\nformat\n:\nY-m-d\\\\TH:i:sP\n}],\npromote\n:[{\nvalue\n:true}],\nsticky\n:[{\nvalue\n:false}],\ndefault_langcode\n:[{\nvalue\n:true}],\nrevision_translation_affected\n:[{\nvalue\n:true}],\ncontent_translation_source\n:[{\nvalue\n:\nund\n}],\ncontent_translation_outdated\n:[{\nvalue\n:false}],\nfield_access_terms\n:[],\nfield_alternative_title\n:[],\nfield_description\n:[],\nfield_display_hints\n:[],\nfield_edtf_date\n:[],\nfield_edtf_date_created\n:[],\nfield_edtf_date_issued\n:[],\nfield_extent\n:[{\nvalue\n:\n1 item\n}],\nfield_identifier\n:[],\nfield_linked_agent\n:[],\nfield_member_of\n:[],\nfield_model\n:[{\ntarget_id\n:22,\ntarget_type\n:\ntaxonomy_term\n,\ntarget_uuid\n:\ne1f167e1-124d-4db4-96ab-30641ca4e21b\n,\nurl\n:\n\\/taxonomy\\/term\\/22\n}],\nfield_pid\n:[],\nfield_resource_type\n:[],\nfield_rights\n:[],\nfield_subject\n:[]}\n\n\n\n\nTo patch an object and make it part of a collection, you need the id number of the collection object. In this example node 2 will be our collection.\n\n\ntarget_type\n can be a confusing one, if you are ever unsure have a look at the returned values for an existing object.\n\n\n curl -i -u admin:islandora -H\nContent-type: application/json\n -X PATCH -d '{ \ntype\n: [{\ntarget_id\n: \nislandora_object\n}], \nfield_member_of\n: [{\ntarget_id\n: 2, \ntarget_type\n: \nnode_type\n}]}' 'http://localhost:8000/node/3?_format=json'\n\nHTTP/1.1 200 OK\nDate: Mon, 11 Mar 2019 18:01:40 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 1669\nContent-Type: application/json\n\n{\nnid\n:[{\nvalue\n:3}],\nuuid\n:[{\nvalue\n:\n3f618cdc-3f2a-4e77-b932-9ff1d461a57a\n}],\nvid\n:[{\nvalue\n:4}],\nlangcode\n:[{\nvalue\n:\nen\n}],\ntype\n:[{\ntarget_id\n:\nislandora_object\n,\ntarget_type\n:\nnode_type\n,\ntarget_uuid\n:\n62189bec-3ef3-4196-b847-b17e5ce61fd5\n}],\nrevision_timestamp\n:[{\nvalue\n:\n2019-03-11T17:36:10+00:00\n,\nformat\n:\nY-m-d\\\\TH:i:sP\n}],\nrevision_uid\n:[{\ntarget_id\n:1,\ntarget_type\n:\nuser\n,\ntarget_uuid\n:\n46a47057-de2d-4ce2-87ae-dbe4551209b8\n,\nurl\n:\n\\/user\\/1\n}],\nrevision_log\n:[],\nstatus\n:[{\nvalue\n:true}],\ntitle\n:[{\nvalue\n:\nUpdated with a PATCH request\n}],\nuid\n:[{\ntarget_id\n:1,\ntarget_type\n:\nuser\n,\ntarget_uuid\n:\n46a47057-de2d-4ce2-87ae-dbe4551209b8\n,\nurl\n:\n\\/user\\/1\n}],\ncreated\n:[{\nvalue\n:\n2019-03-05T18:07:00+00:00\n,\nformat\n:\nY-m-d\\\\TH:i:sP\n}],\nchanged\n:[{\nvalue\n:\n2019-03-11T18:01:40+00:00\n,\nformat\n:\nY-m-d\\\\TH:i:sP\n}],\npromote\n:[{\nvalue\n:true}],\nsticky\n:[{\nvalue\n:false}],\ndefault_langcode\n:[{\nvalue\n:true}],\nrevision_translation_affected\n:[{\nvalue\n:true}],\ncontent_translation_source\n:[{\nvalue\n:\nund\n}],\ncontent_translation_outdated\n:[{\nvalue\n:false}],\nfield_access_terms\n:[],\nfield_alternative_title\n:[],\nfield_description\n:[],\nfield_display_hints\n:[],\nfield_edtf_date\n:[],\nfield_edtf_date_created\n:[],\nfield_edtf_date_issued\n:[],\nfield_extent\n:[{\nvalue\n:\n1 item\n}],\nfield_identifier\n:[],\nfield_linked_agent\n:[],\nfield_member_of\n:[{\ntarget_id\n:2,\ntarget_type\n:\nnode\n,\ntarget_uuid\n:\n413135a6-0bd1-4d6b-8bcb-059cf7784d83\n,\nurl\n:\n\\/node\\/2\n}],\nfield_model\n:[{\ntarget_id\n:22,\ntarget_type\n:\ntaxonomy_term\n,\ntarget_uuid\n:\ne1f167e1-124d-4db4-96ab-30641ca4e21b\n,\nurl\n:\n\\/taxonomy\\/term\\/22\n}],\nfield_pid\n:[],\nfield_resource_type\n:[],\nfield_rights\n:[],\nfield_subject\n:[]}", 
            "title": "PATCH"
        }, 
        {
            "location": "/technical-documentation/rest-patch/#updating-resources-patch-request", 
            "text": "PATCH requests allow you to update resources in place via a REST call. In this case you send a few required fields and then any changed fields. PATCH requests are available for nodes and media entities, but  not  for files. PATCH requests are very consistent between node and media entities so we will just show one set of examples here.  Our example node is at  http://localhost:8000/node/3 .  If you perform a  GET  against another node or media you can see all of the fields, some of these are calculated (change based on others, ie. \"changed\"), some are references to other entities (nodes, media, files in Drupal. ie. \"field_model\") and others are pure text fields (ie. \"title\").  The fields will be different between different node types and media types, but the syntax to update them is the same.   Authorization  Change a text field  Change an entity reference", 
            "title": "Updating resources - PATCH request"
        }, 
        {
            "location": "/technical-documentation/rest-patch/#authorization", 
            "text": "If you have restricted access to view your content, you will need to use one of the configured authorization methods to access your content, media and/or files.  These are defined under  Authorization  on the overview.  This with assume you have already created a  node  or  media  at some location.", 
            "title": "Authorization"
        }, 
        {
            "location": "/technical-documentation/rest-patch/#change-a-text-field", 
            "text": "To change the title of a node, you need to supply the new title and the node_type. The node_type is required as this defines what fields are available to the node.  A successful PATCH request will return a 200 status code and the body will contain the newly updated body.  curl -i -u admin:islandora -H Content-type: application/json  -X PATCH -d '{  type : [{ target_id :  islandora_object }],  title : [{ value : Updated with a PATCH request }]}' 'http://localhost:8000/node/3?_format=json'\n\nHTTP/1.1 200 OK\nDate: Mon, 11 Mar 2019 17:01:23 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 1562\nContent-Type: application/json\n\n{ nid :[{ value :3}], uuid :[{ value : 3f618cdc-3f2a-4e77-b932-9ff1d461a57a }], vid :[{ value :3}], langcode :[{ value : en }], type :[{ target_id : islandora_object , target_type : node_type , target_uuid : 62189bec-3ef3-4196-b847-b17e5ce61fd5 }], revision_timestamp :[{ value : 2019-03-05T18:07:00+00:00 , format : Y-m-d\\\\TH:i:sP }], revision_uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], revision_log :[], status :[{ value :true}], title :[{ value : Updated with a PATCH request }], uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], created :[{ value : 2019-03-05T18:07:00+00:00 , format : Y-m-d\\\\TH:i:sP }], changed :[{ value : 2019-03-11T17:01:23+00:00 , format : Y-m-d\\\\TH:i:sP }], promote :[{ value :true}], sticky :[{ value :false}], default_langcode :[{ value :true}], revision_translation_affected :[{ value :true}], content_translation_source :[{ value : und }], content_translation_outdated :[{ value :false}], field_access_terms :[], field_alternative_title :[], field_description :[], field_display_hints :[], field_edtf_date :[], field_edtf_date_created :[], field_edtf_date_issued :[], field_extent :[{ value : 1 item }], field_identifier :[], field_linked_agent :[], field_member_of :[], field_model :[{ target_id :23, target_type : taxonomy_term , target_uuid : 6a3b293d-4617-417b-99d2-23d75b57f7c2 , url : \\/taxonomy\\/term\\/23 }], field_pid :[], field_resource_type :[], field_rights :[], field_subject :[]}", 
            "title": "Change a text field"
        }, 
        {
            "location": "/technical-documentation/rest-patch/#change-an-entity-reference-field", 
            "text": "This example is how to change a field that references some other entity. For this example we will use the  field_model  field, this is a reference to the taxonomy term that holds the \"model\" of the resource (ie. Image, Collection, Audio, Video, etc)  On our example installation taxonomy term 22 is \"Binary\", so to change a node from what it was to a Binary you would do.   curl -i -u admin:islandora -H Content-type: application/json  -X PATCH -d '{  type : [{ target_id :  islandora_object }],  field_model : [{ target_id : 22,  target_type :  taxonomy_term }]}' 'http://localhost:8000/node/3?_format=json'\n\nHTTP/1.1 200 OK\nDate: Mon, 11 Mar 2019 17:51:47 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 1562\nContent-Type: application/json\n\n{ nid :[{ value :3}], uuid :[{ value : 3f618cdc-3f2a-4e77-b932-9ff1d461a57a }], vid :[{ value :4}], langcode :[{ value : en }], type :[{ target_id : islandora_object , target_type : node_type , target_uuid : 62189bec-3ef3-4196-b847-b17e5ce61fd5 }], revision_timestamp :[{ value : 2019-03-11T17:36:10+00:00 , format : Y-m-d\\\\TH:i:sP }], revision_uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], revision_log :[], status :[{ value :true}], title :[{ value : Updated with a PATCH request }], uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], created :[{ value : 2019-03-05T18:07:00+00:00 , format : Y-m-d\\\\TH:i:sP }], changed :[{ value : 2019-03-11T17:51:47+00:00 , format : Y-m-d\\\\TH:i:sP }], promote :[{ value :true}], sticky :[{ value :false}], default_langcode :[{ value :true}], revision_translation_affected :[{ value :true}], content_translation_source :[{ value : und }], content_translation_outdated :[{ value :false}], field_access_terms :[], field_alternative_title :[], field_description :[], field_display_hints :[], field_edtf_date :[], field_edtf_date_created :[], field_edtf_date_issued :[], field_extent :[{ value : 1 item }], field_identifier :[], field_linked_agent :[], field_member_of :[], field_model :[{ target_id :22, target_type : taxonomy_term , target_uuid : e1f167e1-124d-4db4-96ab-30641ca4e21b , url : \\/taxonomy\\/term\\/22 }], field_pid :[], field_resource_type :[], field_rights :[], field_subject :[]}  To patch an object and make it part of a collection, you need the id number of the collection object. In this example node 2 will be our collection.  target_type  can be a confusing one, if you are ever unsure have a look at the returned values for an existing object.   curl -i -u admin:islandora -H Content-type: application/json  -X PATCH -d '{  type : [{ target_id :  islandora_object }],  field_member_of : [{ target_id : 2,  target_type :  node_type }]}' 'http://localhost:8000/node/3?_format=json'\n\nHTTP/1.1 200 OK\nDate: Mon, 11 Mar 2019 18:01:40 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 1669\nContent-Type: application/json\n\n{ nid :[{ value :3}], uuid :[{ value : 3f618cdc-3f2a-4e77-b932-9ff1d461a57a }], vid :[{ value :4}], langcode :[{ value : en }], type :[{ target_id : islandora_object , target_type : node_type , target_uuid : 62189bec-3ef3-4196-b847-b17e5ce61fd5 }], revision_timestamp :[{ value : 2019-03-11T17:36:10+00:00 , format : Y-m-d\\\\TH:i:sP }], revision_uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], revision_log :[], status :[{ value :true}], title :[{ value : Updated with a PATCH request }], uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], created :[{ value : 2019-03-05T18:07:00+00:00 , format : Y-m-d\\\\TH:i:sP }], changed :[{ value : 2019-03-11T18:01:40+00:00 , format : Y-m-d\\\\TH:i:sP }], promote :[{ value :true}], sticky :[{ value :false}], default_langcode :[{ value :true}], revision_translation_affected :[{ value :true}], content_translation_source :[{ value : und }], content_translation_outdated :[{ value :false}], field_access_terms :[], field_alternative_title :[], field_description :[], field_display_hints :[], field_edtf_date :[], field_edtf_date_created :[], field_edtf_date_issued :[], field_extent :[{ value : 1 item }], field_identifier :[], field_linked_agent :[], field_member_of :[{ target_id :2, target_type : node , target_uuid : 413135a6-0bd1-4d6b-8bcb-059cf7784d83 , url : \\/node\\/2 }], field_model :[{ target_id :22, target_type : taxonomy_term , target_uuid : e1f167e1-124d-4db4-96ab-30641ca4e21b , url : \\/taxonomy\\/term\\/22 }], field_pid :[], field_resource_type :[], field_rights :[], field_subject :[]}", 
            "title": "Change an entity reference field"
        }, 
        {
            "location": "/technical-documentation/rest-delete/", 
            "text": "Removing resources, media and files - DELETE Requests\n\n\nDeleting is as easy as \ngetting\n resources and more difficult than \ncreating\n resources.\n\n\nIf you can perform a GET request then you have the information required to perform a DELETE request.\n\n\nCheck out the examples below.\n\n\n\n\nAuthorization\n\n\nContent\n\n\nMedia\n\n\nFiles\n\n\n\n\nAuthorization\n\n\nIf you have restricted access to view your content, you will need to use one of the configured authorization methods to access your content, media and/or files.\n\n\nThese are defined under \nAuthorization\n on the overview.\n\n\nContent (Nodes)\n\n\nYou will need your \nnode id\n, you can find more information in the \nGET\n documentation.\n\n\nA delete is simply the same request as a \nGET\n but sending a \nDELETE\n http verb.\n\n\nOur example node has a \nnode id\n of 2\n\n\n curl -i -u admin:islandora -X GET 'http://localhost:8000/node/2?_format=json'\n\nHTTP/1.1 200 OK\nDate: Fri, 15 Mar 2019 15:02:00 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nLink: \nhttp://localhost:8000/node/2\n; rel=\ncanonical\n\nLink: \nhttp://localhost:8000/node/2/delete\n; rel=\nhttps://drupal.org/link-relations/delete-form\n\nLink: \nhttp://localhost:8000/admin/content/node/delete?node=2\n; rel=\nhttps://drupal.org/link-relations/delete-multiple-form\n\nLink: \nhttp://localhost:8000/node/2/edit\n; rel=\nedit-form\n\nLink: \nhttp://localhost:8000/node/2/revisions\n; rel=\nversion-history\n\nLink: \nhttp://localhost:8000/node/2\n; rel=\nhttps://drupal.org/link-relations/revision\n\nLink: \nhttp://localhost:8000/node?node=2\n; rel=\nhttps://drupal.org/link-relations/create\n\nLink: \nhttp://purl.org/dc/dcmitype/Collection\n; rel=\ntag\n; title=\nCollection\n\nLink: \nhttp://localhost:8000/node/2?_format=jsonld\n; rel=\nalternate\n; type=\napplication/ld+json\n\nX-Drupal-Dynamic-Cache: MISS\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 1564\nContent-Type: application/json\n\n{\nnid\n:[{\nvalue\n:2}],\nuuid\n:[{\nvalue\n:\n413135a6-0bd1-4d6b-8bcb-059cf7784d83\n}],\nvid\n:[{\nvalue\n:2}],\nlangcode\n:[{\nvalue\n:\nen\n}],\ntype\n:[{\ntarget_id\n:\nislandora_object\n,\ntarget_type\n:\nnode_type\n,\ntarget_uuid\n:\n62189bec-3ef3-4196-b847-b17e5ce61fd5\n}],\nrevision_timestamp\n:[{\nvalue\n:\n2019-03-05T18:04:43+00:00\n,\nformat\n:\nY-m-d\\\\TH:i:sP\n}],\nrevision_uid\n:[{\ntarget_id\n:1,\ntarget_type\n:\nuser\n,\ntarget_uuid\n:\n46a47057-de2d-4ce2-87ae-dbe4551209b8\n,\nurl\n:\n\\/user\\/1\n}],\nrevision_log\n:[],\nstatus\n:[{\nvalue\n:true}],\ntitle\n:[{\nvalue\n:\nCreated a collection with POST\n}],\nuid\n:[{\ntarget_id\n:1,\ntarget_type\n:\nuser\n,\ntarget_uuid\n:\n46a47057-de2d-4ce2-87ae-dbe4551209b8\n,\nurl\n:\n\\/user\\/1\n}],\ncreated\n:[{\nvalue\n:\n2019-03-05T18:04:43+00:00\n,\nformat\n:\nY-m-d\\\\TH:i:sP\n}],\nchanged\n:[{\nvalue\n:\n2019-03-05T18:04:43+00:00\n,\nformat\n:\nY-m-d\\\\TH:i:sP\n}],\npromote\n:[{\nvalue\n:true}],\nsticky\n:[{\nvalue\n:false}],\ndefault_langcode\n:[{\nvalue\n:true}],\nrevision_translation_affected\n:[{\nvalue\n:true}],\ncontent_translation_source\n:[{\nvalue\n:\nund\n}],\ncontent_translation_outdated\n:[{\nvalue\n:false}],\nfield_access_terms\n:[],\nfield_alternative_title\n:[],\nfield_description\n:[],\nfield_display_hints\n:[],\nfield_edtf_date\n:[],\nfield_edtf_date_created\n:[],\nfield_edtf_date_issued\n:[],\nfield_extent\n:[{\nvalue\n:\n1 item\n}],\nfield_identifier\n:[],\nfield_linked_agent\n:[],\nfield_member_of\n:[],\nfield_model\n:[{\ntarget_id\n:23,\ntarget_type\n:\ntaxonomy_term\n,\ntarget_uuid\n:\n6a3b293d-4617-417b-99d2-23d75b57f7c2\n,\nurl\n:\n\\/taxonomy\\/term\\/23\n}],\nfield_pid\n:[],\nfield_resource_type\n:[],\nfield_rights\n:[],\nfield_subject\n:[]}%\n\n\n\n\nThen we switch \nGET\n to \nDELETE\n\n\n curl -i -u admin:islandora -X DELETE 'http://localhost:8000/node/2?_format=json'\n\nHTTP/1.1 204 No Content\nDate: Fri, 15 Mar 2019 15:02:30 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Type: text/html; charset=UTF-8\n\n\n\n\nAll subsequent requests to the above URI will return a \n404 Not Found\n status code.\n\n\n curl -i -u admin:islandora -X GET 'http://localhost:8000/node/2?_format=json'\n\nHTTP/1.1 404 Not Found\nDate: Fri, 15 Mar 2019 15:12:58 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 149\nContent-Type: application/json\n\n{\nmessage\n:\nThe \\u0022node\\u0022 parameter was not converted for the path \\u0022\\/node\\/{node}\\u0022 (route name: \\u0022rest.entity.node.GET\\u0022)\n}\n\n\n\n\nMedia\n\n\nYou will need a media id as used in \nGET\n documentation.\n\n\nA delete is simply the same request as a \nGET\n but sending a \nDELETE\n http verb.\n\n\nWith a media id of 1 for our example, I'll perform a \nGET\n\n\n curl -i -u admin:islandora -X GET 'http://localhost:8000/media/1?_format=json' \n\nHTTP/1.1 200 OK\nDate: Fri, 15 Mar 2019 14:53:54 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nLink: \nhttp://localhost:8000/media/add\n; rel=\nhttps://drupal.org/link-relations/add-page\n\nLink: \nhttp://localhost:8000/media/add/image\n; rel=\nhttps://drupal.org/link-relations/add-form\n\nLink: \nhttp://localhost:8000/media/1\n; rel=\ncanonical\n\nLink: \nhttp://localhost:8000/admin/content/media\n; rel=\ncollection\n\nLink: \nhttp://localhost:8000/media/1/delete\n; rel=\nhttps://drupal.org/link-relations/delete-form\n\nLink: \nhttp://localhost:8000/media/delete?media=1\n; rel=\nhttps://drupal.org/link-relations/delete-multiple-form\n\nLink: \nhttp://localhost:8000/media/1/edit\n; rel=\nedit-form\n\nLink: \nhttp://localhost:8000/media/1\n; rel=\nhttps://drupal.org/link-relations/revision\n\nLink: \nhttp://localhost:8000/node/1\n; rel=\nrelated\n; title=\nMedia of\n\nLink: \nhttp://pcdm.org/use#OriginalFile\n; rel=\ntag\n; title=\nOriginal File\n\nLink: \nhttp://localhost:8000/media/1?_format=jsonld\n; rel=\nalternate\n; type=\napplication/ld+json\n\nLink: \nhttp://localhost:8000/media/1/source\n; rel=\nedit-media\n\nLink: \nhttp://localhost:8000/_flysystem/fedora/2019-03/Louis_Riel.jpg\n; rel=\ndescribes\n; type=\nimage/jpeg\n\nX-Drupal-Dynamic-Cache: HIT\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 1937\nContent-Type: application/json\n\n{\nmid\n:[{\nvalue\n:1}],\nuuid\n:[{\nvalue\n:\nd8893926-ddb7-4125-b2da-30428af0fe3d\n}],\nvid\n:[{\nvalue\n:1}],\nlangcode\n:[{\nvalue\n:\nen\n}],\nbundle\n:[{\ntarget_id\n:\nimage\n,\ntarget_type\n:\nmedia_type\n,\ntarget_uuid\n:\n3860e653-201b-4509-89dd-628c446d81cb\n}],\nrevision_created\n:[{\nvalue\n:\n2019-03-01T19:43:46+00:00\n,\nformat\n:\nY-m-d\\\\TH:i:sP\n}],\nrevision_user\n:[{\ntarget_id\n:1,\ntarget_type\n:\nuser\n,\ntarget_uuid\n:\n46a47057-de2d-4ce2-87ae-dbe4551209b8\n,\nurl\n:\n\\/user\\/1\n}],\nrevision_log_message\n:[],\nstatus\n:[{\nvalue\n:true}],\nname\n:[{\nvalue\n:\nAn image\n}],\nthumbnail\n:[{\ntarget_id\n:2,\nalt\n:\nA portrait of Louis Riel\n,\ntitle\n:null,\nwidth\n:800,\nheight\n:1333,\ntarget_type\n:\nfile\n,\ntarget_uuid\n:\nb0625129-c592-463a-93c3-3eff7cd3567e\n,\nurl\n:\nhttp:\\/\\/localhost:8000\\/_flysystem\\/fedora\\/2019-03\\/Louis_Riel.jpg\n}],\nuid\n:[{\ntarget_id\n:1,\ntarget_type\n:\nuser\n,\ntarget_uuid\n:\n46a47057-de2d-4ce2-87ae-dbe4551209b8\n,\nurl\n:\n\\/user\\/1\n}],\ncreated\n:[{\nvalue\n:\n2019-03-01T19:43:22+00:00\n,\nformat\n:\nY-m-d\\\\TH:i:sP\n}],\nchanged\n:[{\nvalue\n:\n2019-03-01T19:43:46+00:00\n,\nformat\n:\nY-m-d\\\\TH:i:sP\n}],\ndefault_langcode\n:[{\nvalue\n:true}],\nrevision_translation_affected\n:[{\nvalue\n:true}],\ncontent_translation_source\n:[{\nvalue\n:\nund\n}],\ncontent_translation_outdated\n:[{\nvalue\n:false}],\nfield_access_terms\n:[],\nfield_file_size\n:[{\nvalue\n:166613}],\nfield_height\n:[{\nvalue\n:1333}],\nfield_media_image\n:[{\ntarget_id\n:2,\nalt\n:\nA portrait of Louis Riel\n,\ntitle\n:\n,\nwidth\n:800,\nheight\n:1333,\ntarget_type\n:\nfile\n,\ntarget_uuid\n:\nb0625129-c592-463a-93c3-3eff7cd3567e\n,\nurl\n:\nhttp:\\/\\/localhost:8000\\/_flysystem\\/fedora\\/2019-03\\/Louis_Riel.jpg\n}],\nfield_media_of\n:[{\ntarget_id\n:1,\ntarget_type\n:\nnode\n,\ntarget_uuid\n:\n8322e36e-f8ec-4fd9-919d-52aed7b17a52\n,\nurl\n:\n\\/node\\/1\n}],\nfield_media_use\n:[{\ntarget_id\n:16,\ntarget_type\n:\ntaxonomy_term\n,\ntarget_uuid\n:\n08e01ff9-eb72-42f5-ae3a-8b21ba0c0bc3\n,\nurl\n:\n\\/taxonomy\\/term\\/16\n}],\nfield_mime_type\n:[{\nvalue\n:\nimage\\/jpeg\n}],\nfield_width\n:[{\nvalue\n:800}]}\n\n\n\n\nThen we replace \nGET\n with \nDELETE\n.\n\n\n curl -i -u admin:islandora -X DELETE 'http://localhost:8000/media/1?_format=json'\n\nHTTP/1.1 204 No Content\nDate: Fri, 15 Mar 2019 14:54:55 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Type: text/html; charset=UTF-8\n\n\n\n\nSubsequent requests to the media return \n404 Not Found\n statuses.\n\n\n curl -i -u admin:islandora -X GET 'http://localhost:8000/media/1?_format=json'\n\nHTTP/1.1 404 Not Found\nDate: Fri, 15 Mar 2019 15:13:45 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 153\nContent-Type: application/json\n\n{\nmessage\n:\nThe \\u0022media\\u0022 parameter was not converted for the path \\u0022\\/media\\/{media}\\u0022 (route name: \\u0022rest.entity.media.GET\\u0022)\n}\n\n\n\n\nFiles\n\n\nYou'll need the file id, there is more information at the top of the \nGET requests for files\n documentation.\n\n\nA delete is simply the same request as a \nGET\n but sending a \nDELETE\n http verb.\n\n\nWith a file id of 2 for our example, I can perform a test \nGET\n\n\n curl -i -u admin:islandora 'http://localhost:8000/entity/file/2?_format=json'\n\nHTTP/1.1 200 OK\nDate: Fri, 15 Mar 2019 14:40:40 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-Drupal-Dynamic-Cache: MISS\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 617\nContent-Type: application/json\n\n{\nfid\n:[{\nvalue\n:2}],\nuuid\n:[{\nvalue\n:\nb0625129-c592-463a-93c3-3eff7cd3567e\n}],\nlangcode\n:[{\nvalue\n:\nen\n}],\nuid\n:[{\ntarget_id\n:1,\ntarget_type\n:\nuser\n,\ntarget_uuid\n:\n46a47057-de2d-4ce2-87ae-dbe4551209b8\n,\nurl\n:\n\\/user\\/1\n}],\nfilename\n:[{\nvalue\n:\nLouis_Riel.jpg\n}],\nuri\n:[{\nvalue\n:\nfedora:\\/\\/2019-03\\/Louis_Riel.jpg\n,\nurl\n:\n\\/_flysystem\\/fedora\\/2019-03\\/Louis_Riel.jpg\n}],\nfilemime\n:[{\nvalue\n:\nimage\\/jpeg\n}],\nfilesize\n:[{\nvalue\n:166613}],\nstatus\n:[{\nvalue\n:true}],\ncreated\n:[{\nvalue\n:\n2019-03-01T19:43:35+00:00\n,\nformat\n:\nY-m-d\\\\TH:i:sP\n}],\nchanged\n:[{\nvalue\n:\n2019-03-01T19:43:46+00:00\n,\nformat\n:\nY-m-d\\\\TH:i:sP\n}]}\n\n\n\n\nIf this is the correct file, I can delete it.\n\n\n curl -i -u admin:islandora -X DELETE 'http://localhost:8000/entity/file/2?_format=json'\n\nHTTP/1.1 204 No Content\nDate: Fri, 15 Mar 2019 14:43:22 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Type: text/html; charset=UTF-8\n\n\n\n\nSubsequent requests to the URI now return a \n404 Not Found\n status.\n\n\n curl -i -u admin:islandora 'http://localhost:8000/entity/file/2?_format=json'\n\nHTTP/1.1 404 Not Found\nDate: Fri, 15 Mar 2019 14:43:33 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 157\nContent-Type: application/json\n\n{\nmessage\n:\nThe \\u0022file\\u0022 parameter was not converted for the path \\u0022\\/entity\\/file\\/{file}\\u0022 (route name: \\u0022rest.entity.file.GET\\u0022)\n}", 
            "title": "DELETE"
        }, 
        {
            "location": "/technical-documentation/rest-delete/#removing-resources-media-and-files-delete-requests", 
            "text": "Deleting is as easy as  getting  resources and more difficult than  creating  resources.  If you can perform a GET request then you have the information required to perform a DELETE request.  Check out the examples below.   Authorization  Content  Media  Files", 
            "title": "Removing resources, media and files - DELETE Requests"
        }, 
        {
            "location": "/technical-documentation/rest-delete/#authorization", 
            "text": "If you have restricted access to view your content, you will need to use one of the configured authorization methods to access your content, media and/or files.  These are defined under  Authorization  on the overview.", 
            "title": "Authorization"
        }, 
        {
            "location": "/technical-documentation/rest-delete/#content-nodes", 
            "text": "You will need your  node id , you can find more information in the  GET  documentation.  A delete is simply the same request as a  GET  but sending a  DELETE  http verb.  Our example node has a  node id  of 2   curl -i -u admin:islandora -X GET 'http://localhost:8000/node/2?_format=json'\n\nHTTP/1.1 200 OK\nDate: Fri, 15 Mar 2019 15:02:00 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nLink:  http://localhost:8000/node/2 ; rel= canonical \nLink:  http://localhost:8000/node/2/delete ; rel= https://drupal.org/link-relations/delete-form \nLink:  http://localhost:8000/admin/content/node/delete?node=2 ; rel= https://drupal.org/link-relations/delete-multiple-form \nLink:  http://localhost:8000/node/2/edit ; rel= edit-form \nLink:  http://localhost:8000/node/2/revisions ; rel= version-history \nLink:  http://localhost:8000/node/2 ; rel= https://drupal.org/link-relations/revision \nLink:  http://localhost:8000/node?node=2 ; rel= https://drupal.org/link-relations/create \nLink:  http://purl.org/dc/dcmitype/Collection ; rel= tag ; title= Collection \nLink:  http://localhost:8000/node/2?_format=jsonld ; rel= alternate ; type= application/ld+json \nX-Drupal-Dynamic-Cache: MISS\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 1564\nContent-Type: application/json\n\n{ nid :[{ value :2}], uuid :[{ value : 413135a6-0bd1-4d6b-8bcb-059cf7784d83 }], vid :[{ value :2}], langcode :[{ value : en }], type :[{ target_id : islandora_object , target_type : node_type , target_uuid : 62189bec-3ef3-4196-b847-b17e5ce61fd5 }], revision_timestamp :[{ value : 2019-03-05T18:04:43+00:00 , format : Y-m-d\\\\TH:i:sP }], revision_uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], revision_log :[], status :[{ value :true}], title :[{ value : Created a collection with POST }], uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], created :[{ value : 2019-03-05T18:04:43+00:00 , format : Y-m-d\\\\TH:i:sP }], changed :[{ value : 2019-03-05T18:04:43+00:00 , format : Y-m-d\\\\TH:i:sP }], promote :[{ value :true}], sticky :[{ value :false}], default_langcode :[{ value :true}], revision_translation_affected :[{ value :true}], content_translation_source :[{ value : und }], content_translation_outdated :[{ value :false}], field_access_terms :[], field_alternative_title :[], field_description :[], field_display_hints :[], field_edtf_date :[], field_edtf_date_created :[], field_edtf_date_issued :[], field_extent :[{ value : 1 item }], field_identifier :[], field_linked_agent :[], field_member_of :[], field_model :[{ target_id :23, target_type : taxonomy_term , target_uuid : 6a3b293d-4617-417b-99d2-23d75b57f7c2 , url : \\/taxonomy\\/term\\/23 }], field_pid :[], field_resource_type :[], field_rights :[], field_subject :[]}%  Then we switch  GET  to  DELETE   curl -i -u admin:islandora -X DELETE 'http://localhost:8000/node/2?_format=json'\n\nHTTP/1.1 204 No Content\nDate: Fri, 15 Mar 2019 15:02:30 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Type: text/html; charset=UTF-8  All subsequent requests to the above URI will return a  404 Not Found  status code.   curl -i -u admin:islandora -X GET 'http://localhost:8000/node/2?_format=json'\n\nHTTP/1.1 404 Not Found\nDate: Fri, 15 Mar 2019 15:12:58 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 149\nContent-Type: application/json\n\n{ message : The \\u0022node\\u0022 parameter was not converted for the path \\u0022\\/node\\/{node}\\u0022 (route name: \\u0022rest.entity.node.GET\\u0022) }", 
            "title": "Content (Nodes)"
        }, 
        {
            "location": "/technical-documentation/rest-delete/#media", 
            "text": "You will need a media id as used in  GET  documentation.  A delete is simply the same request as a  GET  but sending a  DELETE  http verb.  With a media id of 1 for our example, I'll perform a  GET   curl -i -u admin:islandora -X GET 'http://localhost:8000/media/1?_format=json' \n\nHTTP/1.1 200 OK\nDate: Fri, 15 Mar 2019 14:53:54 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nLink:  http://localhost:8000/media/add ; rel= https://drupal.org/link-relations/add-page \nLink:  http://localhost:8000/media/add/image ; rel= https://drupal.org/link-relations/add-form \nLink:  http://localhost:8000/media/1 ; rel= canonical \nLink:  http://localhost:8000/admin/content/media ; rel= collection \nLink:  http://localhost:8000/media/1/delete ; rel= https://drupal.org/link-relations/delete-form \nLink:  http://localhost:8000/media/delete?media=1 ; rel= https://drupal.org/link-relations/delete-multiple-form \nLink:  http://localhost:8000/media/1/edit ; rel= edit-form \nLink:  http://localhost:8000/media/1 ; rel= https://drupal.org/link-relations/revision \nLink:  http://localhost:8000/node/1 ; rel= related ; title= Media of \nLink:  http://pcdm.org/use#OriginalFile ; rel= tag ; title= Original File \nLink:  http://localhost:8000/media/1?_format=jsonld ; rel= alternate ; type= application/ld+json \nLink:  http://localhost:8000/media/1/source ; rel= edit-media \nLink:  http://localhost:8000/_flysystem/fedora/2019-03/Louis_Riel.jpg ; rel= describes ; type= image/jpeg \nX-Drupal-Dynamic-Cache: HIT\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 1937\nContent-Type: application/json\n\n{ mid :[{ value :1}], uuid :[{ value : d8893926-ddb7-4125-b2da-30428af0fe3d }], vid :[{ value :1}], langcode :[{ value : en }], bundle :[{ target_id : image , target_type : media_type , target_uuid : 3860e653-201b-4509-89dd-628c446d81cb }], revision_created :[{ value : 2019-03-01T19:43:46+00:00 , format : Y-m-d\\\\TH:i:sP }], revision_user :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], revision_log_message :[], status :[{ value :true}], name :[{ value : An image }], thumbnail :[{ target_id :2, alt : A portrait of Louis Riel , title :null, width :800, height :1333, target_type : file , target_uuid : b0625129-c592-463a-93c3-3eff7cd3567e , url : http:\\/\\/localhost:8000\\/_flysystem\\/fedora\\/2019-03\\/Louis_Riel.jpg }], uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], created :[{ value : 2019-03-01T19:43:22+00:00 , format : Y-m-d\\\\TH:i:sP }], changed :[{ value : 2019-03-01T19:43:46+00:00 , format : Y-m-d\\\\TH:i:sP }], default_langcode :[{ value :true}], revision_translation_affected :[{ value :true}], content_translation_source :[{ value : und }], content_translation_outdated :[{ value :false}], field_access_terms :[], field_file_size :[{ value :166613}], field_height :[{ value :1333}], field_media_image :[{ target_id :2, alt : A portrait of Louis Riel , title : , width :800, height :1333, target_type : file , target_uuid : b0625129-c592-463a-93c3-3eff7cd3567e , url : http:\\/\\/localhost:8000\\/_flysystem\\/fedora\\/2019-03\\/Louis_Riel.jpg }], field_media_of :[{ target_id :1, target_type : node , target_uuid : 8322e36e-f8ec-4fd9-919d-52aed7b17a52 , url : \\/node\\/1 }], field_media_use :[{ target_id :16, target_type : taxonomy_term , target_uuid : 08e01ff9-eb72-42f5-ae3a-8b21ba0c0bc3 , url : \\/taxonomy\\/term\\/16 }], field_mime_type :[{ value : image\\/jpeg }], field_width :[{ value :800}]}  Then we replace  GET  with  DELETE .   curl -i -u admin:islandora -X DELETE 'http://localhost:8000/media/1?_format=json'\n\nHTTP/1.1 204 No Content\nDate: Fri, 15 Mar 2019 14:54:55 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Type: text/html; charset=UTF-8  Subsequent requests to the media return  404 Not Found  statuses.   curl -i -u admin:islandora -X GET 'http://localhost:8000/media/1?_format=json'\n\nHTTP/1.1 404 Not Found\nDate: Fri, 15 Mar 2019 15:13:45 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 153\nContent-Type: application/json\n\n{ message : The \\u0022media\\u0022 parameter was not converted for the path \\u0022\\/media\\/{media}\\u0022 (route name: \\u0022rest.entity.media.GET\\u0022) }", 
            "title": "Media"
        }, 
        {
            "location": "/technical-documentation/rest-delete/#files", 
            "text": "You'll need the file id, there is more information at the top of the  GET requests for files  documentation.  A delete is simply the same request as a  GET  but sending a  DELETE  http verb.  With a file id of 2 for our example, I can perform a test  GET   curl -i -u admin:islandora 'http://localhost:8000/entity/file/2?_format=json'\n\nHTTP/1.1 200 OK\nDate: Fri, 15 Mar 2019 14:40:40 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-Drupal-Dynamic-Cache: MISS\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 617\nContent-Type: application/json\n\n{ fid :[{ value :2}], uuid :[{ value : b0625129-c592-463a-93c3-3eff7cd3567e }], langcode :[{ value : en }], uid :[{ target_id :1, target_type : user , target_uuid : 46a47057-de2d-4ce2-87ae-dbe4551209b8 , url : \\/user\\/1 }], filename :[{ value : Louis_Riel.jpg }], uri :[{ value : fedora:\\/\\/2019-03\\/Louis_Riel.jpg , url : \\/_flysystem\\/fedora\\/2019-03\\/Louis_Riel.jpg }], filemime :[{ value : image\\/jpeg }], filesize :[{ value :166613}], status :[{ value :true}], created :[{ value : 2019-03-01T19:43:35+00:00 , format : Y-m-d\\\\TH:i:sP }], changed :[{ value : 2019-03-01T19:43:46+00:00 , format : Y-m-d\\\\TH:i:sP }]}  If this is the correct file, I can delete it.   curl -i -u admin:islandora -X DELETE 'http://localhost:8000/entity/file/2?_format=json'\n\nHTTP/1.1 204 No Content\nDate: Fri, 15 Mar 2019 14:43:22 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Type: text/html; charset=UTF-8  Subsequent requests to the URI now return a  404 Not Found  status.   curl -i -u admin:islandora 'http://localhost:8000/entity/file/2?_format=json'\n\nHTTP/1.1 404 Not Found\nDate: Fri, 15 Mar 2019 14:43:33 GMT\nServer: Apache/2.4.18 (Ubuntu)\nX-Powered-By: PHP/7.1.26-1+ubuntu16.04.1+deb.sury.org+1\nCache-Control: must-revalidate, no-cache, private\nX-UA-Compatible: IE=edge\nContent-language: en\nX-Content-Type-Options: nosniff\nX-Frame-Options: SAMEORIGIN\nExpires: Sun, 19 Nov 1978 05:00:00 GMT\nVary: \nX-Generator: Drupal 8 (https://www.drupal.org)\nContent-Length: 157\nContent-Type: application/json\n\n{ message : The \\u0022file\\u0022 parameter was not converted for the path \\u0022\\/entity\\/file\\/{file}\\u0022 (route name: \\u0022rest.entity.file.GET\\u0022) }", 
            "title": "Files"
        }, 
        {
            "location": "/technical-documentation/rest-signposting/", 
            "text": "Signposting\n\n\nSignposting is a technique used in RESTful APIs where other relevant resources are exposed to clients as \nLink\n headers in\n\nGET\n and \nHEAD\n requests.  These \nLink\n headers follow a standard format as specified in \nRFC8288\n.  Drupal already makes use of this technique for content entities, and Islandora takes it\neven further by providing additional \nLink\n headers that enable the client to navigate the repository and discover\nadditional information about various resources.  Because the links are returned in respionse headers, they can be relied upon\nwithout having to parse the message body.  This makes them consistent across all serialization formats that can be returned in a message body \n(XML, JSON, JSONLD, etc...).\n\n\nAs a general precaution, link headers for Drupal entities are not exposed to users that do not have the permissions to view\nthe entity linked in the header.  So making GET and HEAD requests anonymously will yield a different set of headers than\nwhat an authenticated user would see.  For example, anonymous users don't have the \nview media\n permission, so they will not\nsee the link headers for media associated with a node.\n\n\nLink Headers Provided by Islandora\n\n\nAlternate Representations\n\n\nOther representations generated by different serializers available through Drupal's REST API are exposed as link headers\nwith \nrel=\"alternate\"\n and \ntype\n equal to the mimetype that will be received when dereferencing the link.  For example,\nif an entity in Drupal has a JSONLD representation, then the link header returned in a GET or HEAD response would look like\n\n\nLink: \nhttp://example.org/node/1?_format=jsonld\n; rel=\"alternate\"; type=\"application/ld+json\"\n\n\nReferenced Entities\n\n\nEntity reference fields are exposed as link headers with \nrel=\"related\"\n and a title equal to the entity reference field's display label.\nFor example, if \nhttp://example.org/node/1\n has an entity reference field name \"Associated Content\" that references \n\nhttp://example.org/node/2\n, then the link header returned in a GET or HEAD response would look like\n\n\nLink: \nhttp://example.org/node/2\n; rel=\"related\"; title=\"Associated Content\"\n\n\nReferenced Taxonomy Terms\n\n\nEntity reference fields for taxonomy terms get special handling.  The taxonomy terms used to tag content are exposed as link headers \nwith \nrel=\"tag\"\n and a title equal to the taxonomy term's display label.  If the term has an external URI in a controlled vocabulary, \nthen that URI is provided.  Otherwise, the local Drupal URI is provided.  For example, if a piece of content is tagged with \n\ntaxonomy/term/1\n, which has a display label of \"Example Term\", then the link header returned in a GET or HEAD response would look like \n\n\nLink: \nhttp://example.org/taxonomy/term/1\n; rel=\"tag\"; title=\"Example Term\"\n\n\nIf instead the term were to have the \nfield_external_uri\n field with a value of \nhttp://exampletwo.org/vocab#term\n then the link\nheader would look like \n\n\nLink: \nhttp://exampletwo.org/vocab#term\n; rel=\"tag\"; title=\"Example Term\"\n.   \n\n\nAssociated Media\n\n\nMedia entities belonging to nodes are exposed as link headers with \nrel=\"related\"\n and a title equal to the display label of\ntheir \nfield_media_use\n taxonomy term.  For example, if a media is tagged as \nOriginal File\n indicating\nthat it is the initial file uploaded, the link header returned in a GET or HEAD response for a node would look like\n\n\nLink: \nhttp://example.org/media/1\n; rel=\"related\"; title=\"Original File\"\n.\n\n\nSource Files\n\n\nFiles that are the source for media entities are exposed as Link headers in the GET and HEAD responses with \nrel=\"describes\"\n.\nThe endpoint to edit the contents of the source file is also exposed using \nrel=\"edit-media\"\n. For example, if \n\nhttp://example.org/media/1\n has the source file \nhttp://example.org/file.txt\n, then a GET or HEAD response would contain\nboth\n\n\n\n\nLink: \nhttp://example.org/file.txt\n; rel=\"describes\"\n\n\nLink: \nhttp://example.org/media/1/source\n; rel=\"edit-media\"\n\n\n\n\nExamples\n\n\nRequesting a Node\n\n\nAfter creating a node, adding it to a Collection, uploading a file and kicking off derivatives, the link headers returned \nfor said node would look like the following.  Note that non-Link headers have been removed for brevity:\n\n\nvagrant@claw:~$ curl -I http://localhost:8000/node/1?_format=json\nHTTP/1.1 200 OK\n...\n# These are provided by Drupal core\nLink: \nhttp://localhost:8000/node/1\n; rel=\ncanonical\n\nLink: \nhttp://localhost:8000/node/1/delete\n; rel=\nhttps://drupal.org/link-relations/delete-form\n\nLink: \nhttp://localhost:8000/admin/content/node/delete?node=1\n; rel=\nhttps://drupal.org/link-relations/delete-multiple-form\n\nLink: \nhttp://localhost:8000/node/1/edit\n; rel=\nedit-form\n\nLink: \nhttp://localhost:8000/node/1/revisions\n; rel=\nversion-history\n\nLink: \nhttp://localhost:8000/node/1\n; rel=\nhttps://drupal.org/link-relations/revision\n\nLink: \nhttp://localhost:8000/node?node=1\n; rel=\nhttps://drupal.org/link-relations/create\n\n\n# These are provided by Islandora\nLink: \nhttp://localhost:8000/node/2\n; rel=\nrelated\n; title=\nMember of\n\nLink: \nhttp://purl.org/coar/resource_type/c_c513\n; rel=\ntag\n; title=\nImage\n\nLink: \nhttp://localhost:8000/media/1\n; rel=\nrelated\n; title=\nOriginal File\n\nLink: \nhttp://localhost:8000/media/2\n; rel=\nrelated\n; title=\nService File\n\nLink: \nhttp://localhost:8000/media/3\n; rel=\nrelated\n; title=\nThumbnail Image\n\nLink: \nhttp://localhost:8000/node/1?_format=jsonld\n; rel=\nalternate\n; type=\napplication/ld+json\n\n\n\n\n\nRequesting a Media\n\n\nIf we were to inspect one of the Media associated with this node (which we would've gotten in the response above), the\nresults would look like:\n\n\nvagrant@claw:~$ curl -I http://localhost:8000/media/1?_format=json \nHTTP/1.1 200 OK\n...\n\n# These are provided by Drupal core\nLink: \nhttp://localhost:8000/media/add\n; rel=\nhttps://drupal.org/link-relations/add-page\n\nLink: \nhttp://localhost:8000/media/add/image\n; rel=\nhttps://drupal.org/link-relations/add-form\n\nLink: \nhttp://localhost:8000/media/1\n; rel=\ncanonical\n\nLink: \nhttp://localhost:8000/admin/content/media\n; rel=\ncollection\n\nLink: \nhttp://localhost:8000/media/1/delete\n; rel=\nhttps://drupal.org/link-relations/delete-form\n\nLink: \nhttp://localhost:8000/media/delete?media=1\n; rel=\nhttps://drupal.org/link-relations/delete-multiple-form\n\nLink: \nhttp://localhost:8000/media/1/edit\n; rel=\nedit-form\n\nLink: \nhttp://localhost:8000/media/1\n; rel=\nhttps://drupal.org/link-relations/revision\n\n\n# These are provided by Islandora \nLink: \nhttp://localhost:8000/node/1\n; rel=\nrelated\n; title=\nMedia of\n\nLink: \nhttp://pcdm.org/use#OriginalFile\n; rel=\ntag\n; title=\nOriginal File\n\nLink: \nhttp://localhost:8000/media/1?_format=jsonld\n; rel=\nalternate\n; type=\napplication/ld+json\n\nLink: \nhttp://localhost:8000/media/1/source\n; rel=\nedit-media\n\nLink: \nhttp://localhost:8000/_flysystem/fedora/2019-03/IF-Org-Chart_0.jpg\n; rel=\ndescribes\n; type=\nimage/jpeg", 
            "title": "Signposting"
        }, 
        {
            "location": "/technical-documentation/rest-signposting/#signposting", 
            "text": "Signposting is a technique used in RESTful APIs where other relevant resources are exposed to clients as  Link  headers in GET  and  HEAD  requests.  These  Link  headers follow a standard format as specified in  RFC8288 .  Drupal already makes use of this technique for content entities, and Islandora takes it\neven further by providing additional  Link  headers that enable the client to navigate the repository and discover\nadditional information about various resources.  Because the links are returned in respionse headers, they can be relied upon\nwithout having to parse the message body.  This makes them consistent across all serialization formats that can be returned in a message body \n(XML, JSON, JSONLD, etc...).  As a general precaution, link headers for Drupal entities are not exposed to users that do not have the permissions to view\nthe entity linked in the header.  So making GET and HEAD requests anonymously will yield a different set of headers than\nwhat an authenticated user would see.  For example, anonymous users don't have the  view media  permission, so they will not\nsee the link headers for media associated with a node.", 
            "title": "Signposting"
        }, 
        {
            "location": "/technical-documentation/rest-signposting/#link-headers-provided-by-islandora", 
            "text": "", 
            "title": "Link Headers Provided by Islandora"
        }, 
        {
            "location": "/technical-documentation/rest-signposting/#alternate-representations", 
            "text": "Other representations generated by different serializers available through Drupal's REST API are exposed as link headers\nwith  rel=\"alternate\"  and  type  equal to the mimetype that will be received when dereferencing the link.  For example,\nif an entity in Drupal has a JSONLD representation, then the link header returned in a GET or HEAD response would look like  Link:  http://example.org/node/1?_format=jsonld ; rel=\"alternate\"; type=\"application/ld+json\"", 
            "title": "Alternate Representations"
        }, 
        {
            "location": "/technical-documentation/rest-signposting/#referenced-entities", 
            "text": "Entity reference fields are exposed as link headers with  rel=\"related\"  and a title equal to the entity reference field's display label.\nFor example, if  http://example.org/node/1  has an entity reference field name \"Associated Content\" that references  http://example.org/node/2 , then the link header returned in a GET or HEAD response would look like  Link:  http://example.org/node/2 ; rel=\"related\"; title=\"Associated Content\"", 
            "title": "Referenced Entities"
        }, 
        {
            "location": "/technical-documentation/rest-signposting/#referenced-taxonomy-terms", 
            "text": "Entity reference fields for taxonomy terms get special handling.  The taxonomy terms used to tag content are exposed as link headers \nwith  rel=\"tag\"  and a title equal to the taxonomy term's display label.  If the term has an external URI in a controlled vocabulary, \nthen that URI is provided.  Otherwise, the local Drupal URI is provided.  For example, if a piece of content is tagged with  taxonomy/term/1 , which has a display label of \"Example Term\", then the link header returned in a GET or HEAD response would look like   Link:  http://example.org/taxonomy/term/1 ; rel=\"tag\"; title=\"Example Term\"  If instead the term were to have the  field_external_uri  field with a value of  http://exampletwo.org/vocab#term  then the link\nheader would look like   Link:  http://exampletwo.org/vocab#term ; rel=\"tag\"; title=\"Example Term\" .", 
            "title": "Referenced Taxonomy Terms"
        }, 
        {
            "location": "/technical-documentation/rest-signposting/#associated-media", 
            "text": "Media entities belonging to nodes are exposed as link headers with  rel=\"related\"  and a title equal to the display label of\ntheir  field_media_use  taxonomy term.  For example, if a media is tagged as  Original File  indicating\nthat it is the initial file uploaded, the link header returned in a GET or HEAD response for a node would look like  Link:  http://example.org/media/1 ; rel=\"related\"; title=\"Original File\" .", 
            "title": "Associated Media"
        }, 
        {
            "location": "/technical-documentation/rest-signposting/#source-files", 
            "text": "Files that are the source for media entities are exposed as Link headers in the GET and HEAD responses with  rel=\"describes\" .\nThe endpoint to edit the contents of the source file is also exposed using  rel=\"edit-media\" . For example, if  http://example.org/media/1  has the source file  http://example.org/file.txt , then a GET or HEAD response would contain\nboth   Link:  http://example.org/file.txt ; rel=\"describes\"  Link:  http://example.org/media/1/source ; rel=\"edit-media\"", 
            "title": "Source Files"
        }, 
        {
            "location": "/technical-documentation/rest-signposting/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/technical-documentation/rest-signposting/#requesting-a-node", 
            "text": "After creating a node, adding it to a Collection, uploading a file and kicking off derivatives, the link headers returned \nfor said node would look like the following.  Note that non-Link headers have been removed for brevity:  vagrant@claw:~$ curl -I http://localhost:8000/node/1?_format=json\nHTTP/1.1 200 OK\n...\n# These are provided by Drupal core\nLink:  http://localhost:8000/node/1 ; rel= canonical \nLink:  http://localhost:8000/node/1/delete ; rel= https://drupal.org/link-relations/delete-form \nLink:  http://localhost:8000/admin/content/node/delete?node=1 ; rel= https://drupal.org/link-relations/delete-multiple-form \nLink:  http://localhost:8000/node/1/edit ; rel= edit-form \nLink:  http://localhost:8000/node/1/revisions ; rel= version-history \nLink:  http://localhost:8000/node/1 ; rel= https://drupal.org/link-relations/revision \nLink:  http://localhost:8000/node?node=1 ; rel= https://drupal.org/link-relations/create \n\n# These are provided by Islandora\nLink:  http://localhost:8000/node/2 ; rel= related ; title= Member of \nLink:  http://purl.org/coar/resource_type/c_c513 ; rel= tag ; title= Image \nLink:  http://localhost:8000/media/1 ; rel= related ; title= Original File \nLink:  http://localhost:8000/media/2 ; rel= related ; title= Service File \nLink:  http://localhost:8000/media/3 ; rel= related ; title= Thumbnail Image \nLink:  http://localhost:8000/node/1?_format=jsonld ; rel= alternate ; type= application/ld+json", 
            "title": "Requesting a Node"
        }, 
        {
            "location": "/technical-documentation/rest-signposting/#requesting-a-media", 
            "text": "If we were to inspect one of the Media associated with this node (which we would've gotten in the response above), the\nresults would look like:  vagrant@claw:~$ curl -I http://localhost:8000/media/1?_format=json \nHTTP/1.1 200 OK\n...\n\n# These are provided by Drupal core\nLink:  http://localhost:8000/media/add ; rel= https://drupal.org/link-relations/add-page \nLink:  http://localhost:8000/media/add/image ; rel= https://drupal.org/link-relations/add-form \nLink:  http://localhost:8000/media/1 ; rel= canonical \nLink:  http://localhost:8000/admin/content/media ; rel= collection \nLink:  http://localhost:8000/media/1/delete ; rel= https://drupal.org/link-relations/delete-form \nLink:  http://localhost:8000/media/delete?media=1 ; rel= https://drupal.org/link-relations/delete-multiple-form \nLink:  http://localhost:8000/media/1/edit ; rel= edit-form \nLink:  http://localhost:8000/media/1 ; rel= https://drupal.org/link-relations/revision \n\n# These are provided by Islandora \nLink:  http://localhost:8000/node/1 ; rel= related ; title= Media of \nLink:  http://pcdm.org/use#OriginalFile ; rel= tag ; title= Original File \nLink:  http://localhost:8000/media/1?_format=jsonld ; rel= alternate ; type= application/ld+json \nLink:  http://localhost:8000/media/1/source ; rel= edit-media \nLink:  http://localhost:8000/_flysystem/fedora/2019-03/IF-Org-Chart_0.jpg ; rel= describes ; type= image/jpeg", 
            "title": "Requesting a Media"
        }, 
        {
            "location": "/technical-documentation/install-enable-drupal-modules/", 
            "text": "Downloading and Enabling Drupal Modules and Themes\n\n\nIslandora 8 can make use of majority of the Drupal 8 \nmodules\n and \nthemes\n. Common use cases have been documented in the \nIslandora 8 Cookbook\n. There are several ways to download and install Drupal modules. Please refer to \nthis guide\n on Drupal.org.\n\n\nComposer\n is the recommended method to install and update drupal modules and themes in Islandora 8. In the \nIslandora 8 playbook\n, you can add a Drupal module's or theme's machine name to the \ndrupal_composer_dependencies\n variable \nhere\n. To enable the Drupal module or theme, add the module machine name to the \ndrupal_enable_modules\n variable as well. For modules that require additional steps, additional tasks may need to be added to the ansible playbook. Re-provisioning your instance via ansible will install the module.", 
            "title": "Installing Modules"
        }, 
        {
            "location": "/technical-documentation/install-enable-drupal-modules/#downloading-and-enabling-drupal-modules-and-themes", 
            "text": "Islandora 8 can make use of majority of the Drupal 8  modules  and  themes . Common use cases have been documented in the  Islandora 8 Cookbook . There are several ways to download and install Drupal modules. Please refer to  this guide  on Drupal.org.  Composer  is the recommended method to install and update drupal modules and themes in Islandora 8. In the  Islandora 8 playbook , you can add a Drupal module's or theme's machine name to the  drupal_composer_dependencies  variable  here . To enable the Drupal module or theme, add the module machine name to the  drupal_enable_modules  variable as well. For modules that require additional steps, additional tasks may need to be added to the ansible playbook. Re-provisioning your instance via ansible will install the module.", 
            "title": "Downloading and Enabling Drupal Modules and Themes"
        }, 
        {
            "location": "/technical-documentation/running-automated-tests/", 
            "text": "Running Automated Tests\n\n\nUser Interface\n\n\n\n\nTo run automated tests via a web browser, you can to Admin \n Configuration \n Testing \n(http://localhost:8000/admin/config/development/testing) in the admin toolbar.  From \nthere you can browse and search for tests, select the ones you'd like to run.  Pressing\nthe blue \"Run Tests\" button will execute all tests you've selected in a batch and then\ndisplay the results.\n\n\nCommand Line\n\n\nRunning tests from the command line utilizes the test runner script provided by Drupal core.\nFrom Drupal's \nweb\n directory, the full command to run is\n\n\nvagrant@claw:/var/www/html/drupal/web$ sudo -u www-data php core/scripts/run-tests.sh \\\n--suppress-deprecations \\\n--url http://127.0.0.1:8000 \\\n--verbose \\\n--php `which php` \\\n--module \nislandora\n\n\n\n\n\nLet's unpack it\n- You need to run this as the apache user for filesystem access, hence \nsudo -u www-data\n\n- Despite having a \n.sh\n extension, you run the command with php: \nphp core/scripts/run-tests.sh\n\n- \n--suppress-deprecations\n tells the script not to count deprecation warnings as test failures\n- \n--url http://127.0.0.1:8000\n tells the script what base url to use for functional tests.  If you are using a port other than 8000, you'll need to make sure to update this accordingly\n- \n--verbose\n is optional, but useful if you want more feedback from failures\n- \n--php `which php`\n tells the script where to find the php executable to use\n- \n--module \"islandora\"\n tells the script to run all tests from the \nislandora\n module\n\n\nIf you want to run just a single class instead of a whole module's worth, you can use the \n--class\n option instead of \n--module\n.  The \n--class\n option takes the fully namespaced class name as an argument.  For example, to run just the \nAddMediaToNodeTest\n:\n\n\nvagrant@claw:/var/www/html/drupal/web$ sudo -u www-data php core/scripts/run-tests.sh \\\n--suppress-deprecations \\\n--url http://127.0.0.1:8000 \\\n--verbose \\\n--php `which php` \\\n--class \nDrupal\\Tests\\islandora\\Functional\\AddMediaToNodeTest", 
            "title": "Running Tests"
        }, 
        {
            "location": "/technical-documentation/running-automated-tests/#running-automated-tests", 
            "text": "", 
            "title": "Running Automated Tests"
        }, 
        {
            "location": "/technical-documentation/running-automated-tests/#user-interface", 
            "text": "To run automated tests via a web browser, you can to Admin   Configuration   Testing \n(http://localhost:8000/admin/config/development/testing) in the admin toolbar.  From \nthere you can browse and search for tests, select the ones you'd like to run.  Pressing\nthe blue \"Run Tests\" button will execute all tests you've selected in a batch and then\ndisplay the results.", 
            "title": "User Interface"
        }, 
        {
            "location": "/technical-documentation/running-automated-tests/#command-line", 
            "text": "Running tests from the command line utilizes the test runner script provided by Drupal core.\nFrom Drupal's  web  directory, the full command to run is  vagrant@claw:/var/www/html/drupal/web$ sudo -u www-data php core/scripts/run-tests.sh \\\n--suppress-deprecations \\\n--url http://127.0.0.1:8000 \\\n--verbose \\\n--php `which php` \\\n--module  islandora   Let's unpack it\n- You need to run this as the apache user for filesystem access, hence  sudo -u www-data \n- Despite having a  .sh  extension, you run the command with php:  php core/scripts/run-tests.sh \n-  --suppress-deprecations  tells the script not to count deprecation warnings as test failures\n-  --url http://127.0.0.1:8000  tells the script what base url to use for functional tests.  If you are using a port other than 8000, you'll need to make sure to update this accordingly\n-  --verbose  is optional, but useful if you want more feedback from failures\n-  --php `which php`  tells the script where to find the php executable to use\n-  --module \"islandora\"  tells the script to run all tests from the  islandora  module  If you want to run just a single class instead of a whole module's worth, you can use the  --class  option instead of  --module .  The  --class  option takes the fully namespaced class name as an argument.  For example, to run just the  AddMediaToNodeTest :  vagrant@claw:/var/www/html/drupal/web$ sudo -u www-data php core/scripts/run-tests.sh \\\n--suppress-deprecations \\\n--url http://127.0.0.1:8000 \\\n--verbose \\\n--php `which php` \\\n--class  Drupal\\Tests\\islandora\\Functional\\AddMediaToNodeTest", 
            "title": "Command Line"
        }, 
        {
            "location": "/technical-documentation/flysystem/", 
            "text": "Flysystem\n\n\nIslandora uses \nFlysystem\n and the \nassociated Drupal module\n to persist binary files to Fedora instead of keeping a copy in both Drupal and Fedora.\n\n\nBackground\n\n\n\"\nFlysystem\n is a filesystem abstraction library for PHP\" which allows applications to read from and write to a variety of data source beyond the local file system, such as an \nSFTP server\n, \nAmazon S3\n, and \nZip files\n provided an \nAdapter\n is available to support it. Flysystem Adapters extend a single class implementing \nLeague\\Flysystem\\FilesystemInterface\n although some separate adapter traits for common actions and properties, such as the StreamedCopyTrait, are available.\n\n\nThe \nDrupal Flysystem module\n extends Flysystem to work within the Drupal filesystem structure. Drupal flysystem plugins include a Flysystem adapter (if not provided by default or in another library) and a class implementing \nDrupal\\flysystem\\Plugin\\FlysystemPluginInterface\n which instantiates the Flysystem adapter based on the Drupal site's configuration.\n\n\nThe Drupal Flysystem module uses \nflysystem stream wrappers\n to define filesystem descriptors which are configured in the site's \nsettings.php\n file. The configurations including the filesystem prefix, adapter (driver), and any adapter-specific configurations such as API endpoints and authorization information.\n\n\nIslandora's Implementation\n\n\nThe Plugin and Adapter\n\n\nIslandora 8 implements a \nFlysystem adapter\n and a \nDrupal Flysystem plugin\n. The Flysystem adapter acts as an intermediary between the Flysystem filesystem API and Fedora, translating requests and responses between them. The adapter interacts with Fedora using an instance of the \nChullo Fedora API\n it receives from the Drupal Flysystem plugin. The Drupal Flysystem plugin's main responsibility is to instantiate the Chullo Fedora API object with the proper authentication and pass it to the Flysystem adapter. To authenticate with Fedora the plugin adds a \nhandler\n to the Chullo's \nGuzzle\n client which adds a \nJWT\n authentication header to each request. \n\n\nThe Fedora Flysystem adapter does not use Gemini to map the relationship between Drupal URIs and Fedora URIs, so they are indexed separately using the \"files_in_fedora\" Context which triggers the \"Index Fedora File in Gemini\" and \"Delete Fedora File in Gemini\" actions as appropriate.\n\n\nConfiguration\n\n\nThe fedora file system is configured in the site's \nsettings.php\n file. An example configuration can be seen in the claw-playbook webserver role's \ndrupal tasks\n:\n\n\n$settings['flysystem'] = [\n  'fedora' =\n [\n    'driver' =\n 'fedora',\n    'config' =\n [\n      'root' =\n 'http://localhost:8080/fcrepo/rest/',\n    ],\n  ],\n];\n\n\n\n\nThe configuration array's top-level key is the name of the Drupal stream wrapper, which also serves as the filesystem prefix. Any Drupal file path using \"fedora://\" will use this Flysystem adapter. Drupal will translate this prefix to the site's domain plus \"_flystem/fedora/\". For example, using the default configuration provided by the claw-playbook, a file stored at \"fedora://test.tif\" will persist to Fedora with the URI \"http://localhost:8080/fcrepo/rest/test.tif\" and will be accessible from the Drupal URL \"http://localhost:8000/_flysystem/fedora/test.tif\". The 'driver' value 'fedora' corresponds to \nthe plugin's machine name\n. The 'config' section contains all the adapter-specific configurations. In this case, the only thing configured for the site is the Fedora REST end-point. (Change this value to match your own Fedora's location, if needed.) The JWT is configured separately.\n\n\nOther examples of Drupal Flysystem configurations can be seen in \nthe module's README\n.\n\n\nIslandora is configured to have all Media use the Fedora file system by default in the islandora_core_feature. For example, the \nfield storage uri_scheme setting for field_media_image\n (and the other media types) is \"fedora\". This can also be viewed in the UI on the field's \"Field settings\" page; e.g. \nhttp://localhost:8000/admin/structure/media/manage/image/fields/media.image.field_media_image/storage\n, look for \"Upload destination\" and see that \"Flysystem: fedora\" is selected.\n\n\nHowever, there are methods for saving files that can explicitly set a different filesystem than the default. Migrations can explicitly set which file system a file is saved to and Islandora can emit events that also specify which file system a derivative should be saved to.\n\n\nDerivatives\n\n\nAs hinted in the previous section, Islandora, by default saves derivatives to the Drupal public file system.\n\n\nFor example, if I upload a Tiff to a repository item as a File Media with the term \"Original File\", the \"Image Original File\" (\nimage_original_file\n) Context is triggered. This fires the \n'image_generate_a_service_file_from_an_original_file' action\n which emits an event using the \n'public' scheme (file system)\n.\n\n\nTo make Islandora save future derivatives to Fedora instead of to Drupal, change the corresponding action's \"File system\" setting ('scheme' in the corresponding config file) to 'fedora' instead of 'public'.", 
            "title": "Flysystem"
        }, 
        {
            "location": "/technical-documentation/flysystem/#flysystem", 
            "text": "Islandora uses  Flysystem  and the  associated Drupal module  to persist binary files to Fedora instead of keeping a copy in both Drupal and Fedora.", 
            "title": "Flysystem"
        }, 
        {
            "location": "/technical-documentation/flysystem/#background", 
            "text": "\" Flysystem  is a filesystem abstraction library for PHP\" which allows applications to read from and write to a variety of data source beyond the local file system, such as an  SFTP server ,  Amazon S3 , and  Zip files  provided an  Adapter  is available to support it. Flysystem Adapters extend a single class implementing  League\\Flysystem\\FilesystemInterface  although some separate adapter traits for common actions and properties, such as the StreamedCopyTrait, are available.  The  Drupal Flysystem module  extends Flysystem to work within the Drupal filesystem structure. Drupal flysystem plugins include a Flysystem adapter (if not provided by default or in another library) and a class implementing  Drupal\\flysystem\\Plugin\\FlysystemPluginInterface  which instantiates the Flysystem adapter based on the Drupal site's configuration.  The Drupal Flysystem module uses  flysystem stream wrappers  to define filesystem descriptors which are configured in the site's  settings.php  file. The configurations including the filesystem prefix, adapter (driver), and any adapter-specific configurations such as API endpoints and authorization information.", 
            "title": "Background"
        }, 
        {
            "location": "/technical-documentation/flysystem/#islandoras-implementation", 
            "text": "", 
            "title": "Islandora's Implementation"
        }, 
        {
            "location": "/technical-documentation/flysystem/#the-plugin-and-adapter", 
            "text": "Islandora 8 implements a  Flysystem adapter  and a  Drupal Flysystem plugin . The Flysystem adapter acts as an intermediary between the Flysystem filesystem API and Fedora, translating requests and responses between them. The adapter interacts with Fedora using an instance of the  Chullo Fedora API  it receives from the Drupal Flysystem plugin. The Drupal Flysystem plugin's main responsibility is to instantiate the Chullo Fedora API object with the proper authentication and pass it to the Flysystem adapter. To authenticate with Fedora the plugin adds a  handler  to the Chullo's  Guzzle  client which adds a  JWT  authentication header to each request.   The Fedora Flysystem adapter does not use Gemini to map the relationship between Drupal URIs and Fedora URIs, so they are indexed separately using the \"files_in_fedora\" Context which triggers the \"Index Fedora File in Gemini\" and \"Delete Fedora File in Gemini\" actions as appropriate.", 
            "title": "The Plugin and Adapter"
        }, 
        {
            "location": "/technical-documentation/flysystem/#configuration", 
            "text": "The fedora file system is configured in the site's  settings.php  file. An example configuration can be seen in the claw-playbook webserver role's  drupal tasks :  $settings['flysystem'] = [\n  'fedora' =  [\n    'driver' =  'fedora',\n    'config' =  [\n      'root' =  'http://localhost:8080/fcrepo/rest/',\n    ],\n  ],\n];  The configuration array's top-level key is the name of the Drupal stream wrapper, which also serves as the filesystem prefix. Any Drupal file path using \"fedora://\" will use this Flysystem adapter. Drupal will translate this prefix to the site's domain plus \"_flystem/fedora/\". For example, using the default configuration provided by the claw-playbook, a file stored at \"fedora://test.tif\" will persist to Fedora with the URI \"http://localhost:8080/fcrepo/rest/test.tif\" and will be accessible from the Drupal URL \"http://localhost:8000/_flysystem/fedora/test.tif\". The 'driver' value 'fedora' corresponds to  the plugin's machine name . The 'config' section contains all the adapter-specific configurations. In this case, the only thing configured for the site is the Fedora REST end-point. (Change this value to match your own Fedora's location, if needed.) The JWT is configured separately.  Other examples of Drupal Flysystem configurations can be seen in  the module's README .  Islandora is configured to have all Media use the Fedora file system by default in the islandora_core_feature. For example, the  field storage uri_scheme setting for field_media_image  (and the other media types) is \"fedora\". This can also be viewed in the UI on the field's \"Field settings\" page; e.g.  http://localhost:8000/admin/structure/media/manage/image/fields/media.image.field_media_image/storage , look for \"Upload destination\" and see that \"Flysystem: fedora\" is selected.  However, there are methods for saving files that can explicitly set a different filesystem than the default. Migrations can explicitly set which file system a file is saved to and Islandora can emit events that also specify which file system a derivative should be saved to.", 
            "title": "Configuration"
        }, 
        {
            "location": "/technical-documentation/flysystem/#derivatives", 
            "text": "As hinted in the previous section, Islandora, by default saves derivatives to the Drupal public file system.  For example, if I upload a Tiff to a repository item as a File Media with the term \"Original File\", the \"Image Original File\" ( image_original_file ) Context is triggered. This fires the  'image_generate_a_service_file_from_an_original_file' action  which emits an event using the  'public' scheme (file system) .  To make Islandora save future derivatives to Fedora instead of to Drupal, change the corresponding action's \"File system\" setting ('scheme' in the corresponding config file) to 'fedora' instead of 'public'.", 
            "title": "Derivatives"
        }, 
        {
            "location": "/technical-documentation/versioning/", 
            "text": "Versioning Policy\n\n\nIslandora CLAW uses \nsemantic versioning\n, except for Drupal modules.\n\n\nComponents\n\n\nSemantic Versioning\n\n\nMajor version\n . \nMinor version\n . \nPatch\n\n\n\n\nMajor version\n; Major changes, and breaks the API\n\n\nMinor version\n; New features, and does not break the API\n\n\nPatch\n; Bug fixes, and never breaks backward compatibility\n\n\n\n\nExample: 1.2.3\n\n\n\n\nAlpaca\n\n\nChullo\n\n\nCLAW\n\n\nCrayfish\n\n\nCrayfish Commons\n\n\nSyn\n\n\n\n\nDrupal Contrib Versioning\n\n\nCore Compatibility\n - \nMajor\n . \nPatchLevel[-Extra]\n\n\nExample: 8.x-1.1\n\n\n\n\ndrupal-project\n\n\nislandora\n\n\njsonld", 
            "title": "Versioning Policy"
        }, 
        {
            "location": "/technical-documentation/versioning/#versioning-policy", 
            "text": "Islandora CLAW uses  semantic versioning , except for Drupal modules.", 
            "title": "Versioning Policy"
        }, 
        {
            "location": "/technical-documentation/versioning/#components", 
            "text": "", 
            "title": "Components"
        }, 
        {
            "location": "/technical-documentation/versioning/#semantic-versioning", 
            "text": "Major version  .  Minor version  .  Patch   Major version ; Major changes, and breaks the API  Minor version ; New features, and does not break the API  Patch ; Bug fixes, and never breaks backward compatibility   Example: 1.2.3   Alpaca  Chullo  CLAW  Crayfish  Crayfish Commons  Syn", 
            "title": "Semantic Versioning"
        }, 
        {
            "location": "/technical-documentation/versioning/#drupal-contrib-versioning", 
            "text": "Core Compatibility  -  Major  .  PatchLevel[-Extra]  Example: 8.x-1.1   drupal-project  islandora  jsonld", 
            "title": "Drupal Contrib Versioning"
        }, 
        {
            "location": "/technical-documentation/docs-build/", 
            "text": "Introduction\n\n\nThis documentation is built using \nmkdocs\n, a static site generator that is geared towards building project documentation. The documentation is created in the \nMarkdown\n format, and it all resides in the \ndocs\n directory in the repository. The organization of the documentation is controlled by the \nmkdocs.yml\n in the root of the repository.\n\n\nPrerequisites\n\n\nYou will need to have \nmkdocs\n installed locally, as well as the mkdocs theme.\n\n\nInstall \nmkdocs\n:\n\n\nsudo -H pip install mkdocs\n\n\nInstall material theme:\n\n\nsudo -H pip install mkdocs-material\n\n\nBuild and Deploy documentation\n\n\nMake sure you have all the submodules:\n\n\ngit submodule update --init --recursive\n\n\nDocumentation is build by running to the following command in the root of the repository:\n\n\nmkdocs build --clean\n\n\nThis command will create a static \nsite\n folder in the root of the repository.\n\n\nYou can preview any changes you have made to the documentation by running the following command:\n\n\nmkdocs serve\n\n\nAnd then visiting http://localhost:8111 in your browser.\n\n\nTo deploy documentation to GitHub Pages, issue the following command:\n\n\nmkdocs gh-deploy --clean", 
            "title": "Documentation Style Guide"
        }, 
        {
            "location": "/technical-documentation/docs-build/#introduction", 
            "text": "This documentation is built using  mkdocs , a static site generator that is geared towards building project documentation. The documentation is created in the  Markdown  format, and it all resides in the  docs  directory in the repository. The organization of the documentation is controlled by the  mkdocs.yml  in the root of the repository.", 
            "title": "Introduction"
        }, 
        {
            "location": "/technical-documentation/docs-build/#prerequisites", 
            "text": "You will need to have  mkdocs  installed locally, as well as the mkdocs theme.  Install  mkdocs :  sudo -H pip install mkdocs  Install material theme:  sudo -H pip install mkdocs-material", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/technical-documentation/docs-build/#build-and-deploy-documentation", 
            "text": "Make sure you have all the submodules:  git submodule update --init --recursive  Documentation is build by running to the following command in the root of the repository:  mkdocs build --clean  This command will create a static  site  folder in the root of the repository.  You can preview any changes you have made to the documentation by running the following command:  mkdocs serve  And then visiting http://localhost:8111 in your browser.  To deploy documentation to GitHub Pages, issue the following command:  mkdocs gh-deploy --clean", 
            "title": "Build and Deploy documentation"
        }, 
        {
            "location": "/technical-documentation/docs-build/", 
            "text": "Introduction\n\n\nThis documentation is built using \nmkdocs\n, a static site generator that is geared towards building project documentation. The documentation is created in the \nMarkdown\n format, and it all resides in the \ndocs\n directory in the repository. The organization of the documentation is controlled by the \nmkdocs.yml\n in the root of the repository.\n\n\nPrerequisites\n\n\nYou will need to have \nmkdocs\n installed locally, as well as the mkdocs theme.\n\n\nInstall \nmkdocs\n:\n\n\nsudo -H pip install mkdocs\n\n\nInstall material theme:\n\n\nsudo -H pip install mkdocs-material\n\n\nBuild and Deploy documentation\n\n\nMake sure you have all the submodules:\n\n\ngit submodule update --init --recursive\n\n\nDocumentation is build by running to the following command in the root of the repository:\n\n\nmkdocs build --clean\n\n\nThis command will create a static \nsite\n folder in the root of the repository.\n\n\nYou can preview any changes you have made to the documentation by running the following command:\n\n\nmkdocs serve\n\n\nAnd then visiting http://localhost:8111 in your browser.\n\n\nTo deploy documentation to GitHub Pages, issue the following command:\n\n\nmkdocs gh-deploy --clean", 
            "title": "How to Build Documentation"
        }, 
        {
            "location": "/technical-documentation/docs-build/#introduction", 
            "text": "This documentation is built using  mkdocs , a static site generator that is geared towards building project documentation. The documentation is created in the  Markdown  format, and it all resides in the  docs  directory in the repository. The organization of the documentation is controlled by the  mkdocs.yml  in the root of the repository.", 
            "title": "Introduction"
        }, 
        {
            "location": "/technical-documentation/docs-build/#prerequisites", 
            "text": "You will need to have  mkdocs  installed locally, as well as the mkdocs theme.  Install  mkdocs :  sudo -H pip install mkdocs  Install material theme:  sudo -H pip install mkdocs-material", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/technical-documentation/docs-build/#build-and-deploy-documentation", 
            "text": "Make sure you have all the submodules:  git submodule update --init --recursive  Documentation is build by running to the following command in the root of the repository:  mkdocs build --clean  This command will create a static  site  folder in the root of the repository.  You can preview any changes you have made to the documentation by running the following command:  mkdocs serve  And then visiting http://localhost:8111 in your browser.  To deploy documentation to GitHub Pages, issue the following command:  mkdocs gh-deploy --clean", 
            "title": "Build and Deploy documentation"
        }, 
        {
            "location": "/technical-documentation/migrate-csv/", 
            "text": "For a full tutorial on migrating from CSV, including sample content, please see \nmigrate_islandora_csv", 
            "title": "CSV"
        }, 
        {
            "location": "/technical-documentation/migrate-7x/", 
            "text": "For tools to migrate into Islandora 8 from an existing Islandora 7 instance, please see \nmigrate_7x_claw", 
            "title": "Islandora 7"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/", 
            "text": "Welcome!\n\n\nIf you are reading this document then you are interested in contributing to Islandora CLAW. All contributions are welcome: use-cases, documentation, code, patches, bug reports, feature requests, etc. You do not need to be a programmer to speak up!\n\n\nWorkflows\n\n\nThe group meets each Wednesday at 1:00 PM Eastern. Meeting notes and announcements are posted to the \nIslandora community list\n and the \nIslandora developers list\n. You can view meeting agendas, notes, and call-in information \nhere\n. Anybody is welcome to join the calls, and add items to the agenda.\n\n\nUse cases\n\n\nIf you would like to submit a use case to the Islandora CLAW project, please submit an issue \nhere\n using the \nUse Case template\n, prepending \"Use Case:\" to the title of the issue.\n\n\nDocumentation\n\n\nYou can contribute documentation in two different ways. One way is to create an issue \nhere\n, prepending \"Documentation:\" to the title of the issue. Another way is by pull request, which is the same process as \nContribute Code\n. All documentation resides in \ndocs\n.\n\n\nRequest a new feature\n\n\nTo request a new feature you should \nopen an issue in the CLAW repository\n or create a use case (see the \nUse cases\n section above), and summarize the desired functionality. Prepend \"Enhancement:\" if creating an issue on the project repo, and \"Use Case:\" if creating a use case.\n\n\nReport a bug\n\n\nTo report a bug you should \nopen an issue in the CLAW repository\n that summarizes the bug. Prepend the label \"Bug:\" to the title of the issue.\n\n\nIn order to help us understand and fix the bug it would be great if you could provide us with:\n\n\n\n\nThe steps to reproduce the bug. This includes information about e.g. the Islandora version you were using along with the versions of stack components.\n\n\nThe expected behavior.\n\n\nThe actual, incorrect behavior.\n\n\n\n\nFeel free to search the issue queue for existing issues (aka tickets) that already describe the problem; if there is such a ticket please add your information as a comment.\n\n\nIf you want to provide a pull along with your bug report:\n\n\nThat is great! In this case please send us a pull request as described in the section \nCreate a pull request\n  below.\n\n\nContribute code\n\n\nBefore you set out to contribute code you will need to have completed a \nContributor License Agreement\n or be covered by a \nCorporate Contributor Licencse Agreement\n. The signed copy of the license agreement should be sent to \n\n\nIf you are interested in contributing code to Islandora but do not know where to begin:\n\n\nIn this case you should \nbrowse open issues\n and check out \nuse cases\n.\n\n\nIf you are contributing Drupal code, it must adhere to \nDrupal Coding Standards\n; Travis CI will check for this on pull requests.\n\n\nContributions to the Islandora codebase should be sent as GitHub pull requests. See section \nCreate a pull request\n below for details. If there is any problem with the pull request we can work through it using the commenting features of GitHub.\n\n\n\n\nFor \nsmall patches\n, feel free to submit pull requests directly for those patches.\n\n\n\n\nFor \nlarger code contributions\n, please use the following process. The idea behind this process is to prevent any wasted work and catch design issues early on.\n\n\n\n\nOpen an issue\n, prepending \"Enhancement:\" in the title if a similar issue does not exist already. If a similar issue does exist, then you may consider participating in the work on the existing issue.\n\n\nComment on the issue with your plan for implementing the issue. Explain what pieces of the codebase you are going to touch and how everything is going to fit together.\n\n\nIslandora committers will work with you on the design to make sure you are on the right track.\n\n\nImplement your issue, create a pull request (see below), and iterate from there.\n\n\n\n\n\n\n\n\nCreate a pull request\n\n\nTake a look at \nCreating a pull request\n. In a nutshell you need to:\n\n\n\n\nFork\n this repository to your personal or institutional GitHub account (depending on the CLA you are working under). Be cautious of which branches you work from though (you'll want to base your work off master, or for Drupal modules use the most recent version branch). See \nFork a repo\n for detailed instructions.\n\n\nCommit any changes to your fork.\n\n\nSend a \npull request\n using the \npull request template\n to the Islandora GitHub repository that you forked in step 1.  If your pull request is related to an existing issue -- for instance, because you reported a \nbug/issue\n earlier -- prefix the title of your pull request with the corresponding issue number (e.g. \nissue-123: ...\n). Please also include a reference to the issue in the description of the pull. This can be done by using '#' plus the issue number like so '#123', also try to pick an appropriate name for the branch in which you're issuing the pull request from.\n\n\n\n\nYou may want to read \nSyncing a fork\n for instructions on how to keep your fork up to date with the latest changes of the upstream (official) repository.\n\n\nLicense Agreements\n\n\nThe Islandora Foundation requires that contributors complete a \nContributor License Agreement\n or be covered by a \nCorporate Contributor License Agreement\n. The signed copy of the license agreement should be sent to \ncommunity@islandora.ca\n. This license is for your protection as a contributor as well as the protection of the Foundation and its users; it does not change your rights to use your own contributions for any other purpose.", 
            "title": "How to contribute"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/#welcome", 
            "text": "If you are reading this document then you are interested in contributing to Islandora CLAW. All contributions are welcome: use-cases, documentation, code, patches, bug reports, feature requests, etc. You do not need to be a programmer to speak up!", 
            "title": "Welcome!"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/#workflows", 
            "text": "The group meets each Wednesday at 1:00 PM Eastern. Meeting notes and announcements are posted to the  Islandora community list  and the  Islandora developers list . You can view meeting agendas, notes, and call-in information  here . Anybody is welcome to join the calls, and add items to the agenda.", 
            "title": "Workflows"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/#use-cases", 
            "text": "If you would like to submit a use case to the Islandora CLAW project, please submit an issue  here  using the  Use Case template , prepending \"Use Case:\" to the title of the issue.", 
            "title": "Use cases"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/#documentation", 
            "text": "You can contribute documentation in two different ways. One way is to create an issue  here , prepending \"Documentation:\" to the title of the issue. Another way is by pull request, which is the same process as  Contribute Code . All documentation resides in  docs .", 
            "title": "Documentation"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/#request-a-new-feature", 
            "text": "To request a new feature you should  open an issue in the CLAW repository  or create a use case (see the  Use cases  section above), and summarize the desired functionality. Prepend \"Enhancement:\" if creating an issue on the project repo, and \"Use Case:\" if creating a use case.", 
            "title": "Request a new feature"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/#report-a-bug", 
            "text": "To report a bug you should  open an issue in the CLAW repository  that summarizes the bug. Prepend the label \"Bug:\" to the title of the issue.  In order to help us understand and fix the bug it would be great if you could provide us with:   The steps to reproduce the bug. This includes information about e.g. the Islandora version you were using along with the versions of stack components.  The expected behavior.  The actual, incorrect behavior.   Feel free to search the issue queue for existing issues (aka tickets) that already describe the problem; if there is such a ticket please add your information as a comment.  If you want to provide a pull along with your bug report:  That is great! In this case please send us a pull request as described in the section  Create a pull request   below.", 
            "title": "Report a bug"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/#contribute-code", 
            "text": "Before you set out to contribute code you will need to have completed a  Contributor License Agreement  or be covered by a  Corporate Contributor Licencse Agreement . The signed copy of the license agreement should be sent to   If you are interested in contributing code to Islandora but do not know where to begin:  In this case you should  browse open issues  and check out  use cases .  If you are contributing Drupal code, it must adhere to  Drupal Coding Standards ; Travis CI will check for this on pull requests.  Contributions to the Islandora codebase should be sent as GitHub pull requests. See section  Create a pull request  below for details. If there is any problem with the pull request we can work through it using the commenting features of GitHub.   For  small patches , feel free to submit pull requests directly for those patches.   For  larger code contributions , please use the following process. The idea behind this process is to prevent any wasted work and catch design issues early on.   Open an issue , prepending \"Enhancement:\" in the title if a similar issue does not exist already. If a similar issue does exist, then you may consider participating in the work on the existing issue.  Comment on the issue with your plan for implementing the issue. Explain what pieces of the codebase you are going to touch and how everything is going to fit together.  Islandora committers will work with you on the design to make sure you are on the right track.  Implement your issue, create a pull request (see below), and iterate from there.", 
            "title": "Contribute code"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/#create-a-pull-request", 
            "text": "Take a look at  Creating a pull request . In a nutshell you need to:   Fork  this repository to your personal or institutional GitHub account (depending on the CLA you are working under). Be cautious of which branches you work from though (you'll want to base your work off master, or for Drupal modules use the most recent version branch). See  Fork a repo  for detailed instructions.  Commit any changes to your fork.  Send a  pull request  using the  pull request template  to the Islandora GitHub repository that you forked in step 1.  If your pull request is related to an existing issue -- for instance, because you reported a  bug/issue  earlier -- prefix the title of your pull request with the corresponding issue number (e.g.  issue-123: ... ). Please also include a reference to the issue in the description of the pull. This can be done by using '#' plus the issue number like so '#123', also try to pick an appropriate name for the branch in which you're issuing the pull request from.   You may want to read  Syncing a fork  for instructions on how to keep your fork up to date with the latest changes of the upstream (official) repository.", 
            "title": "Create a pull request"
        }, 
        {
            "location": "/contributing/CONTRIBUTING/#license-agreements", 
            "text": "The Islandora Foundation requires that contributors complete a  Contributor License Agreement  or be covered by a  Corporate Contributor License Agreement . The signed copy of the license agreement should be sent to  community@islandora.ca . This license is for your protection as a contributor as well as the protection of the Foundation and its users; it does not change your rights to use your own contributions for any other purpose.", 
            "title": "License Agreements"
        }, 
        {
            "location": "/contributing/committers/", 
            "text": "Islandora CLAW Committers\n\n\nIslandora CLAW is open source and released under MIT and GPLv2 licenses. The software and associated documentation is developed collectively by a community of contributors and committers. All interested community members are encouraged to contribute to the project. Contributors who demonstrate sustained engagement with the project through quality participation in meetings, mailing lists, documentation and code updates can be nominated by existing committers to also become a committers. It should be emphasized that committers need not be limited to software developers. Community members with skills in documentation and testing, for example, can also be committers.\n\n\nRights\n\n\nCommitters share the following rights:\n\n\n\n\nWrite access to the codebase\n\n\nNomination privileges of new committers\n\n\nRelease management privileges\n\n\nBinding votes on procedural, code modification, and release issues\n\n\nAccess to the private committers mailing list\n\n\n\n\nResponsibilities\n\n\nCommitters share the following responsibilities:\n\n\n\n\nMonitor and respond to project mailing lists\n\n\nAttend project and technical meetings\n\n\nMonitor and vet bug-tracker issues\n\n\nReview and commit code contributions\n\n\nEnsure code contributions are properly licensed\n\n\nGuide and mentor new committers\n\n\n\n\nCommitters\n\n\nThe following is an alphabetized list of the current Islandora CLAW committers:\n\n\n\n\n\n\n\n\nName\n\n\nOrganization\n\n\nirc nick\n\n\n\n\n\n\n\n\n\n\nAaron Coburn\n\n\nAmherst College\n\n\nacoburn\n\n\n\n\n\n\nJonathan Green\n\n\nLYRASIS\n\n\njonathangee\n\n\n\n\n\n\nMark Jordan\n\n\nSimon Fraser University\n\n\nmjordan\n\n\n\n\n\n\nDanny Lamb\n\n\nIslandora Foundation\n\n\ndhlamb\n\n\n\n\n\n\nNatkeeran Ledchumykanthan\n\n\nUniversity of Toronto Scarborough\n\n\nNatkeeran\n\n\n\n\n\n\nRosie Le Faive\n\n\nUniversity of Prince Edward Island\n\n\nrlefaive\n\n\n\n\n\n\nDiego Pino\n\n\nMETRO\n\n\ndiegopino\n\n\n\n\n\n\nSeth Shaw\n\n\nUniversity of Nevada, Las Vegas\n\n\nseth-shaw\n\n\n\n\n\n\nJared Whiklo\n\n\nUniversity of Manitoba\n\n\nwhikloj\n\n\n\n\n\n\n\n\nEmeritus Committers\n\n\nThe following is an alphabetized list of the prior Islandora CLAW committers:\n\n\n\n\n\n\n\n\nName\n\n\nOrganization\n\n\nirc nick\n\n\n\n\n\n\n\n\n\n\nNick Ruest\n\n\nYork University\n\n\nruebot\n\n\n\n\n\n\n\n\nGuidelines for assessing new candidates for committership\n\n\nWhen a contributor is nominated to become a committer, the following guidelines should be used by existing committers to evaluate the nominee's suitability.\n\n\nAbility to work cooperatively with peers\n\n\nHow do we evaluate? By the interactions they have through mail. By how they respond to criticism. By how they participate in decision-making process.\n\n\nAbility to be a mentor\n\n\nHow do we evaluate? By the interactions they have through mail. By how clear they are and how willing they are to point at appropriate background materials (or even create them).\n\n\nCommunity\n\n\nHow do we evaluate? By the interactions they have through mail. Do they help to answer questions raised on the mailing list; do they show a helpful attitude and respect for other's ideas.\n\n\nCommitment\n\n\nHow do we evaluate? By time, by sticking through tough issues, by helping on not-so-fun tasks as well.\n\n\nPersonal skill/ability\n\n\nHow do we evaluate? A solid general understanding of the project. Quality of discussion in mail. Patches (where applicable) easy to apply with only a cursory review.\n\n\nNew Committer Process\n\n\nThis section describes the process for handling the voting of a new committer.\n\n\nSummary:\n\n\n\n\nCall a vote (\ntemplates/committerVote.txt\n)\n\n\nClose a vote (\ntemplates/closeCommitterVote.txt\n)\n\n\nInvite the new committer (\ntemplates/committerInvite.txt\n), if no CLA is on file (\ntemplates/committerInviteCLA.txt\n)\n\n\n\n\nIf they accept, then do:\n\n\n\n\nAdd to Committer team of GitHub Islandora organization\n\n\nAdd to Committer team of GitHub Islandora-Labs organization\n\n\nAdd to islandora-committers google-group\n\n\nAdd to committers wiki page: Islandora Committers \n\n\nAnnounce the new committer (\ntemplate/committerAnnounce.txt\n)", 
            "title": "Committers"
        }, 
        {
            "location": "/contributing/committers/#islandora-claw-committers", 
            "text": "Islandora CLAW is open source and released under MIT and GPLv2 licenses. The software and associated documentation is developed collectively by a community of contributors and committers. All interested community members are encouraged to contribute to the project. Contributors who demonstrate sustained engagement with the project through quality participation in meetings, mailing lists, documentation and code updates can be nominated by existing committers to also become a committers. It should be emphasized that committers need not be limited to software developers. Community members with skills in documentation and testing, for example, can also be committers.", 
            "title": "Islandora CLAW Committers"
        }, 
        {
            "location": "/contributing/committers/#rights", 
            "text": "Committers share the following rights:   Write access to the codebase  Nomination privileges of new committers  Release management privileges  Binding votes on procedural, code modification, and release issues  Access to the private committers mailing list", 
            "title": "Rights"
        }, 
        {
            "location": "/contributing/committers/#responsibilities", 
            "text": "Committers share the following responsibilities:   Monitor and respond to project mailing lists  Attend project and technical meetings  Monitor and vet bug-tracker issues  Review and commit code contributions  Ensure code contributions are properly licensed  Guide and mentor new committers", 
            "title": "Responsibilities"
        }, 
        {
            "location": "/contributing/committers/#committers", 
            "text": "The following is an alphabetized list of the current Islandora CLAW committers:     Name  Organization  irc nick      Aaron Coburn  Amherst College  acoburn    Jonathan Green  LYRASIS  jonathangee    Mark Jordan  Simon Fraser University  mjordan    Danny Lamb  Islandora Foundation  dhlamb    Natkeeran Ledchumykanthan  University of Toronto Scarborough  Natkeeran    Rosie Le Faive  University of Prince Edward Island  rlefaive    Diego Pino  METRO  diegopino    Seth Shaw  University of Nevada, Las Vegas  seth-shaw    Jared Whiklo  University of Manitoba  whikloj", 
            "title": "Committers"
        }, 
        {
            "location": "/contributing/committers/#emeritus-committers", 
            "text": "The following is an alphabetized list of the prior Islandora CLAW committers:     Name  Organization  irc nick      Nick Ruest  York University  ruebot", 
            "title": "Emeritus Committers"
        }, 
        {
            "location": "/contributing/committers/#guidelines-for-assessing-new-candidates-for-committership", 
            "text": "When a contributor is nominated to become a committer, the following guidelines should be used by existing committers to evaluate the nominee's suitability.", 
            "title": "Guidelines for assessing new candidates for committership"
        }, 
        {
            "location": "/contributing/committers/#ability-to-work-cooperatively-with-peers", 
            "text": "How do we evaluate? By the interactions they have through mail. By how they respond to criticism. By how they participate in decision-making process.", 
            "title": "Ability to work cooperatively with peers"
        }, 
        {
            "location": "/contributing/committers/#ability-to-be-a-mentor", 
            "text": "How do we evaluate? By the interactions they have through mail. By how clear they are and how willing they are to point at appropriate background materials (or even create them).", 
            "title": "Ability to be a mentor"
        }, 
        {
            "location": "/contributing/committers/#community", 
            "text": "How do we evaluate? By the interactions they have through mail. Do they help to answer questions raised on the mailing list; do they show a helpful attitude and respect for other's ideas.", 
            "title": "Community"
        }, 
        {
            "location": "/contributing/committers/#commitment", 
            "text": "How do we evaluate? By time, by sticking through tough issues, by helping on not-so-fun tasks as well.", 
            "title": "Commitment"
        }, 
        {
            "location": "/contributing/committers/#personal-skillability", 
            "text": "How do we evaluate? A solid general understanding of the project. Quality of discussion in mail. Patches (where applicable) easy to apply with only a cursory review.", 
            "title": "Personal skill/ability"
        }, 
        {
            "location": "/contributing/committers/#new-committer-process", 
            "text": "This section describes the process for handling the voting of a new committer.  Summary:   Call a vote ( templates/committerVote.txt )  Close a vote ( templates/closeCommitterVote.txt )  Invite the new committer ( templates/committerInvite.txt ), if no CLA is on file ( templates/committerInviteCLA.txt )   If they accept, then do:   Add to Committer team of GitHub Islandora organization  Add to Committer team of GitHub Islandora-Labs organization  Add to islandora-committers google-group  Add to committers wiki page: Islandora Committers   Announce the new committer ( template/committerAnnounce.txt )", 
            "title": "New Committer Process"
        }
    ]
}