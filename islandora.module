<?php

/*
 * @file islandora.module
 * defines paths (drupal menu items) as entry points and acts as a hub for dispatching tasks to other modules.
 * 
 * 
 * This file is part of Islandora.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with the program.  If not, see <http ://www.gnu.org/licenses/>.
 */


//Permissions
define('FEDORA_VIEW', 'view fedora repository');
define('FEDORA_METADATA_EDIT', 'edit fedora metadata');
define('FEDORA_ADD_DS', 'add fedora datastreams');
define('FEDORA_INGEST', 'ingest fedora objects');
define('FEDORA_PURGE', 'delete fedora objects and datastreams');
define('FEDORA_MODIFY_STATE', 'modify fedora state');
define('FEDORA_MANAGE', 'manage fedora items');

//hooks
define('ISLANDORA_VIEW_HOOK', 'islandora_view_object');
define('ISLANDORA_EDIT_HOOK', 'islandora_edit_object');

/**
 * Implementation of hook_menu. 
 * we need some standard entry points so we can have consistent urls for different Object actions
 */
function islandora_menu() {
  $items = array();

  $items['admin/islandora'] = array(
    'title' => 'Islandora Configuration',
    'description' => "Configure Islandora's interaction with Fedora",
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/islandora/configure'] = array(
    'title' => 'Islandora Configuration',
    'description' => 'Enter the Islandora collection information here.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_repository_admin'),
    'file' => 'admin/islandora.admin.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -1,
  );

  $items['islandora/object/%islandora_object/manage/ingest'] = array(
    'title' => 'Add an object',
    'page callback' => 'islandora_ingest_callback',
    'page arguments' => array(2),
    'file' => 'includes/ingest-menu.inc',
    'type' => MENU_LOCAL_ACTION,
    'access callback' => 'islandora_ingest_access_callback',
    'access arguments' => array(2, FEDORA_INGEST),
  );

  $items['islandora'] = array(
    'title' => 'Islandora Repository',
    'page callback' => 'islandora_view_default_object',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array(FEDORA_VIEW),
  );

  $items['islandora/object/%islandora_object'] = array(
    'title' => 'Repository',
    'page callback' => 'islandora_view_object',
    'page arguments' => array(2),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => 'islandora_access_callback',
    'access arguments' => array(2, FEDORA_VIEW),
  );


  $items['islandora/object/%islandora_object/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  $items['islandora/object/%islandora_object/view/default'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  $items['islandora/object/%islandora_object/manage'] = array(
    'title' => 'Manage',
    'page callback' => 'islandora_edit_object',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'islandora_access_callback',
    'access arguments' => array(2, FEDORA_MODIFY_STATE),
  );

  $items['islandora/object/%islandora_object/manage/datastreams'] = array(
    'title' => 'Datastreams',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['islandora/object/%islandora_object/manage/properties'] = array(
    'title' => 'Properties',
    'page callback' => 'drupal_get_form',
    'file' => 'includes/object_properties.inc',
    'page arguments' => array('islandora_edit_properties_form', 2),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'islandora_access_callback',
    'access arguments' => array(2, FEDORA_MODIFY_STATE),
    'weight' => -5,
  );

  $items['islandora/object/%islandora_object/delete'] = array(
    'title' => 'Delete object',
    'file' => 'includes/purge.form.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_purge_object', 2),
    'type' => MENU_CALLBACK,
    'access callback' => 'islandora_access_callback',
    'access arguments' => array(2, FEDORA_PURGE),
  );

  $items['islandora/object/%islandora_object/manage/datastreams/add'] = array(
    'title' => 'Add a datastream',
    'file' => 'includes/datastream.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_add_datastream_form', 2),
    'type' => MENU_LOCAL_ACTION,
    'access callback' => 'islandora_access_callback',
    'access arguments' => array(2, FEDORA_ADD_DS)
  );

  $items['islandora/object/%islandora_object/manage/datastreams/add/autocomplete'] = array(
    'file' => 'includes/datastream.inc',
    'page callback' => 'islandora_datastream_autocomplete_callback',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access callback' => 'islandora_access_callback',
    'access arguments' => array(2, FEDORA_ADD_DS)
  );

  $items['islandora/object/%islandora_object/datastream/%'] = array(
    'title' => 'View datastream',
    'page callback' => 'islandora_view_datastream',
    'page arguments' => array(2, 4),
    'type' => MENU_CALLBACK,
    'file' => 'includes/datastream.inc',
    'access callback' => 'islandora_access_callback',
    'access arguments' => array(2, FEDORA_VIEW),
  );

  $items['islandora/object/%islandora_object/datastream/%/view'] = array(
    'title' => 'View datastream',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['islandora/object/%islandora_object/datastream/%/download'] = array(
    'title' => 'Download datastream',
    'page callback' => 'islandora_view_datastream',
    'page arguments' => array(2, 4, 5),
    'type' => MENU_CALLBACK,
    'file' => 'includes/datastream.inc',
    'access callback' => 'islandora_access_callback',
    'access arguments' => array(2, FEDORA_VIEW),
  );

  $items['islandora/object/%islandora_object/datastream/%/edit'] = array(
    'title' => 'Edit datastream',
    'page callback' => 'islandora_edit_datastream',
    'page arguments' => array(2, 4),
    'type' => MENU_CALLBACK,
    'file' => 'includes/datastream.inc',
    'access callback' => 'islandora_access_callback',
    'access arguments' => array(2, FEDORA_METADATA_EDIT),
  );

  $items['islandora/object/%islandora_object/datastream/%/delete'] = array(
    'title' => 'Purge data stream',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_purge_datastream', 2, 4),
    'file' => 'includes/purge.form.inc',
    'type' => MENU_CALLBACK,
    'access callback' => 'islandora_access_callback',
    'access arguments' => array(2, FEDORA_PURGE),
  );

  return $items;
}

function islandora_admin_paths() {
  $paths = array();
  $paths['*/manage*'] = TRUE;
  return $paths;
}

/**
 * determines whether we can see the object or not
 * checks PID namespace permissions, and user permissions
 * @global object $user
 * @param string $op
 * @param string $pid
 *
 *  @return boolean 
 */
function islandora_access_callback($object = NULL, $perm = NULL) {
  if(!$object || !$perm) {
    return FALSE;
  }

  $isRestricted = variable_get('islandora_namespace_restriction_enforced', FALSE);
  
  if (!$isRestricted) {
    $namespace_access = TRUE;
  }
  else {
    $pid_namespace = substr($object->id, 0, strpos($object->id, ':') + 1); //Get the namespace (with colon)
    $allowed_namespaces = explode(" ", variable_get('islandora_pids_allowed', 'default: demo: changeme: islandora: ilives: islandora-book: books: newspapers: '));
    $namespace_access = in_array($pid_namespace, $allowed_namespaces);
  }

  return ($namespace_access && user_access($perm));
}

/**
 * returns an array listing object types provided by sub modules
 * @return array 
 */
function islandora_get_types() {
  return module_invoke_all('islandora_get_types');
}

function islandora_init() {
  if (path_is_admin(current_path())) {
    drupal_add_css(drupal_get_path('module', 'islandora') . '/css/islandora.admin.css');
  }
}

/**
 * a function to call other modules edit page.  If there are not any modules
 * that handle this function this module will build a default page.
 * @global object $user
 * @param string $object_id
 * @return string 
 */
function islandora_edit_object($object) {
  if(!$object) {
    return drupal_not_found();
  }
  drupal_alter('islandora_edit_object', $object);
  $arr = module_invoke_all('islandora_edit_object', $object);
  $output = "";
  foreach ($arr as $key => $value) {
    $output .= $value; //if we have multiple modules handle one cmodel we need to iterate over multiple
  }
  //we could do another module invoke all here to build the edit tab with a default implemented in this module?
  return $output;
}

/**
 * edit properties form
 * @param type $object_id
 * @return string 
 */
function islandora_edit_properties($object_id) {
  $object = islandora_object_load($object_id);
  if (isset($object)) {
    module_load_include('inc', 'islandora', 'includes/object_properties');
    $form = drupal_get_form('islandora_edit_properties_form', $object);
    drupal_set_title($object->label);
    return drupal_render($form);
  }
  return "";
}

/**
 * builds a default page for the edit tab
 *
 * @param object $fedora_object 
 *   A tuque Fedora Object
 */
function islandora_islandora_edit_object($fedora_object) {
  $supported_models = islandora_get_types();
  $output = "";
  foreach ($fedora_object->models as $model) {
    if (isset($supported_models[$model][ISLANDORA_EDIT_HOOK]) && $supported_models[$model][ISLANDORA_EDIT_HOOK] == TRUE) {//another module is handling the view
      return;
    }
  }
  $output = theme('islandora_default_edit', array('islandora_object' => $fedora_object));
  return array('Default Edit output' => $output);
}

function islandora_view_default_object() {
  $pid = variable_get('islandora_repository_pid', 'islandora:root');
  drupal_goto("islandora/object/$pid");
}

/**
 * The view entry point.  modules should implement hook_islandora_view_object for the Fedora Content models that
 * their modules want to provide a view for.
 * @global object $user
 * @param string $object_id
 * 
 * @return string 
 */
function islandora_view_object($fedora_object = NULL) {
  module_load_include('inc', 'islandora', 'includes/breadcrumb');
  global $user;

  if(!$fedora_object) {
    return drupal_not_found();
  }

  drupal_set_breadcrumb(islandora_get_breadcrumbs($fedora_object));

  $page_number = (empty($_GET['page'])) ? '1' : $_GET['page'];
  $page_size = (empty($_GET['pagesize'])) ? '10' : $_GET['pagesize'];

  drupal_alter('islandora_object', $fedora_object); //modify object if required before it is passed along
  $arr = module_invoke_all('islandora_view_object', $fedora_object, $user, $page_number, $page_size); //allow submodules to decide how to handle content base on object type
  if (empty($arr)) {
    //TODO: make sure we iterate over the array as they will be more then one cmodel per object
    drupal_set_message(t('there was an error loading the view for islandora object %s', array('%s' => $object_id)), 'error');
    return "";
  }
  arsort($arr);
  drupal_alter('islandora_display', $arr);
  $output = "";
  foreach ($arr as $key => $value) {
    $output .= $value; //if we have multiple modules handle one cmodel we need to iterate over multiple
  }
  return $output;
}

/**
 * the default view hook.  If there are no modules registered to handle this objects cmodels or there are 
 * not any cmodels specified this will create a default display.
 * @param string $object_id
 * @return string 
 */
function islandora_islandora_view_object($object) {
  $supported_models = islandora_get_types();
  $output = "";
  foreach ($object->models as $model) {
    if (isset($supported_models[$model][ISLANDORA_VIEW_HOOK]) && (boolean) $supported_models[$model][ISLANDORA_VIEW_HOOK] === TRUE) {//another module is handling the view
      return;
    }
  }
  $output = theme('islandora_default', array('islandora_object' => $object));
  return array('Default Output' => $output);
}

/**
 * Theme registry function
 * @return array
 */
function islandora_theme() {
  return array(
    'islandora_default' => array(
      'file' => 'theme/islandora.theme.inc',
      'template' => 'theme/islandora-object',
      'variables' => array('islandora_object' => NULL),
    ),
    'islandora_default_edit' => array(
      'file' => 'theme/islandora.theme.inc',
      'template' => 'theme/islandora-object-edit',
      'variables' => array('islandora_object' => NULL),
    ),
  );
}

/**
 * drupal hook_permissions function
 * @return array
 */
function islandora_permission() {
  return array(
    FEDORA_VIEW => array(
      'title' => t('View Fedora Repository objects and datastreams'),
      'description' => t('Users with this permission will be allowed to view Fedora objects and datastreams.  Unless Fedora XACML security policies limits this functionality to certain objects.')
    ),
    FEDORA_ADD_DS => array(
      'title' => t('Add Fedora streams to Fedora objects'),
      'description' => t('Users with this permission will be allowed to add datastreams to Fedora objects.  Unless Fedora XACML security policies limits this functionality to certain objects.')
    ),
    FEDORA_METADATA_EDIT => array(
      'title' => t('Edit Fedora Metadata'),
      'description' => t('Users with this permission will be allowed to edit Fedora Metadata streams')
    ),
    FEDORA_INGEST => array(
      'title' => t('Create new Fedora objects'),
      'description' => t('Users with this permission will be allowed to create new objects in the Fedora repository')
    ),
    FEDORA_PURGE => array(
      'title' => t('Permanently remove objects from the Fedora repository'),
      'description' => t('Users with this permission will be allowed to Permantly remove objects from the Fedora repository.')
    ),
    FEDORA_MODIFY_STATE => array(
      'title' => t('Change a Fedora objects state'),
      'description' => t('Users with this permission will be allowed to change a Fedora objects state.')
    ),
    FEDORA_MANAGE => array(
      'title' => t('View Fedora Manage tabs'),
      'description' => t('Users with this permission will be allowed to view fedora manage manage tabs.')
    )
  );
}

/**
 * a helper function to get a connection and return an object
 * @global object $user
 * @param string $object_id
 * @return FedoraObject 
 */
function islandora_object_load($object_id) {
  module_load_include('inc', 'islandora', 'includes/tuque');
  static $islandora_tuque = NULL;

  if(!$islandora_tuque) {
    $islandora_tuque = new IslandoraTuque();
  }

  try {
    $fedora_object = $islandora_tuque->repository->getObject($object_id);
  } catch (Exception $e) {
    return NULL;
  }
  
  return $fedora_object;
}

function islandora_ingest_access_callback($object, $perm) {
  if(islandora_access_callback($object, $perm) === FALSE) {
    return FALSE;
  }

  $ingest_registry = module_invoke_all('islandora_ingest_registry', $object);

  if(count($ingest_registry) > 0) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}